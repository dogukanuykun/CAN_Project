
CAN_LoopBack.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000579c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  0800592c  0800592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a1c  08005a1c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005a1c  08005a1c  00015a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a24  08005a24  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a24  08005a24  00015a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a28  08005a28  00015a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000005bc  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000618  20000618  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010101  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000026da  00000000  00000000  000301d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c80  00000000  00000000  000328b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000981  00000000  00000000  00033530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022643  00000000  00000000  00033eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000f76f  00000000  00000000  000564f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce231  00000000  00000000  00065c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003930  00000000  00000000  00133e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  001377c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005914 	.word	0x08005914

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005914 	.word	0x08005914

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <main>:
UART_HandleTypeDef huart2;
CAN_HandleTypeDef hcan1;


int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0

	HAL_Init();
 8000580:	f000 fb36 	bl	8000bf0 <HAL_Init>

	SystemClock_Config_HSE(SYS_CLOCK_FREQ_50_MHZ);
 8000584:	2032      	movs	r0, #50	; 0x32
 8000586:	f000 f817 	bl	80005b8 <SystemClock_Config_HSE>

	GPIO_Init();
 800058a:	f000 f985 	bl	8000898 <GPIO_Init>

	UART2_Init();
 800058e:	f000 f9a7 	bl	80008e0 <UART2_Init>

	CAN1_Init();
 8000592:	f000 f8a5 	bl	80006e0 <CAN1_Init>

	CAN_Filter_Config();
 8000596:	f000 f959 	bl	800084c <CAN_Filter_Config>

	if( HAL_CAN_Start(&hcan1) != HAL_OK)
 800059a:	4806      	ldr	r0, [pc, #24]	; (80005b4 <main+0x38>)
 800059c:	f000 fd76 	bl	800108c <HAL_CAN_Start>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <main+0x2e>
	{
		Error_handler();
 80005a6:	f000 f9c1 	bl	800092c <Error_handler>
	}

	CAN1_Tx();
 80005aa:	f000 f8cf 	bl	800074c <CAN1_Tx>

	CAN1_Rx();
 80005ae:	f000 f917 	bl	80007e0 <CAN1_Rx>

	while(1);
 80005b2:	e7fe      	b.n	80005b2 <main+0x36>
 80005b4:	200000c0 	.word	0x200000c0

080005b8 <SystemClock_Config_HSE>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config_HSE(uint8_t clock_freq)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b096      	sub	sp, #88	; 0x58
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	RCC_OscInitTypeDef Osc_Init;
	RCC_ClkInitTypeDef Clock_Init;
    uint8_t flash_latency=0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	Osc_Init.OscillatorType = RCC_OSCILLATORTYPE_HSE ;
 80005c8:	2301      	movs	r3, #1
 80005ca:	623b      	str	r3, [r7, #32]
	Osc_Init.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d0:	627b      	str	r3, [r7, #36]	; 0x24
	Osc_Init.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	63bb      	str	r3, [r7, #56]	; 0x38
	Osc_Init.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005da:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch(clock_freq)
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	2b78      	cmp	r3, #120	; 0x78
 80005e0:	d034      	beq.n	800064c <SystemClock_Config_HSE+0x94>
 80005e2:	2b78      	cmp	r3, #120	; 0x78
 80005e4:	dc76      	bgt.n	80006d4 <SystemClock_Config_HSE+0x11c>
 80005e6:	2b32      	cmp	r3, #50	; 0x32
 80005e8:	d002      	beq.n	80005f0 <SystemClock_Config_HSE+0x38>
 80005ea:	2b54      	cmp	r3, #84	; 0x54
 80005ec:	d017      	beq.n	800061e <SystemClock_Config_HSE+0x66>
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
          flash_latency = 3;
	     break;

	  default:
	   return ;
 80005ee:	e071      	b.n	80006d4 <SystemClock_Config_HSE+0x11c>
		  Osc_Init.PLL.PLLM = 4;
 80005f0:	2304      	movs	r3, #4
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 50;
 80005f4:	2332      	movs	r3, #50	; 0x32
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000600:	230f      	movs	r3, #15
 8000602:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000604:	2302      	movs	r3, #2
 8000606:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 800060c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000610:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
          flash_latency = 1;
 8000616:	2301      	movs	r3, #1
 8000618:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 800061c:	e02e      	b.n	800067c <SystemClock_Config_HSE+0xc4>
		  Osc_Init.PLL.PLLM = 4;
 800061e:	2304      	movs	r3, #4
 8000620:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 84;
 8000622:	2354      	movs	r3, #84	; 0x54
 8000624:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000626:	2302      	movs	r3, #2
 8000628:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 800062a:	2302      	movs	r3, #2
 800062c:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
          flash_latency = 2;
 8000644:	2302      	movs	r3, #2
 8000646:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 800064a:	e017      	b.n	800067c <SystemClock_Config_HSE+0xc4>
		  Osc_Init.PLL.PLLM = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
		  Osc_Init.PLL.PLLN = 120;
 8000650:	2378      	movs	r3, #120	; 0x78
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
		  Osc_Init.PLL.PLLP = RCC_PLLP_DIV2;
 8000654:	2302      	movs	r3, #2
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
		  Osc_Init.PLL.PLLQ = 2;
 8000658:	2302      	movs	r3, #2
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c
		  Clock_Init.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60fb      	str	r3, [r7, #12]
		  Clock_Init.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2302      	movs	r3, #2
 8000662:	613b      	str	r3, [r7, #16]
		  Clock_Init.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
		  Clock_Init.APB1CLKDivider = RCC_HCLK_DIV4;
 8000668:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800066c:	61bb      	str	r3, [r7, #24]
		  Clock_Init.APB2CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000672:	61fb      	str	r3, [r7, #28]
          flash_latency = 3;
 8000674:	2303      	movs	r3, #3
 8000676:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	     break;
 800067a:	bf00      	nop
	 }

		if (HAL_RCC_OscConfig(&Osc_Init) != HAL_OK)
 800067c:	f107 0320 	add.w	r3, r7, #32
 8000680:	4618      	mov	r0, r3
 8000682:	f002 ffb1 	bl	80035e8 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config_HSE+0xd8>
	{
			Error_handler();
 800068c:	f000 f94e 	bl	800092c <Error_handler>
	}



	if (HAL_RCC_ClockConfig(&Clock_Init, flash_latency) != HAL_OK)
 8000690:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	4611      	mov	r1, r2
 800069a:	4618      	mov	r0, r3
 800069c:	f003 fa1c 	bl	8003ad8 <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config_HSE+0xf2>
	{
		Error_handler();
 80006a6:	f000 f941 	bl	800092c <Error_handler>
	}


	/*Configure the systick timer interrupt frequency (for every 1 ms) */
	uint32_t hclk_freq = HAL_RCC_GetHCLKFreq();
 80006aa:	f003 fc01 	bl	8003eb0 <HAL_RCC_GetHCLKFreq>
 80006ae:	6538      	str	r0, [r7, #80]	; 0x50
	HAL_SYSTICK_Config(hclk_freq/1000);
 80006b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80006b2:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <SystemClock_Config_HSE+0x124>)
 80006b4:	fba2 2303 	umull	r2, r3, r2, r3
 80006b8:	099b      	lsrs	r3, r3, #6
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 f841 	bl	8001742 <HAL_SYSTICK_Config>

	/**Configure the Systick
	*/
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80006c0:	2004      	movs	r0, #4
 80006c2:	f001 f84b 	bl	800175c <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	f04f 30ff 	mov.w	r0, #4294967295
 80006ce:	f001 f81c 	bl	800170a <HAL_NVIC_SetPriority>
 80006d2:	e000      	b.n	80006d6 <SystemClock_Config_HSE+0x11e>
	   return ;
 80006d4:	bf00      	nop



 }
 80006d6:	3758      	adds	r7, #88	; 0x58
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	10624dd3 	.word	0x10624dd3

080006e0 <CAN1_Init>:



void CAN1_Init(){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

	hcan1.Instance = CAN1;
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <CAN1_Init+0x64>)
 80006e6:	4a18      	ldr	r2, [pc, #96]	; (8000748 <CAN1_Init+0x68>)
 80006e8:	601a      	str	r2, [r3, #0]
	hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <CAN1_Init+0x64>)
 80006ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006f0:	609a      	str	r2, [r3, #8]
	hcan1.Init.AutoRetransmission = DISABLE;
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <CAN1_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	76da      	strb	r2, [r3, #27]
	hcan1.Init.AutoBusOff = ENABLE;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <CAN1_Init+0x64>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <CAN1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	769a      	strb	r2, [r3, #26]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <CAN1_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <CAN1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	761a      	strb	r2, [r3, #24]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <CAN1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	775a      	strb	r2, [r3, #29]

	//can bit timings
	hcan1.Init.Prescaler = 16;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <CAN1_Init+0x64>)
 8000718:	2210      	movs	r2, #16
 800071a:	605a      	str	r2, [r3, #4]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <CAN1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <CAN1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <CAN1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]

	if ( HAL_CAN_Init(&hcan1) != HAL_OK) {
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <CAN1_Init+0x64>)
 8000730:	f000 fad0 	bl	8000cd4 <HAL_CAN_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <CAN1_Init+0x5e>
		Error_handler();
 800073a:	f000 f8f7 	bl	800092c <Error_handler>
	}


}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200000c0 	.word	0x200000c0
 8000748:	40006400 	.word	0x40006400

0800074c <CAN1_Tx>:


void CAN1_Tx(void){
 800074c:	b580      	push	{r7, lr}
 800074e:	b096      	sub	sp, #88	; 0x58
 8000750:	af00      	add	r7, sp, #0
	char msg[50];
	CAN_TxHeaderTypeDef TxHeader;

	uint32_t TxMailbox;

	uint8_t our_message[5] = {'H','E','L','L','O'};
 8000752:	4a1f      	ldr	r2, [pc, #124]	; (80007d0 <CAN1_Tx+0x84>)
 8000754:	463b      	mov	r3, r7
 8000756:	e892 0003 	ldmia.w	r2, {r0, r1}
 800075a:	6018      	str	r0, [r3, #0]
 800075c:	3304      	adds	r3, #4
 800075e:	7019      	strb	r1, [r3, #0]

	TxHeader.DLC = 5;
 8000760:	2305      	movs	r3, #5
 8000762:	61fb      	str	r3, [r7, #28]
	TxHeader.StdId = 0x65D;
 8000764:	f240 635d 	movw	r3, #1629	; 0x65d
 8000768:	60fb      	str	r3, [r7, #12]
	TxHeader.IDE   = CAN_ID_STD;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
	TxHeader.RTR = CAN_RTR_DATA;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]

	if( HAL_CAN_AddTxMessage(&hcan1,&TxHeader,our_message,&TxMailbox) != HAL_OK)
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	463a      	mov	r2, r7
 8000778:	f107 010c 	add.w	r1, r7, #12
 800077c:	4815      	ldr	r0, [pc, #84]	; (80007d4 <CAN1_Tx+0x88>)
 800077e:	f000 fcc9 	bl	8001114 <HAL_CAN_AddTxMessage>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <CAN1_Tx+0x40>
	{
		Error_handler();
 8000788:	f000 f8d0 	bl	800092c <Error_handler>
	}

	while( HAL_CAN_IsTxMessagePending(&hcan1,TxMailbox));
 800078c:	bf00      	nop
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	4619      	mov	r1, r3
 8000792:	4810      	ldr	r0, [pc, #64]	; (80007d4 <CAN1_Tx+0x88>)
 8000794:	f000 fd8e 	bl	80012b4 <HAL_CAN_IsTxMessagePending>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d1f7      	bne.n	800078e <CAN1_Tx+0x42>

	sprintf(msg,"Message Transmitted\r\n");
 800079e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a2:	490d      	ldr	r1, [pc, #52]	; (80007d8 <CAN1_Tx+0x8c>)
 80007a4:	4618      	mov	r0, r3
 80007a6:	f004 fcc5 	bl	8005134 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff fd0e 	bl	80001d0 <strlen>
 80007b4:	4603      	mov	r3, r0
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80007bc:	f04f 33ff 	mov.w	r3, #4294967295
 80007c0:	4806      	ldr	r0, [pc, #24]	; (80007dc <CAN1_Tx+0x90>)
 80007c2:	f003 fbf9 	bl	8003fb8 <HAL_UART_Transmit>
}
 80007c6:	bf00      	nop
 80007c8:	3758      	adds	r7, #88	; 0x58
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	08005944 	.word	0x08005944
 80007d4:	200000c0 	.word	0x200000c0
 80007d8:	0800592c 	.word	0x0800592c
 80007dc:	20000078 	.word	0x20000078

080007e0 <CAN1_Rx>:

void CAN1_Rx(void){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b096      	sub	sp, #88	; 0x58
 80007e4:	af00      	add	r7, sp, #0
	uint8_t rcvd_msg[5];

	char msg[50];

	//we are waiting for at least one message in to the RX FIFO0
	while(! HAL_CAN_GetRxFifoFillLevel(&hcan1,CAN_RX_FIFO0));
 80007e6:	bf00      	nop
 80007e8:	2100      	movs	r1, #0
 80007ea:	4815      	ldr	r0, [pc, #84]	; (8000840 <CAN1_Rx+0x60>)
 80007ec:	f000 fea8 	bl	8001540 <HAL_CAN_GetRxFifoFillLevel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0f8      	beq.n	80007e8 <CAN1_Rx+0x8>

	if(HAL_CAN_GetRxMessage(&hcan1,CAN_RX_FIFO0,&RxHeader,rcvd_msg) != HAL_OK)
 80007f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007fa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80007fe:	2100      	movs	r1, #0
 8000800:	480f      	ldr	r0, [pc, #60]	; (8000840 <CAN1_Rx+0x60>)
 8000802:	f000 fd7b 	bl	80012fc <HAL_CAN_GetRxMessage>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <CAN1_Rx+0x30>
	{
		Error_handler();
 800080c:	f000 f88e 	bl	800092c <Error_handler>
	}

	sprintf(msg,"Message Received : %s\r\n",rcvd_msg);
 8000810:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000814:	463b      	mov	r3, r7
 8000816:	490b      	ldr	r1, [pc, #44]	; (8000844 <CAN1_Rx+0x64>)
 8000818:	4618      	mov	r0, r3
 800081a:	f004 fc8b 	bl	8005134 <siprintf>

	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 800081e:	463b      	mov	r3, r7
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fcd5 	bl	80001d0 <strlen>
 8000826:	4603      	mov	r3, r0
 8000828:	b29a      	uxth	r2, r3
 800082a:	4639      	mov	r1, r7
 800082c:	f04f 33ff 	mov.w	r3, #4294967295
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <CAN1_Rx+0x68>)
 8000832:	f003 fbc1 	bl	8003fb8 <HAL_UART_Transmit>


}
 8000836:	bf00      	nop
 8000838:	3758      	adds	r7, #88	; 0x58
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	200000c0 	.word	0x200000c0
 8000844:	0800594c 	.word	0x0800594c
 8000848:	20000078 	.word	0x20000078

0800084c <CAN_Filter_Config>:

void CAN_Filter_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;

	can1_filter_init.FilterActivation = ENABLE;
 8000852:	2301      	movs	r3, #1
 8000854:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank  = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x0000;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8000872:	2301      	movs	r3, #1
 8000874:	61fb      	str	r3, [r7, #28]

	if( HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	; (8000894 <CAN_Filter_Config+0x48>)
 800087c:	f000 fb26 	bl	8000ecc <HAL_CAN_ConfigFilter>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <CAN_Filter_Config+0x3e>
	{
		Error_handler();
 8000886:	f000 f851 	bl	800092c <Error_handler>
	}

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	; 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000c0 	.word	0x200000c0

08000898 <GPIO_Init>:



void GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <GPIO_Init+0x40>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <GPIO_Init+0x40>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <GPIO_Init+0x40>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
 80008ba:	2320      	movs	r3, #32
 80008bc:	607b      	str	r3, [r7, #4]
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	60bb      	str	r3, [r7, #8]
	ledgpio.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA,&ledgpio);
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	4804      	ldr	r0, [pc, #16]	; (80008dc <GPIO_Init+0x44>)
 80008cc:	f000 ff62 	bl	8001794 <HAL_GPIO_Init>
}
 80008d0:	bf00      	nop
 80008d2:	3718      	adds	r7, #24
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020000 	.word	0x40020000

080008e0 <UART2_Init>:



void UART2_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <UART2_Init+0x44>)
 80008e6:	4a10      	ldr	r2, [pc, #64]	; (8000928 <UART2_Init+0x48>)
 80008e8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <UART2_Init+0x44>)
 80008ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008f2:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <UART2_Init+0x44>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80008f8:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <UART2_Init+0x44>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80008fe:	4b09      	ldr	r3, [pc, #36]	; (8000924 <UART2_Init+0x44>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <UART2_Init+0x44>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <UART2_Init+0x44>)
 800090c:	220c      	movs	r2, #12
 800090e:	615a      	str	r2, [r3, #20]
	if ( HAL_UART_Init(&huart2) != HAL_OK )
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <UART2_Init+0x44>)
 8000912:	f003 fb01 	bl	8003f18 <HAL_UART_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <UART2_Init+0x40>
	{
		//There is a problem
		Error_handler();
 800091c:	f000 f806 	bl	800092c <Error_handler>
	}


}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000078 	.word	0x20000078
 8000928:	40004400 	.word	0x40004400

0800092c <Error_handler>:
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);

}


void Error_handler(void){
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
	while(1);
 8000930:	e7fe      	b.n	8000930 <Error_handler+0x4>
	...

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	607b      	str	r3, [r7, #4]
 800093e:	4b10      	ldr	r3, [pc, #64]	; (8000980 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <HAL_MspInit+0x4c>)
 8000944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000948:	6453      	str	r3, [r2, #68]	; 0x44
 800094a:	4b0d      	ldr	r3, [pc, #52]	; (8000980 <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_MspInit+0x4c>)
 8000960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000972:	2007      	movs	r0, #7
 8000974:	f000 febe 	bl	80016f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40023800 	.word	0x40023800

08000984 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a19      	ldr	r2, [pc, #100]	; (8000a08 <HAL_CAN_MspInit+0x84>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d12b      	bne.n	80009fe <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_CAN_MspInit+0x88>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ae:	4a17      	ldr	r2, [pc, #92]	; (8000a0c <HAL_CAN_MspInit+0x88>)
 80009b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009b4:	6413      	str	r3, [r2, #64]	; 0x40
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_CAN_MspInit+0x88>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_CAN_MspInit+0x88>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a10      	ldr	r2, [pc, #64]	; (8000a0c <HAL_CAN_MspInit+0x88>)
 80009cc:	f043 0308 	orr.w	r3, r3, #8
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <HAL_CAN_MspInit+0x88>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0308 	and.w	r3, r3, #8
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009de:	2303      	movs	r3, #3
 80009e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ea:	2303      	movs	r3, #3
 80009ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009ee:	2309      	movs	r3, #9
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <HAL_CAN_MspInit+0x8c>)
 80009fa:	f000 fecb 	bl	8001794 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40006400 	.word	0x40006400
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020c00 	.word	0x40020c00

08000a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <HAL_UART_MspInit+0x84>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d12b      	bne.n	8000a8e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3e:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a44:	6413      	str	r3, [r2, #64]	; 0x40
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	4a10      	ldr	r2, [pc, #64]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6313      	str	r3, [r2, #48]	; 0x30
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <HAL_UART_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a6e:	230c      	movs	r3, #12
 8000a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <HAL_UART_MspInit+0x8c>)
 8000a8a:	f000 fe83 	bl	8001794 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a8e:	bf00      	nop
 8000a90:	3728      	adds	r7, #40	; 0x28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40004400 	.word	0x40004400
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020000 	.word	0x40020000

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <NMI_Handler+0x4>

08000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aba:	e7fe      	b.n	8000aba <BusFault_Handler+0x4>

08000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <UsageFault_Handler+0x4>

08000ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 f8d0 	bl	8000c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <OTG_FS_IRQHandler+0x10>)
 8000afe:	f000 ffe5 	bl	8001acc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	200000f0 	.word	0x200000f0

08000b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b14:	4a14      	ldr	r2, [pc, #80]	; (8000b68 <_sbrk+0x5c>)
 8000b16:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <_sbrk+0x60>)
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b20:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <_sbrk+0x64>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <_sbrk+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d207      	bcs.n	8000b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b3c:	f004 fb2a 	bl	8005194 <__errno>
 8000b40:	4603      	mov	r3, r0
 8000b42:	220c      	movs	r2, #12
 8000b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	e009      	b.n	8000b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	4a05      	ldr	r2, [pc, #20]	; (8000b70 <_sbrk+0x64>)
 8000b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20020000 	.word	0x20020000
 8000b6c:	00000400 	.word	0x00000400
 8000b70:	200000e8 	.word	0x200000e8
 8000b74:	20000618 	.word	0x20000618

08000b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ba0:	f7ff ffea 	bl	8000b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba4:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ba6:	490d      	ldr	r1, [pc, #52]	; (8000bdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	; (8000be0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bbc:	4c0a      	ldr	r4, [pc, #40]	; (8000be8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bca:	f004 fae9 	bl	80051a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bce:	f7ff fcd5 	bl	800057c <main>
  bx  lr    
 8000bd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000be0:	08005a2c 	.word	0x08005a2c
  ldr r2, =_sbss
 8000be4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000be8:	20000618 	.word	0x20000618

08000bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC_IRQHandler>
	...

08000bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <HAL_Init+0x40>)
 8000bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <HAL_Init+0x40>)
 8000c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_Init+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <HAL_Init+0x40>)
 8000c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 fd6b 	bl	80016f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 f808 	bl	8000c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c24:	f7ff fe86 	bl	8000934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023c00 	.word	0x40023c00

08000c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_InitTick+0x54>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x58>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4619      	mov	r1, r3
 8000c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 fd75 	bl	8001742 <HAL_SYSTICK_Config>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00e      	b.n	8000c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b0f      	cmp	r3, #15
 8000c66:	d80a      	bhi.n	8000c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c70:	f000 fd4b 	bl	800170a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c74:	4a06      	ldr	r2, [pc, #24]	; (8000c90 <HAL_InitTick+0x5c>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e000      	b.n	8000c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	20000004 	.word	0x20000004

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	200000ec 	.word	0x200000ec

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	200000ec 	.word	0x200000ec

08000cd4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d101      	bne.n	8000ce6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e0ed      	b.n	8000ec2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d102      	bne.n	8000cf8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff fe46 	bl	8000984 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f042 0201 	orr.w	r2, r2, #1
 8000d06:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d08:	f7ff ffd8 	bl	8000cbc <HAL_GetTick>
 8000d0c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d0e:	e012      	b.n	8000d36 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d10:	f7ff ffd4 	bl	8000cbc <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b0a      	cmp	r3, #10
 8000d1c:	d90b      	bls.n	8000d36 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d22:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2205      	movs	r2, #5
 8000d2e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e0c5      	b.n	8000ec2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0e5      	beq.n	8000d10 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f022 0202 	bic.w	r2, r2, #2
 8000d52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d54:	f7ff ffb2 	bl	8000cbc <HAL_GetTick>
 8000d58:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d5a:	e012      	b.n	8000d82 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d5c:	f7ff ffae 	bl	8000cbc <HAL_GetTick>
 8000d60:	4602      	mov	r2, r0
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	1ad3      	subs	r3, r2, r3
 8000d66:	2b0a      	cmp	r3, #10
 8000d68:	d90b      	bls.n	8000d82 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2205      	movs	r2, #5
 8000d7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e09f      	b.n	8000ec2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d1e5      	bne.n	8000d5c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7e1b      	ldrb	r3, [r3, #24]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d108      	bne.n	8000daa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	e007      	b.n	8000dba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000db8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	7e5b      	ldrb	r3, [r3, #25]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d108      	bne.n	8000dd4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	e007      	b.n	8000de4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000de2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7e9b      	ldrb	r3, [r3, #26]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d108      	bne.n	8000dfe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f042 0220 	orr.w	r2, r2, #32
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	e007      	b.n	8000e0e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f022 0220 	bic.w	r2, r2, #32
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	7edb      	ldrb	r3, [r3, #27]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d108      	bne.n	8000e28 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 0210 	bic.w	r2, r2, #16
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	e007      	b.n	8000e38 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f042 0210 	orr.w	r2, r2, #16
 8000e36:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	7f1b      	ldrb	r3, [r3, #28]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d108      	bne.n	8000e52 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f042 0208 	orr.w	r2, r2, #8
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	e007      	b.n	8000e62 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f022 0208 	bic.w	r2, r2, #8
 8000e60:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	7f5b      	ldrb	r3, [r3, #29]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d108      	bne.n	8000e7c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f042 0204 	orr.w	r2, r2, #4
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	e007      	b.n	8000e8c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0204 	bic.w	r2, r2, #4
 8000e8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	431a      	orrs	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	695b      	ldr	r3, [r3, #20]
 8000ea0:	ea42 0103 	orr.w	r1, r2, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	1e5a      	subs	r2, r3, #1
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ee2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ee4:	7cfb      	ldrb	r3, [r7, #19]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d003      	beq.n	8000ef2 <HAL_CAN_ConfigFilter+0x26>
 8000eea:	7cfb      	ldrb	r3, [r7, #19]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	f040 80be 	bne.w	800106e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000ef2:	4b65      	ldr	r3, [pc, #404]	; (8001088 <HAL_CAN_ConfigFilter+0x1bc>)
 8000ef4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000efc:	f043 0201 	orr.w	r2, r3, #1
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f0c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f20:	021b      	lsls	r3, r3, #8
 8000f22:	431a      	orrs	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f003 031f 	and.w	r3, r3, #31
 8000f32:	2201      	movs	r2, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	401a      	ands	r2, r3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	69db      	ldr	r3, [r3, #28]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d123      	bne.n	8000f9c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f72:	683a      	ldr	r2, [r7, #0]
 8000f74:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f76:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3248      	adds	r2, #72	; 0x48
 8000f7c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f90:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f92:	6979      	ldr	r1, [r7, #20]
 8000f94:	3348      	adds	r3, #72	; 0x48
 8000f96:	00db      	lsls	r3, r3, #3
 8000f98:	440b      	add	r3, r1
 8000f9a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d122      	bne.n	8000fea <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fc4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	3248      	adds	r2, #72	; 0x48
 8000fca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fde:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fe0:	6979      	ldr	r1, [r7, #20]
 8000fe2:	3348      	adds	r3, #72	; 0x48
 8000fe4:	00db      	lsls	r3, r3, #3
 8000fe6:	440b      	add	r3, r1
 8000fe8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d109      	bne.n	8001006 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	401a      	ands	r2, r3
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001004:	e007      	b.n	8001016 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	431a      	orrs	r2, r3
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d109      	bne.n	8001032 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	43db      	mvns	r3, r3
 8001028:	401a      	ands	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001030:	e007      	b.n	8001042 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	431a      	orrs	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	2b01      	cmp	r3, #1
 8001048:	d107      	bne.n	800105a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	431a      	orrs	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001060:	f023 0201 	bic.w	r2, r3, #1
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e006      	b.n	800107c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001072:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
  }
}
 800107c:	4618      	mov	r0, r3
 800107e:	371c      	adds	r7, #28
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	40006400 	.word	0x40006400

0800108c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 3020 	ldrb.w	r3, [r3, #32]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	2b01      	cmp	r3, #1
 800109e:	d12e      	bne.n	80010fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2202      	movs	r2, #2
 80010a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0201 	bic.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010b8:	f7ff fe00 	bl	8000cbc <HAL_GetTick>
 80010bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010be:	e012      	b.n	80010e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010c0:	f7ff fdfc 	bl	8000cbc <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b0a      	cmp	r3, #10
 80010cc:	d90b      	bls.n	80010e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2205      	movs	r2, #5
 80010de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e012      	b.n	800110c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1e5      	bne.n	80010c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	e006      	b.n	800110c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
  }
}
 800110c:	4618      	mov	r0, r3
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001128:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001132:	7ffb      	ldrb	r3, [r7, #31]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d003      	beq.n	8001140 <HAL_CAN_AddTxMessage+0x2c>
 8001138:	7ffb      	ldrb	r3, [r7, #31]
 800113a:	2b02      	cmp	r3, #2
 800113c:	f040 80ad 	bne.w	800129a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10a      	bne.n	8001160 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001150:	2b00      	cmp	r3, #0
 8001152:	d105      	bne.n	8001160 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800115a:	2b00      	cmp	r3, #0
 800115c:	f000 8095 	beq.w	800128a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	0e1b      	lsrs	r3, r3, #24
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800116a:	2201      	movs	r2, #1
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10d      	bne.n	8001198 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001186:	68f9      	ldr	r1, [r7, #12]
 8001188:	6809      	ldr	r1, [r1, #0]
 800118a:	431a      	orrs	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	3318      	adds	r3, #24
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	440b      	add	r3, r1
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e00f      	b.n	80011b8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011a2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011a8:	68f9      	ldr	r1, [r7, #12]
 80011aa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80011ac:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3318      	adds	r3, #24
 80011b2:	011b      	lsls	r3, r3, #4
 80011b4:	440b      	add	r3, r1
 80011b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6819      	ldr	r1, [r3, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	3318      	adds	r3, #24
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	440b      	add	r3, r1
 80011c8:	3304      	adds	r3, #4
 80011ca:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	7d1b      	ldrb	r3, [r3, #20]
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d111      	bne.n	80011f8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	3318      	adds	r3, #24
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	4413      	add	r3, r2
 80011e0:	3304      	adds	r3, #4
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	6811      	ldr	r1, [r2, #0]
 80011e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	3318      	adds	r3, #24
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	440b      	add	r3, r1
 80011f4:	3304      	adds	r3, #4
 80011f6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3307      	adds	r3, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	061a      	lsls	r2, r3, #24
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3306      	adds	r3, #6
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	041b      	lsls	r3, r3, #16
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3305      	adds	r3, #5
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	4313      	orrs	r3, r2
 8001214:	687a      	ldr	r2, [r7, #4]
 8001216:	3204      	adds	r2, #4
 8001218:	7812      	ldrb	r2, [r2, #0]
 800121a:	4610      	mov	r0, r2
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	6811      	ldr	r1, [r2, #0]
 8001220:	ea43 0200 	orr.w	r2, r3, r0
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	440b      	add	r3, r1
 800122a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800122e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3303      	adds	r3, #3
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	061a      	lsls	r2, r3, #24
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3302      	adds	r3, #2
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	041b      	lsls	r3, r3, #16
 8001240:	431a      	orrs	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3301      	adds	r3, #1
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	4313      	orrs	r3, r2
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	7812      	ldrb	r2, [r2, #0]
 8001250:	4610      	mov	r0, r2
 8001252:	68fa      	ldr	r2, [r7, #12]
 8001254:	6811      	ldr	r1, [r2, #0]
 8001256:	ea43 0200 	orr.w	r2, r3, r0
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	440b      	add	r3, r1
 8001260:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001264:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	3318      	adds	r3, #24
 800126e:	011b      	lsls	r3, r3, #4
 8001270:	4413      	add	r3, r2
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	6811      	ldr	r1, [r2, #0]
 8001278:	f043 0201 	orr.w	r2, r3, #1
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	3318      	adds	r3, #24
 8001280:	011b      	lsls	r3, r3, #4
 8001282:	440b      	add	r3, r1
 8001284:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	e00e      	b.n	80012a8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e006      	b.n	80012a8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
  }
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3724      	adds	r7, #36	; 0x24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012c8:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 80012ca:	7afb      	ldrb	r3, [r7, #11]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d002      	beq.n	80012d6 <HAL_CAN_IsTxMessagePending+0x22>
 80012d0:	7afb      	ldrb	r3, [r7, #11]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d10b      	bne.n	80012ee <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	069b      	lsls	r3, r3, #26
 80012e0:	401a      	ands	r2, r3
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	069b      	lsls	r3, r3, #26
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d001      	beq.n	80012ee <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80012ea:	2301      	movs	r3, #1
 80012ec:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80012fc:	b480      	push	{r7}
 80012fe:	b087      	sub	sp, #28
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001310:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001312:	7dfb      	ldrb	r3, [r7, #23]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d003      	beq.n	8001320 <HAL_CAN_GetRxMessage+0x24>
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	2b02      	cmp	r3, #2
 800131c:	f040 8103 	bne.w	8001526 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d10e      	bne.n	8001344 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d116      	bne.n	8001362 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e0f7      	b.n	8001534 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b00      	cmp	r3, #0
 8001350:	d107      	bne.n	8001362 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e0e8      	b.n	8001534 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	331b      	adds	r3, #27
 800136a:	011b      	lsls	r3, r3, #4
 800136c:	4413      	add	r3, r2
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 0204 	and.w	r2, r3, #4
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d10c      	bne.n	800139a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	331b      	adds	r3, #27
 8001388:	011b      	lsls	r3, r3, #4
 800138a:	4413      	add	r3, r2
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	0d5b      	lsrs	r3, r3, #21
 8001390:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	e00b      	b.n	80013b2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	331b      	adds	r3, #27
 80013a2:	011b      	lsls	r3, r3, #4
 80013a4:	4413      	add	r3, r2
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	08db      	lsrs	r3, r3, #3
 80013aa:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	331b      	adds	r3, #27
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	4413      	add	r3, r2
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0202 	and.w	r2, r3, #2
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	331b      	adds	r3, #27
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	4413      	add	r3, r2
 80013d4:	3304      	adds	r3, #4
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0308 	and.w	r3, r3, #8
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2208      	movs	r2, #8
 80013e4:	611a      	str	r2, [r3, #16]
 80013e6:	e00b      	b.n	8001400 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	331b      	adds	r3, #27
 80013f0:	011b      	lsls	r3, r3, #4
 80013f2:	4413      	add	r3, r2
 80013f4:	3304      	adds	r3, #4
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 020f 	and.w	r2, r3, #15
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	331b      	adds	r3, #27
 8001408:	011b      	lsls	r3, r3, #4
 800140a:	4413      	add	r3, r2
 800140c:	3304      	adds	r3, #4
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	0a1b      	lsrs	r3, r3, #8
 8001412:	b2da      	uxtb	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	331b      	adds	r3, #27
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	4413      	add	r3, r2
 8001424:	3304      	adds	r3, #4
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	0c1b      	lsrs	r3, r3, #16
 800142a:	b29a      	uxth	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	4413      	add	r3, r2
 800143a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	4413      	add	r3, r2
 8001450:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	0a1a      	lsrs	r2, r3, #8
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	4413      	add	r3, r2
 800146a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	0c1a      	lsrs	r2, r3, #16
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	3302      	adds	r3, #2
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	4413      	add	r3, r2
 8001484:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	0e1a      	lsrs	r2, r3, #24
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	3303      	adds	r3, #3
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	4413      	add	r3, r2
 800149e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	3304      	adds	r3, #4
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	011b      	lsls	r3, r3, #4
 80014b4:	4413      	add	r3, r2
 80014b6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	0a1a      	lsrs	r2, r3, #8
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	3305      	adds	r3, #5
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	4413      	add	r3, r2
 80014d0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	0c1a      	lsrs	r2, r3, #16
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	3306      	adds	r3, #6
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	4413      	add	r3, r2
 80014ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	0e1a      	lsrs	r2, r3, #24
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	3307      	adds	r3, #7
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d108      	bne.n	8001512 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0220 	orr.w	r2, r2, #32
 800150e:	60da      	str	r2, [r3, #12]
 8001510:	e007      	b.n	8001522 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	691a      	ldr	r2, [r3, #16]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f042 0220 	orr.w	r2, r2, #32
 8001520:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e006      	b.n	8001534 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
  }
}
 8001534:	4618      	mov	r0, r3
 8001536:	371c      	adds	r7, #28
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001554:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001556:	7afb      	ldrb	r3, [r7, #11]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d002      	beq.n	8001562 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800155c:	7afb      	ldrb	r3, [r7, #11]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d10f      	bne.n	8001582 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d106      	bne.n	8001576 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	e005      	b.n	8001582 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001582:	68fb      	ldr	r3, [r7, #12]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	60d3      	str	r3, [r2, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <__NVIC_GetPriorityGrouping+0x18>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	f003 0307 	and.w	r3, r3, #7
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	6039      	str	r1, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	2b00      	cmp	r3, #0
 8001606:	db0a      	blt.n	800161e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	490c      	ldr	r1, [pc, #48]	; (8001640 <__NVIC_SetPriority+0x4c>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	0112      	lsls	r2, r2, #4
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	440b      	add	r3, r1
 8001618:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800161c:	e00a      	b.n	8001634 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <__NVIC_SetPriority+0x50>)
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	f003 030f 	and.w	r3, r3, #15
 800162a:	3b04      	subs	r3, #4
 800162c:	0112      	lsls	r2, r2, #4
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	440b      	add	r3, r1
 8001632:	761a      	strb	r2, [r3, #24]
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000e100 	.word	0xe000e100
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0307 	and.w	r3, r3, #7
 800165a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f1c3 0307 	rsb	r3, r3, #7
 8001662:	2b04      	cmp	r3, #4
 8001664:	bf28      	it	cs
 8001666:	2304      	movcs	r3, #4
 8001668:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3304      	adds	r3, #4
 800166e:	2b06      	cmp	r3, #6
 8001670:	d902      	bls.n	8001678 <NVIC_EncodePriority+0x30>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3b03      	subs	r3, #3
 8001676:	e000      	b.n	800167a <NVIC_EncodePriority+0x32>
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800167c:	f04f 32ff 	mov.w	r2, #4294967295
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	401a      	ands	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001690:	f04f 31ff 	mov.w	r1, #4294967295
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	fa01 f303 	lsl.w	r3, r1, r3
 800169a:	43d9      	mvns	r1, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	4313      	orrs	r3, r2
         );
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3724      	adds	r7, #36	; 0x24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c0:	d301      	bcc.n	80016c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00f      	b.n	80016e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <SysTick_Config+0x40>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ce:	210f      	movs	r1, #15
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f7ff ff8e 	bl	80015f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <SysTick_Config+0x40>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <SysTick_Config+0x40>)
 80016e0:	2207      	movs	r2, #7
 80016e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	e000e010 	.word	0xe000e010

080016f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff47 	bl	8001590 <__NVIC_SetPriorityGrouping>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800171c:	f7ff ff5c 	bl	80015d8 <__NVIC_GetPriorityGrouping>
 8001720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	f7ff ff8e 	bl	8001648 <NVIC_EncodePriority>
 800172c:	4602      	mov	r2, r0
 800172e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff5d 	bl	80015f4 <__NVIC_SetPriority>
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ffb0 	bl	80016b0 <SysTick_Config>
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b04      	cmp	r3, #4
 8001768:	d106      	bne.n	8001778 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8001776:	e005      	b.n	8001784 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a04      	ldr	r2, [pc, #16]	; (8001790 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800177e:	f023 0304 	bic.w	r3, r3, #4
 8001782:	6013      	str	r3, [r2, #0]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000e010 	.word	0xe000e010

08001794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	e16b      	b.n	8001a88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017b0:	2201      	movs	r2, #1
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f040 815a 	bne.w	8001a82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 0303 	and.w	r3, r3, #3
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d005      	beq.n	80017e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d130      	bne.n	8001848 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	2203      	movs	r2, #3
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	68da      	ldr	r2, [r3, #12]
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4313      	orrs	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800181c:	2201      	movs	r2, #1
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	091b      	lsrs	r3, r3, #4
 8001832:	f003 0201 	and.w	r2, r3, #1
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b03      	cmp	r3, #3
 8001852:	d017      	beq.n	8001884 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	2203      	movs	r2, #3
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d123      	bne.n	80018d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	08da      	lsrs	r2, r3, #3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3208      	adds	r2, #8
 8001898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	220f      	movs	r2, #15
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	691a      	ldr	r2, [r3, #16]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	08da      	lsrs	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3208      	adds	r2, #8
 80018d2:	69b9      	ldr	r1, [r7, #24]
 80018d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f003 0203 	and.w	r2, r3, #3
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 80b4 	beq.w	8001a82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	4b60      	ldr	r3, [pc, #384]	; (8001aa0 <HAL_GPIO_Init+0x30c>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	4a5f      	ldr	r2, [pc, #380]	; (8001aa0 <HAL_GPIO_Init+0x30c>)
 8001924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001928:	6453      	str	r3, [r2, #68]	; 0x44
 800192a:	4b5d      	ldr	r3, [pc, #372]	; (8001aa0 <HAL_GPIO_Init+0x30c>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001936:	4a5b      	ldr	r2, [pc, #364]	; (8001aa4 <HAL_GPIO_Init+0x310>)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	089b      	lsrs	r3, r3, #2
 800193c:	3302      	adds	r3, #2
 800193e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	220f      	movs	r2, #15
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a52      	ldr	r2, [pc, #328]	; (8001aa8 <HAL_GPIO_Init+0x314>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d02b      	beq.n	80019ba <HAL_GPIO_Init+0x226>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a51      	ldr	r2, [pc, #324]	; (8001aac <HAL_GPIO_Init+0x318>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d025      	beq.n	80019b6 <HAL_GPIO_Init+0x222>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a50      	ldr	r2, [pc, #320]	; (8001ab0 <HAL_GPIO_Init+0x31c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d01f      	beq.n	80019b2 <HAL_GPIO_Init+0x21e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4f      	ldr	r2, [pc, #316]	; (8001ab4 <HAL_GPIO_Init+0x320>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d019      	beq.n	80019ae <HAL_GPIO_Init+0x21a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a4e      	ldr	r2, [pc, #312]	; (8001ab8 <HAL_GPIO_Init+0x324>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d013      	beq.n	80019aa <HAL_GPIO_Init+0x216>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a4d      	ldr	r2, [pc, #308]	; (8001abc <HAL_GPIO_Init+0x328>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d00d      	beq.n	80019a6 <HAL_GPIO_Init+0x212>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4c      	ldr	r2, [pc, #304]	; (8001ac0 <HAL_GPIO_Init+0x32c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d007      	beq.n	80019a2 <HAL_GPIO_Init+0x20e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a4b      	ldr	r2, [pc, #300]	; (8001ac4 <HAL_GPIO_Init+0x330>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d101      	bne.n	800199e <HAL_GPIO_Init+0x20a>
 800199a:	2307      	movs	r3, #7
 800199c:	e00e      	b.n	80019bc <HAL_GPIO_Init+0x228>
 800199e:	2308      	movs	r3, #8
 80019a0:	e00c      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019a2:	2306      	movs	r3, #6
 80019a4:	e00a      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019a6:	2305      	movs	r3, #5
 80019a8:	e008      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019aa:	2304      	movs	r3, #4
 80019ac:	e006      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019ae:	2303      	movs	r3, #3
 80019b0:	e004      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019b2:	2302      	movs	r3, #2
 80019b4:	e002      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019b6:	2301      	movs	r3, #1
 80019b8:	e000      	b.n	80019bc <HAL_GPIO_Init+0x228>
 80019ba:	2300      	movs	r3, #0
 80019bc:	69fa      	ldr	r2, [r7, #28]
 80019be:	f002 0203 	and.w	r2, r2, #3
 80019c2:	0092      	lsls	r2, r2, #2
 80019c4:	4093      	lsls	r3, r2
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019cc:	4935      	ldr	r1, [pc, #212]	; (8001aa4 <HAL_GPIO_Init+0x310>)
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	089b      	lsrs	r3, r3, #2
 80019d2:	3302      	adds	r3, #2
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019da:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <HAL_GPIO_Init+0x334>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019fe:	4a32      	ldr	r2, [pc, #200]	; (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a04:	4b30      	ldr	r3, [pc, #192]	; (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a28:	4a27      	ldr	r2, [pc, #156]	; (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a2e:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a52:	4a1d      	ldr	r2, [pc, #116]	; (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d003      	beq.n	8001a7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a7c:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <HAL_GPIO_Init+0x334>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3301      	adds	r3, #1
 8001a86:	61fb      	str	r3, [r7, #28]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	2b0f      	cmp	r3, #15
 8001a8c:	f67f ae90 	bls.w	80017b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40013800 	.word	0x40013800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40020400 	.word	0x40020400
 8001ab0:	40020800 	.word	0x40020800
 8001ab4:	40020c00 	.word	0x40020c00
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40021400 	.word	0x40021400
 8001ac0:	40021800 	.word	0x40021800
 8001ac4:	40021c00 	.word	0x40021c00
 8001ac8:	40013c00 	.word	0x40013c00

08001acc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f002 ff32 	bl	800494c <USB_GetMode>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	f040 80fb 	bne.w	8001ce6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f002 fef5 	bl	80048e4 <USB_ReadInterrupts>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80f1 	beq.w	8001ce4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 feec 	bl	80048e4 <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b16:	d104      	bne.n	8001b22 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f002 fedc 	bl	80048e4 <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b36:	d104      	bne.n	8001b42 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f002 fecc 	bl	80048e4 <USB_ReadInterrupts>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b56:	d104      	bne.n	8001b62 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f002 febc 	bl	80048e4 <USB_ReadInterrupts>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d103      	bne.n	8001b7e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f002 feae 	bl	80048e4 <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b92:	d120      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b9c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d113      	bne.n	8001bd6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bae:	2110      	movs	r1, #16
 8001bb0:	6938      	ldr	r0, [r7, #16]
 8001bb2:	f002 fddf 	bl	8004774 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bb6:	6938      	ldr	r0, [r7, #16]
 8001bb8:	f002 fe0e 	bl	80047d8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7a5b      	ldrb	r3, [r3, #9]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d105      	bne.n	8001bd0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f002 fecc 	bl	8004968 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f003 f984 	bl	8004ede <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f002 fe82 	bl	80048e4 <USB_ReadInterrupts>
 8001be0:	4603      	mov	r3, r0
 8001be2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001be6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bea:	d102      	bne.n	8001bf2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f001 fc87 	bl	8003500 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 fe74 	bl	80048e4 <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d106      	bne.n	8001c14 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f003 f94d 	bl	8004ea6 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2208      	movs	r2, #8
 8001c12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 fe63 	bl	80048e4 <USB_ReadInterrupts>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c28:	d139      	bne.n	8001c9e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f002 fed7 	bl	80049e2 <USB_HC_ReadInterrupt>
 8001c34:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	e025      	b.n	8001c88 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	fa22 f303 	lsr.w	r3, r2, r3
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d018      	beq.n	8001c82 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	015a      	lsls	r2, r3, #5
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c66:	d106      	bne.n	8001c76 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f859 	bl	8001d26 <HCD_HC_IN_IRQHandler>
 8001c74:	e005      	b.n	8001c82 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 febb 	bl	80029f8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3301      	adds	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	795b      	ldrb	r3, [r3, #5]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d3d3      	bcc.n	8001c3c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f002 fe1e 	bl	80048e4 <USB_ReadInterrupts>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	2b10      	cmp	r3, #16
 8001cb0:	d101      	bne.n	8001cb6 <HAL_HCD_IRQHandler+0x1ea>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_HCD_IRQHandler+0x1ec>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d014      	beq.n	8001ce6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699a      	ldr	r2, [r3, #24]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0210 	bic.w	r2, r2, #16
 8001cca:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f001 fb38 	bl	8003342 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699a      	ldr	r2, [r3, #24]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f042 0210 	orr.w	r2, r2, #16
 8001ce0:	619a      	str	r2, [r3, #24]
 8001ce2:	e000      	b.n	8001ce6 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001ce4:	bf00      	nop
    }
  }
}
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}

08001cec <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 33d4 	ldrb.w	r3, [r3, #980]	; 0x3d4
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d101      	bne.n	8001d02 <HAL_HCD_Stop+0x16>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e00d      	b.n	8001d1e <HAL_HCD_Stop+0x32>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f002 ff98 	bl	8004c44 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	78fa      	ldrb	r2, [r7, #3]
 8001d42:	4611      	mov	r1, r2
 8001d44:	4618      	mov	r0, r3
 8001d46:	f002 fde0 	bl	800490a <USB_ReadChInterrupts>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d11a      	bne.n	8001d8a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	015a      	lsls	r2, r3, #5
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d60:	461a      	mov	r2, r3
 8001d62:	2304      	movs	r3, #4
 8001d64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001d66:	78fa      	ldrb	r2, [r7, #3]
 8001d68:	6879      	ldr	r1, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	011b      	lsls	r3, r3, #4
 8001d6e:	1a9b      	subs	r3, r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	440b      	add	r3, r1
 8001d74:	334d      	adds	r3, #77	; 0x4d
 8001d76:	2207      	movs	r2, #7
 8001d78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	78fa      	ldrb	r2, [r7, #3]
 8001d80:	4611      	mov	r1, r2
 8001d82:	4618      	mov	r0, r3
 8001d84:	f002 fe3e 	bl	8004a04 <USB_HC_Halt>
 8001d88:	e09e      	b.n	8001ec8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	78fa      	ldrb	r2, [r7, #3]
 8001d90:	4611      	mov	r1, r2
 8001d92:	4618      	mov	r0, r3
 8001d94:	f002 fdb9 	bl	800490a <USB_ReadChInterrupts>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001da2:	d11b      	bne.n	8001ddc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	015a      	lsls	r2, r3, #5
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db0:	461a      	mov	r2, r3
 8001db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001db6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001db8:	78fa      	ldrb	r2, [r7, #3]
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	011b      	lsls	r3, r3, #4
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	334d      	adds	r3, #77	; 0x4d
 8001dc8:	2208      	movs	r2, #8
 8001dca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	78fa      	ldrb	r2, [r7, #3]
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f002 fe15 	bl	8004a04 <USB_HC_Halt>
 8001dda:	e075      	b.n	8001ec8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	78fa      	ldrb	r2, [r7, #3]
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f002 fd90 	bl	800490a <USB_ReadChInterrupts>
 8001dea:	4603      	mov	r3, r0
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d11a      	bne.n	8001e2a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001df4:	78fb      	ldrb	r3, [r7, #3]
 8001df6:	015a      	lsls	r2, r3, #5
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e00:	461a      	mov	r2, r3
 8001e02:	2308      	movs	r3, #8
 8001e04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001e06:	78fa      	ldrb	r2, [r7, #3]
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	011b      	lsls	r3, r3, #4
 8001e0e:	1a9b      	subs	r3, r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	334d      	adds	r3, #77	; 0x4d
 8001e16:	2206      	movs	r2, #6
 8001e18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	4611      	mov	r1, r2
 8001e22:	4618      	mov	r0, r3
 8001e24:	f002 fdee 	bl	8004a04 <USB_HC_Halt>
 8001e28:	e04e      	b.n	8001ec8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	78fa      	ldrb	r2, [r7, #3]
 8001e30:	4611      	mov	r1, r2
 8001e32:	4618      	mov	r0, r3
 8001e34:	f002 fd69 	bl	800490a <USB_ReadChInterrupts>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e42:	d11b      	bne.n	8001e7c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	015a      	lsls	r2, r3, #5
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e50:	461a      	mov	r2, r3
 8001e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001e58:	78fa      	ldrb	r2, [r7, #3]
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	011b      	lsls	r3, r3, #4
 8001e60:	1a9b      	subs	r3, r3, r2
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	334d      	adds	r3, #77	; 0x4d
 8001e68:	2209      	movs	r2, #9
 8001e6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f002 fdc5 	bl	8004a04 <USB_HC_Halt>
 8001e7a:	e025      	b.n	8001ec8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	78fa      	ldrb	r2, [r7, #3]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f002 fd40 	bl	800490a <USB_ReadChInterrupts>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e90:	2b80      	cmp	r3, #128	; 0x80
 8001e92:	d119      	bne.n	8001ec8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001e94:	78fb      	ldrb	r3, [r7, #3]
 8001e96:	015a      	lsls	r2, r3, #5
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	011b      	lsls	r3, r3, #4
 8001eae:	1a9b      	subs	r3, r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	440b      	add	r3, r1
 8001eb4:	334d      	adds	r3, #77	; 0x4d
 8001eb6:	2207      	movs	r2, #7
 8001eb8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f002 fd9e 	bl	8004a04 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f002 fd1a 	bl	800490a <USB_ReadChInterrupts>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ee0:	d112      	bne.n	8001f08 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	4611      	mov	r1, r2
 8001eea:	4618      	mov	r0, r3
 8001eec:	f002 fd8a 	bl	8004a04 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	015a      	lsls	r2, r3, #5
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efc:	461a      	mov	r2, r3
 8001efe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f02:	6093      	str	r3, [r2, #8]
 8001f04:	f000 bd75 	b.w	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	78fa      	ldrb	r2, [r7, #3]
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f002 fcfa 	bl	800490a <USB_ReadChInterrupts>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	f040 8128 	bne.w	8002172 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001f22:	78fb      	ldrb	r3, [r7, #3]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2e:	461a      	mov	r2, r3
 8001f30:	2320      	movs	r3, #32
 8001f32:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	331b      	adds	r3, #27
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d119      	bne.n	8001f7e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	331b      	adds	r3, #27
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	0151      	lsls	r1, r2, #5
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	440a      	add	r2, r1
 8001f74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f7c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	799b      	ldrb	r3, [r3, #6]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d01b      	beq.n	8001fbe <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	3330      	adds	r3, #48	; 0x30
 8001f96:	6819      	ldr	r1, [r3, #0]
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	015a      	lsls	r2, r3, #5
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001faa:	78fa      	ldrb	r2, [r7, #3]
 8001fac:	1ac9      	subs	r1, r1, r3
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	4403      	add	r3, r0
 8001fba:	3338      	adds	r3, #56	; 0x38
 8001fbc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001fbe:	78fa      	ldrb	r2, [r7, #3]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	011b      	lsls	r3, r3, #4
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	334d      	adds	r3, #77	; 0x4d
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001fd2:	78fa      	ldrb	r2, [r7, #3]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	1a9b      	subs	r3, r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	3344      	adds	r3, #68	; 0x44
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001fe6:	78fb      	ldrb	r3, [r7, #3]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	3326      	adds	r3, #38	; 0x26
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00a      	beq.n	8002024 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800200e:	78fa      	ldrb	r2, [r7, #3]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	011b      	lsls	r3, r3, #4
 8002016:	1a9b      	subs	r3, r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	3326      	adds	r3, #38	; 0x26
 800201e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002020:	2b02      	cmp	r3, #2
 8002022:	d110      	bne.n	8002046 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	78fa      	ldrb	r2, [r7, #3]
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f002 fce9 	bl	8004a04 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002032:	78fb      	ldrb	r3, [r7, #3]
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4413      	add	r3, r2
 800203a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800203e:	461a      	mov	r2, r3
 8002040:	2310      	movs	r3, #16
 8002042:	6093      	str	r3, [r2, #8]
 8002044:	e03d      	b.n	80020c2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002046:	78fa      	ldrb	r2, [r7, #3]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	3326      	adds	r3, #38	; 0x26
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b03      	cmp	r3, #3
 800205a:	d00a      	beq.n	8002072 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800205c:	78fa      	ldrb	r2, [r7, #3]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	3326      	adds	r3, #38	; 0x26
 800206c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800206e:	2b01      	cmp	r3, #1
 8002070:	d127      	bne.n	80020c2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	015a      	lsls	r2, r3, #5
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4413      	add	r3, r2
 800207a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	78fa      	ldrb	r2, [r7, #3]
 8002082:	0151      	lsls	r1, r2, #5
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	440a      	add	r2, r1
 8002088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800208c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002090:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002092:	78fa      	ldrb	r2, [r7, #3]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	334c      	adds	r3, #76	; 0x4c
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	334c      	adds	r3, #76	; 0x4c
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	4619      	mov	r1, r3
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f002 ff1c 	bl	8004efa <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	799b      	ldrb	r3, [r3, #6]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d13b      	bne.n	8002142 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80020ca:	78fa      	ldrb	r2, [r7, #3]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	3338      	adds	r3, #56	; 0x38
 80020da:	6819      	ldr	r1, [r3, #0]
 80020dc:	78fa      	ldrb	r2, [r7, #3]
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	1a9b      	subs	r3, r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4403      	add	r3, r0
 80020ea:	3328      	adds	r3, #40	; 0x28
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	440b      	add	r3, r1
 80020f0:	1e59      	subs	r1, r3, #1
 80020f2:	78fa      	ldrb	r2, [r7, #3]
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4403      	add	r3, r0
 8002100:	3328      	adds	r3, #40	; 0x28
 8002102:	881b      	ldrh	r3, [r3, #0]
 8002104:	fbb1 f3f3 	udiv	r3, r1, r3
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 8470 	beq.w	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002112:	78fa      	ldrb	r2, [r7, #3]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	1a9b      	subs	r3, r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	333c      	adds	r3, #60	; 0x3c
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	78fa      	ldrb	r2, [r7, #3]
 8002126:	f083 0301 	eor.w	r3, r3, #1
 800212a:	b2d8      	uxtb	r0, r3
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	333c      	adds	r3, #60	; 0x3c
 800213a:	4602      	mov	r2, r0
 800213c:	701a      	strb	r2, [r3, #0]
 800213e:	f000 bc58 	b.w	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002142:	78fa      	ldrb	r2, [r7, #3]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	333c      	adds	r3, #60	; 0x3c
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	f083 0301 	eor.w	r3, r3, #1
 800215a:	b2d8      	uxtb	r0, r3
 800215c:	6879      	ldr	r1, [r7, #4]
 800215e:	4613      	mov	r3, r2
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	1a9b      	subs	r3, r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	440b      	add	r3, r1
 8002168:	333c      	adds	r3, #60	; 0x3c
 800216a:	4602      	mov	r2, r0
 800216c:	701a      	strb	r2, [r3, #0]
 800216e:	f000 bc40 	b.w	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	78fa      	ldrb	r2, [r7, #3]
 8002178:	4611      	mov	r1, r2
 800217a:	4618      	mov	r0, r3
 800217c:	f002 fbc5 	bl	800490a <USB_ReadChInterrupts>
 8002180:	4603      	mov	r3, r0
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b20      	cmp	r3, #32
 8002188:	d131      	bne.n	80021ee <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800218a:	78fb      	ldrb	r3, [r7, #3]
 800218c:	015a      	lsls	r2, r3, #5
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4413      	add	r3, r2
 8002192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002196:	461a      	mov	r2, r3
 8002198:	2320      	movs	r3, #32
 800219a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800219c:	78fa      	ldrb	r2, [r7, #3]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	1a9b      	subs	r3, r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	331a      	adds	r3, #26
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	f040 841f 	bne.w	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	331b      	adds	r3, #27
 80021c4:	2201      	movs	r2, #1
 80021c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	334d      	adds	r3, #77	; 0x4d
 80021d8:	2203      	movs	r2, #3
 80021da:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	4611      	mov	r1, r2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f002 fc0d 	bl	8004a04 <USB_HC_Halt>
 80021ea:	f000 bc02 	b.w	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f002 fb87 	bl	800490a <USB_ReadChInterrupts>
 80021fc:	4603      	mov	r3, r0
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b02      	cmp	r3, #2
 8002204:	f040 8305 	bne.w	8002812 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	4413      	add	r3, r2
 8002210:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002214:	461a      	mov	r2, r3
 8002216:	2302      	movs	r3, #2
 8002218:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800221a:	78fa      	ldrb	r2, [r7, #3]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	334d      	adds	r3, #77	; 0x4d
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d114      	bne.n	800225a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	334d      	adds	r3, #77	; 0x4d
 8002240:	2202      	movs	r2, #2
 8002242:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	334c      	adds	r3, #76	; 0x4c
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]
 8002258:	e2cc      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800225a:	78fa      	ldrb	r2, [r7, #3]
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	334d      	adds	r3, #77	; 0x4d
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b06      	cmp	r3, #6
 800226e:	d114      	bne.n	800229a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	1a9b      	subs	r3, r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	334d      	adds	r3, #77	; 0x4d
 8002280:	2202      	movs	r2, #2
 8002282:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	1a9b      	subs	r3, r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	440b      	add	r3, r1
 8002292:	334c      	adds	r3, #76	; 0x4c
 8002294:	2205      	movs	r2, #5
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	e2ac      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	6879      	ldr	r1, [r7, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	1a9b      	subs	r3, r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	440b      	add	r3, r1
 80022a8:	334d      	adds	r3, #77	; 0x4d
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b07      	cmp	r3, #7
 80022ae:	d00b      	beq.n	80022c8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	334d      	adds	r3, #77	; 0x4d
 80022c0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80022c2:	2b09      	cmp	r3, #9
 80022c4:	f040 80a6 	bne.w	8002414 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	334d      	adds	r3, #77	; 0x4d
 80022d8:	2202      	movs	r2, #2
 80022da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	3344      	adds	r3, #68	; 0x44
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	1c59      	adds	r1, r3, #1
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4403      	add	r3, r0
 80022fc:	3344      	adds	r3, #68	; 0x44
 80022fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	3344      	adds	r3, #68	; 0x44
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d943      	bls.n	800239e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	6879      	ldr	r1, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	3344      	adds	r3, #68	; 0x44
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800232a:	78fa      	ldrb	r2, [r7, #3]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	440b      	add	r3, r1
 8002338:	331a      	adds	r3, #26
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d123      	bne.n	8002388 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002340:	78fa      	ldrb	r2, [r7, #3]
 8002342:	6879      	ldr	r1, [r7, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	011b      	lsls	r3, r3, #4
 8002348:	1a9b      	subs	r3, r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	440b      	add	r3, r1
 800234e:	331b      	adds	r3, #27
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	331c      	adds	r3, #28
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	015a      	lsls	r2, r3, #5
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4413      	add	r3, r2
 8002370:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	0151      	lsls	r1, r2, #5
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	440a      	add	r2, r1
 800237e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002386:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	334c      	adds	r3, #76	; 0x4c
 8002398:	2204      	movs	r2, #4
 800239a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800239c:	e229      	b.n	80027f2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800239e:	78fa      	ldrb	r2, [r7, #3]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	1a9b      	subs	r3, r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	334c      	adds	r3, #76	; 0x4c
 80023ae:	2202      	movs	r2, #2
 80023b0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023b2:	78fa      	ldrb	r2, [r7, #3]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	3326      	adds	r3, #38	; 0x26
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00b      	beq.n	80023e0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	3326      	adds	r3, #38	; 0x26
 80023d8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023da:	2b02      	cmp	r3, #2
 80023dc:	f040 8209 	bne.w	80027f2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023f6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023fe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002400:	78fb      	ldrb	r3, [r7, #3]
 8002402:	015a      	lsls	r2, r3, #5
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4413      	add	r3, r2
 8002408:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800240c:	461a      	mov	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002412:	e1ee      	b.n	80027f2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	334d      	adds	r3, #77	; 0x4d
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b05      	cmp	r3, #5
 8002428:	f040 80c8 	bne.w	80025bc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	1a9b      	subs	r3, r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	334d      	adds	r3, #77	; 0x4d
 800243c:	2202      	movs	r2, #2
 800243e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	331b      	adds	r3, #27
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b01      	cmp	r3, #1
 8002454:	f040 81ce 	bne.w	80027f4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4613      	mov	r3, r2
 800245e:	011b      	lsls	r3, r3, #4
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	3326      	adds	r3, #38	; 0x26
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d16b      	bne.n	8002546 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800246e:	78fa      	ldrb	r2, [r7, #3]
 8002470:	6879      	ldr	r1, [r7, #4]
 8002472:	4613      	mov	r3, r2
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	1a9b      	subs	r3, r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	3348      	adds	r3, #72	; 0x48
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	1c59      	adds	r1, r3, #1
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	4613      	mov	r3, r2
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	1a9b      	subs	r3, r3, r2
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4403      	add	r3, r0
 800248e:	3348      	adds	r3, #72	; 0x48
 8002490:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002492:	78fa      	ldrb	r2, [r7, #3]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	4613      	mov	r3, r2
 8002498:	011b      	lsls	r3, r3, #4
 800249a:	1a9b      	subs	r3, r3, r2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	440b      	add	r3, r1
 80024a0:	3348      	adds	r3, #72	; 0x48
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d943      	bls.n	8002530 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	6879      	ldr	r1, [r7, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	1a9b      	subs	r3, r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	3348      	adds	r3, #72	; 0x48
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80024bc:	78fa      	ldrb	r2, [r7, #3]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	1a9b      	subs	r3, r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	331b      	adds	r3, #27
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	3344      	adds	r3, #68	; 0x44
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d809      	bhi.n	80024fa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	331c      	adds	r3, #28
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80024fa:	78fb      	ldrb	r3, [r7, #3]
 80024fc:	015a      	lsls	r2, r3, #5
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4413      	add	r3, r2
 8002502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	0151      	lsls	r1, r2, #5
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	440a      	add	r2, r1
 8002510:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002518:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800251a:	78fa      	ldrb	r2, [r7, #3]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	1a9b      	subs	r3, r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	334c      	adds	r3, #76	; 0x4c
 800252a:	2204      	movs	r2, #4
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	e014      	b.n	800255a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	334c      	adds	r3, #76	; 0x4c
 8002540:	2202      	movs	r2, #2
 8002542:	701a      	strb	r2, [r3, #0]
 8002544:	e009      	b.n	800255a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002546:	78fa      	ldrb	r2, [r7, #3]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	334c      	adds	r3, #76	; 0x4c
 8002556:	2202      	movs	r2, #2
 8002558:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	6879      	ldr	r1, [r7, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	1a9b      	subs	r3, r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	3326      	adds	r3, #38	; 0x26
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00b      	beq.n	8002588 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	3326      	adds	r3, #38	; 0x26
 8002580:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002582:	2b02      	cmp	r3, #2
 8002584:	f040 8136 	bne.w	80027f4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	015a      	lsls	r2, r3, #5
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4413      	add	r3, r2
 8002590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800259e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80025a6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b4:	461a      	mov	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	e11b      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	334d      	adds	r3, #77	; 0x4d
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b03      	cmp	r3, #3
 80025d0:	f040 8081 	bne.w	80026d6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	334d      	adds	r3, #77	; 0x4d
 80025e4:	2202      	movs	r2, #2
 80025e6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80025e8:	78fa      	ldrb	r2, [r7, #3]
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	331b      	adds	r3, #27
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	f040 80fa 	bne.w	80027f4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	334c      	adds	r3, #76	; 0x4c
 8002610:	2202      	movs	r2, #2
 8002612:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4413      	add	r3, r2
 800261c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	0151      	lsls	r1, r2, #5
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	440a      	add	r2, r1
 800262a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800262e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002632:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	0151      	lsls	r1, r2, #5
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	440a      	add	r2, r1
 800264a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800264e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002652:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002654:	78fb      	ldrb	r3, [r7, #3]
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4413      	add	r3, r2
 800265c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	78fa      	ldrb	r2, [r7, #3]
 8002664:	0151      	lsls	r1, r2, #5
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	440a      	add	r2, r1
 800266a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800266e:	f023 0320 	bic.w	r3, r3, #32
 8002672:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	3326      	adds	r3, #38	; 0x26
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	3326      	adds	r3, #38	; 0x26
 800269a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800269c:	2b02      	cmp	r3, #2
 800269e:	f040 80a9 	bne.w	80027f4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026b8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026c0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026c2:	78fb      	ldrb	r3, [r7, #3]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	461a      	mov	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6013      	str	r3, [r2, #0]
 80026d4:	e08e      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	334d      	adds	r3, #77	; 0x4d
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d143      	bne.n	8002774 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	334d      	adds	r3, #77	; 0x4d
 80026fc:	2202      	movs	r2, #2
 80026fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	334c      	adds	r3, #76	; 0x4c
 8002710:	2202      	movs	r2, #2
 8002712:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	3326      	adds	r3, #38	; 0x26
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	3326      	adds	r3, #38	; 0x26
 800273a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800273c:	2b02      	cmp	r3, #2
 800273e:	d159      	bne.n	80027f4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	015a      	lsls	r2, r3, #5
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	4413      	add	r3, r2
 8002748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002756:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800275e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	461a      	mov	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	e03f      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	334d      	adds	r3, #77	; 0x4d
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b08      	cmp	r3, #8
 8002788:	d126      	bne.n	80027d8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	334d      	adds	r3, #77	; 0x4d
 800279a:	2202      	movs	r2, #2
 800279c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800279e:	78fa      	ldrb	r2, [r7, #3]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	011b      	lsls	r3, r3, #4
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	3344      	adds	r3, #68	; 0x44
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	1c59      	adds	r1, r3, #1
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	4403      	add	r3, r0
 80027be:	3344      	adds	r3, #68	; 0x44
 80027c0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	334c      	adds	r3, #76	; 0x4c
 80027d2:	2204      	movs	r2, #4
 80027d4:	701a      	strb	r2, [r3, #0]
 80027d6:	e00d      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	4613      	mov	r3, r2
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	334d      	adds	r3, #77	; 0x4d
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	f000 8100 	beq.w	80029f0 <HCD_HC_IN_IRQHandler+0xcca>
 80027f0:	e000      	b.n	80027f4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80027f2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80027f4:	78fa      	ldrb	r2, [r7, #3]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	334c      	adds	r3, #76	; 0x4c
 8002804:	781a      	ldrb	r2, [r3, #0]
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	4619      	mov	r1, r3
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f002 fb75 	bl	8004efa <HAL_HCD_HC_NotifyURBChange_Callback>
 8002810:	e0ef      	b.n	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f002 f875 	bl	800490a <USB_ReadChInterrupts>
 8002820:	4603      	mov	r3, r0
 8002822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002826:	2b40      	cmp	r3, #64	; 0x40
 8002828:	d12f      	bne.n	800288a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800282a:	78fb      	ldrb	r3, [r7, #3]
 800282c:	015a      	lsls	r2, r3, #5
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4413      	add	r3, r2
 8002832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002836:	461a      	mov	r2, r3
 8002838:	2340      	movs	r3, #64	; 0x40
 800283a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	334d      	adds	r3, #77	; 0x4d
 800284c:	2205      	movs	r2, #5
 800284e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002850:	78fa      	ldrb	r2, [r7, #3]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	331a      	adds	r3, #26
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d109      	bne.n	800287a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	3344      	adds	r3, #68	; 0x44
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	78fa      	ldrb	r2, [r7, #3]
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f002 f8be 	bl	8004a04 <USB_HC_Halt>
 8002888:	e0b3      	b.n	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	4611      	mov	r1, r2
 8002892:	4618      	mov	r0, r3
 8002894:	f002 f839 	bl	800490a <USB_ReadChInterrupts>
 8002898:	4603      	mov	r3, r0
 800289a:	f003 0310 	and.w	r3, r3, #16
 800289e:	2b10      	cmp	r3, #16
 80028a0:	f040 80a7 	bne.w	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80028a4:	78fa      	ldrb	r2, [r7, #3]
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	4613      	mov	r3, r2
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	1a9b      	subs	r3, r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	440b      	add	r3, r1
 80028b2:	3326      	adds	r3, #38	; 0x26
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d11b      	bne.n	80028f2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	3344      	adds	r3, #68	; 0x44
 80028ca:	2200      	movs	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	1a9b      	subs	r3, r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	440b      	add	r3, r1
 80028dc:	334d      	adds	r3, #77	; 0x4d
 80028de:	2204      	movs	r2, #4
 80028e0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f002 f88a 	bl	8004a04 <USB_HC_Halt>
 80028f0:	e03f      	b.n	8002972 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	3326      	adds	r3, #38	; 0x26
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	3326      	adds	r3, #38	; 0x26
 8002918:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800291a:	2b02      	cmp	r3, #2
 800291c:	d129      	bne.n	8002972 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	3344      	adds	r3, #68	; 0x44
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	799b      	ldrb	r3, [r3, #6]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HCD_HC_IN_IRQHandler+0xc2a>
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	1a9b      	subs	r3, r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	331b      	adds	r3, #27
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d110      	bne.n	8002972 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	334d      	adds	r3, #77	; 0x4d
 8002960:	2204      	movs	r2, #4
 8002962:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f002 f849 	bl	8004a04 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	331b      	adds	r3, #27
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d129      	bne.n	80029dc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	331b      	adds	r3, #27
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	015a      	lsls	r2, r3, #5
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4413      	add	r3, r2
 80029a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	78fa      	ldrb	r2, [r7, #3]
 80029ac:	0151      	lsls	r1, r2, #5
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	440a      	add	r2, r1
 80029b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ba:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	015a      	lsls	r2, r3, #5
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4413      	add	r3, r2
 80029c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	0151      	lsls	r1, r2, #5
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	440a      	add	r2, r1
 80029d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029d6:	f043 0320 	orr.w	r3, r3, #32
 80029da:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e8:	461a      	mov	r2, r3
 80029ea:	2310      	movs	r3, #16
 80029ec:	6093      	str	r3, [r2, #8]
 80029ee:	e000      	b.n	80029f2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80029f0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	4611      	mov	r1, r2
 8002a16:	4618      	mov	r0, r3
 8002a18:	f001 ff77 	bl	800490a <USB_ReadChInterrupts>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d11b      	bne.n	8002a5e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	015a      	lsls	r2, r3, #5
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a32:	461a      	mov	r2, r3
 8002a34:	2304      	movs	r3, #4
 8002a36:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	334d      	adds	r3, #77	; 0x4d
 8002a48:	2207      	movs	r2, #7
 8002a4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	4611      	mov	r1, r2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f001 ffd5 	bl	8004a04 <USB_HC_Halt>
 8002a5a:	f000 bc6f 	b.w	800333c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f001 ff4f 	bl	800490a <USB_ReadChInterrupts>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	f040 8082 	bne.w	8002b7c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	015a      	lsls	r2, r3, #5
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	4413      	add	r3, r2
 8002a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a84:	461a      	mov	r2, r3
 8002a86:	2320      	movs	r3, #32
 8002a88:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	3319      	adds	r3, #25
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d124      	bne.n	8002aea <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	3319      	adds	r3, #25
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	334c      	adds	r3, #76	; 0x4c
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	334d      	adds	r3, #77	; 0x4d
 8002ad8:	2203      	movs	r2, #3
 8002ada:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f001 ff8d 	bl	8004a04 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	1a9b      	subs	r3, r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	331a      	adds	r3, #26
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	f040 841d 	bne.w	800333c <HCD_HC_OUT_IRQHandler+0x944>
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	331b      	adds	r3, #27
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f040 8411 	bne.w	800333c <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	1a9b      	subs	r3, r3, r2
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	3326      	adds	r3, #38	; 0x26
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d009      	beq.n	8002b44 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	331b      	adds	r3, #27
 8002b40:	2201      	movs	r2, #1
 8002b42:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002b44:	78fa      	ldrb	r2, [r7, #3]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	334d      	adds	r3, #77	; 0x4d
 8002b54:	2203      	movs	r2, #3
 8002b56:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f001 ff4f 	bl	8004a04 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b66:	78fa      	ldrb	r2, [r7, #3]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	3344      	adds	r3, #68	; 0x44
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	e3df      	b.n	800333c <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f001 fec0 	bl	800490a <USB_ReadChInterrupts>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b94:	d111      	bne.n	8002bba <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ba8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 ff26 	bl	8004a04 <USB_HC_Halt>
 8002bb8:	e3c0      	b.n	800333c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 fea1 	bl	800490a <USB_ReadChInterrupts>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d168      	bne.n	8002ca4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	1a9b      	subs	r3, r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	3344      	adds	r3, #68	; 0x44
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	78fa      	ldrb	r2, [r7, #3]
 8002bec:	4611      	mov	r1, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f001 fe8b 	bl	800490a <USB_ReadChInterrupts>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b40      	cmp	r3, #64	; 0x40
 8002bfc:	d112      	bne.n	8002c24 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	3319      	adds	r3, #25
 8002c0e:	2201      	movs	r2, #1
 8002c10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2340      	movs	r3, #64	; 0x40
 8002c22:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	331b      	adds	r3, #27
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d019      	beq.n	8002c6e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	331b      	adds	r3, #27
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c4e:	78fb      	ldrb	r3, [r7, #3]
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	0151      	lsls	r1, r2, #5
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	440a      	add	r2, r1
 8002c64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c6c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	334d      	adds	r3, #77	; 0x4d
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f001 feb1 	bl	8004a04 <USB_HC_Halt>
 8002ca2:	e34b      	b.n	800333c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f001 fe2c 	bl	800490a <USB_ReadChInterrupts>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb8:	2b40      	cmp	r3, #64	; 0x40
 8002cba:	d139      	bne.n	8002d30 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	334d      	adds	r3, #77	; 0x4d
 8002ccc:	2205      	movs	r2, #5
 8002cce:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	331a      	adds	r3, #26
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d109      	bne.n	8002cfa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3319      	adds	r3, #25
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	3344      	adds	r3, #68	; 0x44
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 fe74 	bl	8004a04 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d28:	461a      	mov	r2, r3
 8002d2a:	2340      	movs	r3, #64	; 0x40
 8002d2c:	6093      	str	r3, [r2, #8]
 8002d2e:	e305      	b.n	800333c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 fde6 	bl	800490a <USB_ReadChInterrupts>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f003 0308 	and.w	r3, r3, #8
 8002d44:	2b08      	cmp	r3, #8
 8002d46:	d11a      	bne.n	8002d7e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d54:	461a      	mov	r2, r3
 8002d56:	2308      	movs	r3, #8
 8002d58:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002d5a:	78fa      	ldrb	r2, [r7, #3]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	334d      	adds	r3, #77	; 0x4d
 8002d6a:	2206      	movs	r2, #6
 8002d6c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f001 fe44 	bl	8004a04 <USB_HC_Halt>
 8002d7c:	e2de      	b.n	800333c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f001 fdbf 	bl	800490a <USB_ReadChInterrupts>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d144      	bne.n	8002e20 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d96:	78fa      	ldrb	r2, [r7, #3]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	011b      	lsls	r3, r3, #4
 8002d9e:	1a9b      	subs	r3, r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	440b      	add	r3, r1
 8002da4:	3344      	adds	r3, #68	; 0x44
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	334d      	adds	r3, #77	; 0x4d
 8002dba:	2204      	movs	r2, #4
 8002dbc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3319      	adds	r3, #25
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d114      	bne.n	8002dfe <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	3318      	adds	r3, #24
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	3319      	adds	r3, #25
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f001 fdfc 	bl	8004a04 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e0c:	78fb      	ldrb	r3, [r7, #3]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e18:	461a      	mov	r2, r3
 8002e1a:	2310      	movs	r3, #16
 8002e1c:	6093      	str	r3, [r2, #8]
 8002e1e:	e28d      	b.n	800333c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	4611      	mov	r1, r2
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f001 fd6e 	bl	800490a <USB_ReadChInterrupts>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e34:	2b80      	cmp	r3, #128	; 0x80
 8002e36:	d169      	bne.n	8002f0c <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	799b      	ldrb	r3, [r3, #6]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d111      	bne.n	8002e64 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	1a9b      	subs	r3, r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	334d      	adds	r3, #77	; 0x4d
 8002e50:	2207      	movs	r2, #7
 8002e52:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f001 fdd1 	bl	8004a04 <USB_HC_Halt>
 8002e62:	e049      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	3344      	adds	r3, #68	; 0x44
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	1c59      	adds	r1, r3, #1
 8002e78:	6878      	ldr	r0, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4403      	add	r3, r0
 8002e84:	3344      	adds	r3, #68	; 0x44
 8002e86:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	3344      	adds	r3, #68	; 0x44
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d922      	bls.n	8002ee4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	3344      	adds	r3, #68	; 0x44
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	334c      	adds	r3, #76	; 0x4c
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	334c      	adds	r3, #76	; 0x4c
 8002ed6:	781a      	ldrb	r2, [r3, #0]
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	4619      	mov	r1, r3
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f002 f80c 	bl	8004efa <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ee2:	e009      	b.n	8002ef8 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	334c      	adds	r3, #76	; 0x4c
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	015a      	lsls	r2, r3, #5
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4413      	add	r3, r2
 8002f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f04:	461a      	mov	r2, r3
 8002f06:	2380      	movs	r3, #128	; 0x80
 8002f08:	6093      	str	r3, [r2, #8]
 8002f0a:	e217      	b.n	800333c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f001 fcf8 	bl	800490a <USB_ReadChInterrupts>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f24:	d11b      	bne.n	8002f5e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	334d      	adds	r3, #77	; 0x4d
 8002f36:	2209      	movs	r2, #9
 8002f38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f001 fd5e 	bl	8004a04 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f54:	461a      	mov	r2, r3
 8002f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f5a:	6093      	str	r3, [r2, #8]
 8002f5c:	e1ee      	b.n	800333c <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	78fa      	ldrb	r2, [r7, #3]
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f001 fccf 	bl	800490a <USB_ReadChInterrupts>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	f040 81df 	bne.w	8003336 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f84:	461a      	mov	r2, r3
 8002f86:	2302      	movs	r3, #2
 8002f88:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	334d      	adds	r3, #77	; 0x4d
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	f040 8093 	bne.w	80030c8 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	334d      	adds	r3, #77	; 0x4d
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	334c      	adds	r3, #76	; 0x4c
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	3326      	adds	r3, #38	; 0x26
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d00b      	beq.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	3326      	adds	r3, #38	; 0x26
 8002ff0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	f040 8190 	bne.w	8003318 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	799b      	ldrb	r3, [r3, #6]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d115      	bne.n	800302c <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	333d      	adds	r3, #61	; 0x3d
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	f083 0301 	eor.w	r3, r3, #1
 8003018:	b2d8      	uxtb	r0, r3
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	333d      	adds	r3, #61	; 0x3d
 8003028:	4602      	mov	r2, r0
 800302a:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	799b      	ldrb	r3, [r3, #6]
 8003030:	2b01      	cmp	r3, #1
 8003032:	f040 8171 	bne.w	8003318 <HCD_HC_OUT_IRQHandler+0x920>
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	3334      	adds	r3, #52	; 0x34
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 8165 	beq.w	8003318 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	3334      	adds	r3, #52	; 0x34
 800305e:	6819      	ldr	r1, [r3, #0]
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4403      	add	r3, r0
 800306e:	3328      	adds	r3, #40	; 0x28
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	440b      	add	r3, r1
 8003074:	1e59      	subs	r1, r3, #1
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	4403      	add	r3, r0
 8003084:	3328      	adds	r3, #40	; 0x28
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	fbb1 f3f3 	udiv	r3, r1, r3
 800308c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	f003 0301 	and.w	r3, r3, #1
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 813f 	beq.w	8003318 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	333d      	adds	r3, #61	; 0x3d
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	f083 0301 	eor.w	r3, r3, #1
 80030b2:	b2d8      	uxtb	r0, r3
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	333d      	adds	r3, #61	; 0x3d
 80030c2:	4602      	mov	r2, r0
 80030c4:	701a      	strb	r2, [r3, #0]
 80030c6:	e127      	b.n	8003318 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	334d      	adds	r3, #77	; 0x4d
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d120      	bne.n	8003120 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	334d      	adds	r3, #77	; 0x4d
 80030ee:	2202      	movs	r2, #2
 80030f0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	331b      	adds	r3, #27
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b01      	cmp	r3, #1
 8003106:	f040 8107 	bne.w	8003318 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	334c      	adds	r3, #76	; 0x4c
 800311a:	2202      	movs	r2, #2
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	e0fb      	b.n	8003318 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	334d      	adds	r3, #77	; 0x4d
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b04      	cmp	r3, #4
 8003134:	d13a      	bne.n	80031ac <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	1a9b      	subs	r3, r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	334d      	adds	r3, #77	; 0x4d
 8003146:	2202      	movs	r2, #2
 8003148:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	334c      	adds	r3, #76	; 0x4c
 800315a:	2202      	movs	r2, #2
 800315c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	331b      	adds	r3, #27
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b01      	cmp	r3, #1
 8003172:	f040 80d1 	bne.w	8003318 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	331b      	adds	r3, #27
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800318a:	78fb      	ldrb	r3, [r7, #3]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	0151      	lsls	r1, r2, #5
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	440a      	add	r2, r1
 80031a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a8:	6053      	str	r3, [r2, #4]
 80031aa:	e0b5      	b.n	8003318 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80031ac:	78fa      	ldrb	r2, [r7, #3]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	334d      	adds	r3, #77	; 0x4d
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b05      	cmp	r3, #5
 80031c0:	d114      	bne.n	80031ec <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	334d      	adds	r3, #77	; 0x4d
 80031d2:	2202      	movs	r2, #2
 80031d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	334c      	adds	r3, #76	; 0x4c
 80031e6:	2202      	movs	r2, #2
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	e095      	b.n	8003318 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80031ec:	78fa      	ldrb	r2, [r7, #3]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	4613      	mov	r3, r2
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	334d      	adds	r3, #77	; 0x4d
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b06      	cmp	r3, #6
 8003200:	d114      	bne.n	800322c <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	334d      	adds	r3, #77	; 0x4d
 8003212:	2202      	movs	r2, #2
 8003214:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	334c      	adds	r3, #76	; 0x4c
 8003226:	2205      	movs	r2, #5
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	e075      	b.n	8003318 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	334d      	adds	r3, #77	; 0x4d
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b07      	cmp	r3, #7
 8003240:	d00a      	beq.n	8003258 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334d      	adds	r3, #77	; 0x4d
 8003252:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003254:	2b09      	cmp	r3, #9
 8003256:	d170      	bne.n	800333a <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	334d      	adds	r3, #77	; 0x4d
 8003268:	2202      	movs	r2, #2
 800326a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	440b      	add	r3, r1
 800327a:	3344      	adds	r3, #68	; 0x44
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	1c59      	adds	r1, r3, #1
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4403      	add	r3, r0
 800328c:	3344      	adds	r3, #68	; 0x44
 800328e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	3344      	adds	r3, #68	; 0x44
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d914      	bls.n	80032d0 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	3344      	adds	r3, #68	; 0x44
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	4613      	mov	r3, r2
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	1a9b      	subs	r3, r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	334c      	adds	r3, #76	; 0x4c
 80032ca:	2204      	movs	r2, #4
 80032cc:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032ce:	e022      	b.n	8003316 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032d0:	78fa      	ldrb	r2, [r7, #3]
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	4613      	mov	r3, r2
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	1a9b      	subs	r3, r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	334c      	adds	r3, #76	; 0x4c
 80032e0:	2202      	movs	r2, #2
 80032e2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80032e4:	78fb      	ldrb	r3, [r7, #3]
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80032fa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003302:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003304:	78fb      	ldrb	r3, [r7, #3]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4413      	add	r3, r2
 800330c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003310:	461a      	mov	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003316:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	011b      	lsls	r3, r3, #4
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	334c      	adds	r3, #76	; 0x4c
 8003328:	781a      	ldrb	r2, [r3, #0]
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	4619      	mov	r1, r3
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f001 fde3 	bl	8004efa <HAL_HCD_HC_NotifyURBChange_Callback>
 8003334:	e002      	b.n	800333c <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003336:	bf00      	nop
 8003338:	e000      	b.n	800333c <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800333a:	bf00      	nop
  }
}
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b08a      	sub	sp, #40	; 0x28
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	0c5b      	lsrs	r3, r3, #17
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003376:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2b02      	cmp	r3, #2
 800337c:	d004      	beq.n	8003388 <HCD_RXQLVL_IRQHandler+0x46>
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2b05      	cmp	r3, #5
 8003382:	f000 80b6 	beq.w	80034f2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003386:	e0b7      	b.n	80034f8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80b3 	beq.w	80034f6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4613      	mov	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	332c      	adds	r3, #44	; 0x2c
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 80a7 	beq.w	80034f6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4613      	mov	r3, r2
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	3338      	adds	r3, #56	; 0x38
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	18d1      	adds	r1, r2, r3
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4613      	mov	r3, r2
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4403      	add	r3, r0
 80033cc:	3334      	adds	r3, #52	; 0x34
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4299      	cmp	r1, r3
 80033d2:	f200 8083 	bhi.w	80034dc <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	332c      	adds	r3, #44	; 0x2c
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	b292      	uxth	r2, r2
 80033f0:	4619      	mov	r1, r3
 80033f2:	f001 fa1f 	bl	8004834 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	4613      	mov	r3, r2
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	332c      	adds	r3, #44	; 0x2c
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	18d1      	adds	r1, r2, r3
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4403      	add	r3, r0
 800341a:	332c      	adds	r3, #44	; 0x2c
 800341c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4613      	mov	r3, r2
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	1a9b      	subs	r3, r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	3338      	adds	r3, #56	; 0x38
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	18d1      	adds	r1, r2, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4403      	add	r3, r0
 8003442:	3338      	adds	r3, #56	; 0x38
 8003444:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	4413      	add	r3, r2
 800344e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	0cdb      	lsrs	r3, r3, #19
 8003456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800345a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	3328      	adds	r3, #40	; 0x28
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4293      	cmp	r3, r2
 8003474:	d13f      	bne.n	80034f6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d03c      	beq.n	80034f6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	015a      	lsls	r2, r3, #5
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	4413      	add	r3, r2
 8003484:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003492:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800349a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a8:	461a      	mov	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	333c      	adds	r3, #60	; 0x3c
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	f083 0301 	eor.w	r3, r3, #1
 80034c4:	b2d8      	uxtb	r0, r3
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4613      	mov	r3, r2
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	333c      	adds	r3, #60	; 0x3c
 80034d6:	4602      	mov	r2, r0
 80034d8:	701a      	strb	r2, [r3, #0]
      break;
 80034da:	e00c      	b.n	80034f6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	4613      	mov	r3, r2
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	1a9b      	subs	r3, r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	334c      	adds	r3, #76	; 0x4c
 80034ec:	2204      	movs	r2, #4
 80034ee:	701a      	strb	r2, [r3, #0]
      break;
 80034f0:	e001      	b.n	80034f6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80034f2:	bf00      	nop
 80034f4:	e000      	b.n	80034f8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80034f6:	bf00      	nop
  }
}
 80034f8:	bf00      	nop
 80034fa:	3728      	adds	r7, #40	; 0x28
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800352c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b02      	cmp	r3, #2
 8003536:	d10b      	bne.n	8003550 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d102      	bne.n	8003548 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f001 fcbd 	bl	8004ec2 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f043 0302 	orr.w	r3, r3, #2
 800354e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b08      	cmp	r3, #8
 8003558:	d132      	bne.n	80035c0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f043 0308 	orr.w	r3, r3, #8
 8003560:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b04      	cmp	r3, #4
 800356a:	d126      	bne.n	80035ba <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	7a5b      	ldrb	r3, [r3, #9]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d113      	bne.n	800359c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800357a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800357e:	d106      	bne.n	800358e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2102      	movs	r1, #2
 8003586:	4618      	mov	r0, r3
 8003588:	f001 f9ee 	bl	8004968 <USB_InitFSLSPClkSel>
 800358c:	e011      	b.n	80035b2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2101      	movs	r1, #1
 8003594:	4618      	mov	r0, r3
 8003596:	f001 f9e7 	bl	8004968 <USB_InitFSLSPClkSel>
 800359a:	e00a      	b.n	80035b2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	79db      	ldrb	r3, [r3, #7]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d106      	bne.n	80035b2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035aa:	461a      	mov	r2, r3
 80035ac:	f64e 2360 	movw	r3, #60000	; 0xea60
 80035b0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f001 fcaf 	bl	8004f16 <HAL_HCD_PortEnabled_Callback>
 80035b8:	e002      	b.n	80035c0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f001 fcb9 	bl	8004f32 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	d103      	bne.n	80035d2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	f043 0320 	orr.w	r3, r3, #32
 80035d0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035d8:	461a      	mov	r2, r3
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	6013      	str	r3, [r2, #0]
}
 80035de:	bf00      	nop
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e267      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d075      	beq.n	80036f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003606:	4b88      	ldr	r3, [pc, #544]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b04      	cmp	r3, #4
 8003610:	d00c      	beq.n	800362c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003612:	4b85      	ldr	r3, [pc, #532]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800361a:	2b08      	cmp	r3, #8
 800361c:	d112      	bne.n	8003644 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800361e:	4b82      	ldr	r3, [pc, #520]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800362a:	d10b      	bne.n	8003644 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362c:	4b7e      	ldr	r3, [pc, #504]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d05b      	beq.n	80036f0 <HAL_RCC_OscConfig+0x108>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d157      	bne.n	80036f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e242      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364c:	d106      	bne.n	800365c <HAL_RCC_OscConfig+0x74>
 800364e:	4b76      	ldr	r3, [pc, #472]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a75      	ldr	r2, [pc, #468]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e01d      	b.n	8003698 <HAL_RCC_OscConfig+0xb0>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0x98>
 8003666:	4b70      	ldr	r3, [pc, #448]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a6f      	ldr	r2, [pc, #444]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 800366c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b6d      	ldr	r3, [pc, #436]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a6c      	ldr	r2, [pc, #432]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e00b      	b.n	8003698 <HAL_RCC_OscConfig+0xb0>
 8003680:	4b69      	ldr	r3, [pc, #420]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a68      	ldr	r2, [pc, #416]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368a:	6013      	str	r3, [r2, #0]
 800368c:	4b66      	ldr	r3, [pc, #408]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a65      	ldr	r2, [pc, #404]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d013      	beq.n	80036c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7fd fb0c 	bl	8000cbc <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a8:	f7fd fb08 	bl	8000cbc <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b64      	cmp	r3, #100	; 0x64
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e207      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ba:	4b5b      	ldr	r3, [pc, #364]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0xc0>
 80036c6:	e014      	b.n	80036f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c8:	f7fd faf8 	bl	8000cbc <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036d0:	f7fd faf4 	bl	8000cbc <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b64      	cmp	r3, #100	; 0x64
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e1f3      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e2:	4b51      	ldr	r3, [pc, #324]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f0      	bne.n	80036d0 <HAL_RCC_OscConfig+0xe8>
 80036ee:	e000      	b.n	80036f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d063      	beq.n	80037c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036fe:	4b4a      	ldr	r3, [pc, #296]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 030c 	and.w	r3, r3, #12
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00b      	beq.n	8003722 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800370a:	4b47      	ldr	r3, [pc, #284]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003712:	2b08      	cmp	r3, #8
 8003714:	d11c      	bne.n	8003750 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003716:	4b44      	ldr	r3, [pc, #272]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d116      	bne.n	8003750 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003722:	4b41      	ldr	r3, [pc, #260]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d005      	beq.n	800373a <HAL_RCC_OscConfig+0x152>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d001      	beq.n	800373a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e1c7      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373a:	4b3b      	ldr	r3, [pc, #236]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4937      	ldr	r1, [pc, #220]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374e:	e03a      	b.n	80037c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d020      	beq.n	800379a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003758:	4b34      	ldr	r3, [pc, #208]	; (800382c <HAL_RCC_OscConfig+0x244>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375e:	f7fd faad 	bl	8000cbc <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003764:	e008      	b.n	8003778 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003766:	f7fd faa9 	bl	8000cbc <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e1a8      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003778:	4b2b      	ldr	r3, [pc, #172]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d0f0      	beq.n	8003766 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003784:	4b28      	ldr	r3, [pc, #160]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4925      	ldr	r1, [pc, #148]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 8003794:	4313      	orrs	r3, r2
 8003796:	600b      	str	r3, [r1, #0]
 8003798:	e015      	b.n	80037c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800379a:	4b24      	ldr	r3, [pc, #144]	; (800382c <HAL_RCC_OscConfig+0x244>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a0:	f7fd fa8c 	bl	8000cbc <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a8:	f7fd fa88 	bl	8000cbc <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e187      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ba:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d036      	beq.n	8003840 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d016      	beq.n	8003808 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037da:	4b15      	ldr	r3, [pc, #84]	; (8003830 <HAL_RCC_OscConfig+0x248>)
 80037dc:	2201      	movs	r2, #1
 80037de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e0:	f7fd fa6c 	bl	8000cbc <HAL_GetTick>
 80037e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e8:	f7fd fa68 	bl	8000cbc <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e167      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fa:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <HAL_RCC_OscConfig+0x240>)
 80037fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCC_OscConfig+0x200>
 8003806:	e01b      	b.n	8003840 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003808:	4b09      	ldr	r3, [pc, #36]	; (8003830 <HAL_RCC_OscConfig+0x248>)
 800380a:	2200      	movs	r2, #0
 800380c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380e:	f7fd fa55 	bl	8000cbc <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003814:	e00e      	b.n	8003834 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003816:	f7fd fa51 	bl	8000cbc <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d907      	bls.n	8003834 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e150      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
 8003828:	40023800 	.word	0x40023800
 800382c:	42470000 	.word	0x42470000
 8003830:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003834:	4b88      	ldr	r3, [pc, #544]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1ea      	bne.n	8003816 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 8097 	beq.w	800397c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800384e:	2300      	movs	r3, #0
 8003850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003852:	4b81      	ldr	r3, [pc, #516]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10f      	bne.n	800387e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	4b7d      	ldr	r3, [pc, #500]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	4a7c      	ldr	r2, [pc, #496]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386c:	6413      	str	r3, [r2, #64]	; 0x40
 800386e:	4b7a      	ldr	r3, [pc, #488]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003876:	60bb      	str	r3, [r7, #8]
 8003878:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800387a:	2301      	movs	r3, #1
 800387c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387e:	4b77      	ldr	r3, [pc, #476]	; (8003a5c <HAL_RCC_OscConfig+0x474>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003886:	2b00      	cmp	r3, #0
 8003888:	d118      	bne.n	80038bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800388a:	4b74      	ldr	r3, [pc, #464]	; (8003a5c <HAL_RCC_OscConfig+0x474>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a73      	ldr	r2, [pc, #460]	; (8003a5c <HAL_RCC_OscConfig+0x474>)
 8003890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003896:	f7fd fa11 	bl	8000cbc <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389e:	f7fd fa0d 	bl	8000cbc <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e10c      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b0:	4b6a      	ldr	r3, [pc, #424]	; (8003a5c <HAL_RCC_OscConfig+0x474>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d106      	bne.n	80038d2 <HAL_RCC_OscConfig+0x2ea>
 80038c4:	4b64      	ldr	r3, [pc, #400]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80038c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c8:	4a63      	ldr	r2, [pc, #396]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	6713      	str	r3, [r2, #112]	; 0x70
 80038d0:	e01c      	b.n	800390c <HAL_RCC_OscConfig+0x324>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b05      	cmp	r3, #5
 80038d8:	d10c      	bne.n	80038f4 <HAL_RCC_OscConfig+0x30c>
 80038da:	4b5f      	ldr	r3, [pc, #380]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80038dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038de:	4a5e      	ldr	r2, [pc, #376]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80038e0:	f043 0304 	orr.w	r3, r3, #4
 80038e4:	6713      	str	r3, [r2, #112]	; 0x70
 80038e6:	4b5c      	ldr	r3, [pc, #368]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	4a5b      	ldr	r2, [pc, #364]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	6713      	str	r3, [r2, #112]	; 0x70
 80038f2:	e00b      	b.n	800390c <HAL_RCC_OscConfig+0x324>
 80038f4:	4b58      	ldr	r3, [pc, #352]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80038f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f8:	4a57      	ldr	r2, [pc, #348]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80038fa:	f023 0301 	bic.w	r3, r3, #1
 80038fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003900:	4b55      	ldr	r3, [pc, #340]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003904:	4a54      	ldr	r2, [pc, #336]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003906:	f023 0304 	bic.w	r3, r3, #4
 800390a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d015      	beq.n	8003940 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003914:	f7fd f9d2 	bl	8000cbc <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391a:	e00a      	b.n	8003932 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800391c:	f7fd f9ce 	bl	8000cbc <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f241 3288 	movw	r2, #5000	; 0x1388
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e0cb      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003932:	4b49      	ldr	r3, [pc, #292]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0ee      	beq.n	800391c <HAL_RCC_OscConfig+0x334>
 800393e:	e014      	b.n	800396a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003940:	f7fd f9bc 	bl	8000cbc <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003946:	e00a      	b.n	800395e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003948:	f7fd f9b8 	bl	8000cbc <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	; 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e0b5      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800395e:	4b3e      	ldr	r3, [pc, #248]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1ee      	bne.n	8003948 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800396a:	7dfb      	ldrb	r3, [r7, #23]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d105      	bne.n	800397c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003970:	4b39      	ldr	r3, [pc, #228]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	4a38      	ldr	r2, [pc, #224]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 80a1 	beq.w	8003ac8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003986:	4b34      	ldr	r3, [pc, #208]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 030c 	and.w	r3, r3, #12
 800398e:	2b08      	cmp	r3, #8
 8003990:	d05c      	beq.n	8003a4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d141      	bne.n	8003a1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800399a:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <HAL_RCC_OscConfig+0x478>)
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7fd f98c 	bl	8000cbc <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a8:	f7fd f988 	bl	8000cbc <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e087      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ba:	4b27      	ldr	r3, [pc, #156]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1f0      	bne.n	80039a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	69da      	ldr	r2, [r3, #28]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	019b      	lsls	r3, r3, #6
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039dc:	085b      	lsrs	r3, r3, #1
 80039de:	3b01      	subs	r3, #1
 80039e0:	041b      	lsls	r3, r3, #16
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	061b      	lsls	r3, r3, #24
 80039ea:	491b      	ldr	r1, [pc, #108]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f0:	4b1b      	ldr	r3, [pc, #108]	; (8003a60 <HAL_RCC_OscConfig+0x478>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f6:	f7fd f961 	bl	8000cbc <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039fe:	f7fd f95d 	bl	8000cbc <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e05c      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a10:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0f0      	beq.n	80039fe <HAL_RCC_OscConfig+0x416>
 8003a1c:	e054      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a1e:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <HAL_RCC_OscConfig+0x478>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7fd f94a 	bl	8000cbc <HAL_GetTick>
 8003a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2a:	e008      	b.n	8003a3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a2c:	f7fd f946 	bl	8000cbc <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e045      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3e:	4b06      	ldr	r3, [pc, #24]	; (8003a58 <HAL_RCC_OscConfig+0x470>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1f0      	bne.n	8003a2c <HAL_RCC_OscConfig+0x444>
 8003a4a:	e03d      	b.n	8003ac8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d107      	bne.n	8003a64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e038      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	40007000 	.word	0x40007000
 8003a60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a64:	4b1b      	ldr	r3, [pc, #108]	; (8003ad4 <HAL_RCC_OscConfig+0x4ec>)
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d028      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d121      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d11a      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a94:	4013      	ands	r3, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d111      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aaa:	085b      	lsrs	r3, r3, #1
 8003aac:	3b01      	subs	r3, #1
 8003aae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d107      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d001      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e000      	b.n	8003aca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	40023800 	.word	0x40023800

08003ad8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e0cc      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aec:	4b68      	ldr	r3, [pc, #416]	; (8003c90 <HAL_RCC_ClockConfig+0x1b8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d90c      	bls.n	8003b14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afa:	4b65      	ldr	r3, [pc, #404]	; (8003c90 <HAL_RCC_ClockConfig+0x1b8>)
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b02:	4b63      	ldr	r3, [pc, #396]	; (8003c90 <HAL_RCC_ClockConfig+0x1b8>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d001      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0b8      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d020      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b2c:	4b59      	ldr	r3, [pc, #356]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	4a58      	ldr	r2, [pc, #352]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d005      	beq.n	8003b50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b44:	4b53      	ldr	r3, [pc, #332]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	4a52      	ldr	r2, [pc, #328]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b50:	4b50      	ldr	r3, [pc, #320]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	494d      	ldr	r1, [pc, #308]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d044      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d107      	bne.n	8003b86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b76:	4b47      	ldr	r3, [pc, #284]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d119      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e07f      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d003      	beq.n	8003b96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d107      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b96:	4b3f      	ldr	r3, [pc, #252]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d109      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e06f      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba6:	4b3b      	ldr	r3, [pc, #236]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e067      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bb6:	4b37      	ldr	r3, [pc, #220]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f023 0203 	bic.w	r2, r3, #3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	4934      	ldr	r1, [pc, #208]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bc8:	f7fd f878 	bl	8000cbc <HAL_GetTick>
 8003bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	e00a      	b.n	8003be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd0:	f7fd f874 	bl	8000cbc <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e04f      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be6:	4b2b      	ldr	r3, [pc, #172]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 020c 	and.w	r2, r3, #12
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d1eb      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf8:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0307 	and.w	r3, r3, #7
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d20c      	bcs.n	8003c20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c06:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <HAL_RCC_ClockConfig+0x1b8>)
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	b2d2      	uxtb	r2, r2
 8003c0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0e:	4b20      	ldr	r3, [pc, #128]	; (8003c90 <HAL_RCC_ClockConfig+0x1b8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d001      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e032      	b.n	8003c86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d008      	beq.n	8003c3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c2c:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	4916      	ldr	r1, [pc, #88]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0308 	and.w	r3, r3, #8
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d009      	beq.n	8003c5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c4a:	4b12      	ldr	r3, [pc, #72]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	490e      	ldr	r1, [pc, #56]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c5e:	f000 f821 	bl	8003ca4 <HAL_RCC_GetSysClockFreq>
 8003c62:	4602      	mov	r2, r0
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 030f 	and.w	r3, r3, #15
 8003c6e:	490a      	ldr	r1, [pc, #40]	; (8003c98 <HAL_RCC_ClockConfig+0x1c0>)
 8003c70:	5ccb      	ldrb	r3, [r1, r3]
 8003c72:	fa22 f303 	lsr.w	r3, r2, r3
 8003c76:	4a09      	ldr	r2, [pc, #36]	; (8003c9c <HAL_RCC_ClockConfig+0x1c4>)
 8003c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c7a:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fc ffd8 	bl	8000c34 <HAL_InitTick>

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40023c00 	.word	0x40023c00
 8003c94:	40023800 	.word	0x40023800
 8003c98:	080059d0 	.word	0x080059d0
 8003c9c:	20000000 	.word	0x20000000
 8003ca0:	20000004 	.word	0x20000004

08003ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca8:	b094      	sub	sp, #80	; 0x50
 8003caa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	647b      	str	r3, [r7, #68]	; 0x44
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cbc:	4b79      	ldr	r3, [pc, #484]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 030c 	and.w	r3, r3, #12
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d00d      	beq.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	f200 80e1 	bhi.w	8003e90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d003      	beq.n	8003cde <HAL_RCC_GetSysClockFreq+0x3a>
 8003cd6:	e0db      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cd8:	4b73      	ldr	r3, [pc, #460]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cda:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003cdc:	e0db      	b.n	8003e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cde:	4b73      	ldr	r3, [pc, #460]	; (8003eac <HAL_RCC_GetSysClockFreq+0x208>)
 8003ce0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ce2:	e0d8      	b.n	8003e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ce4:	4b6f      	ldr	r3, [pc, #444]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cee:	4b6d      	ldr	r3, [pc, #436]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d063      	beq.n	8003dc2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cfa:	4b6a      	ldr	r3, [pc, #424]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	099b      	lsrs	r3, r3, #6
 8003d00:	2200      	movs	r2, #0
 8003d02:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d0c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d0e:	2300      	movs	r3, #0
 8003d10:	637b      	str	r3, [r7, #52]	; 0x34
 8003d12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d16:	4622      	mov	r2, r4
 8003d18:	462b      	mov	r3, r5
 8003d1a:	f04f 0000 	mov.w	r0, #0
 8003d1e:	f04f 0100 	mov.w	r1, #0
 8003d22:	0159      	lsls	r1, r3, #5
 8003d24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d28:	0150      	lsls	r0, r2, #5
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4621      	mov	r1, r4
 8003d30:	1a51      	subs	r1, r2, r1
 8003d32:	6139      	str	r1, [r7, #16]
 8003d34:	4629      	mov	r1, r5
 8003d36:	eb63 0301 	sbc.w	r3, r3, r1
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d48:	4659      	mov	r1, fp
 8003d4a:	018b      	lsls	r3, r1, #6
 8003d4c:	4651      	mov	r1, sl
 8003d4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d52:	4651      	mov	r1, sl
 8003d54:	018a      	lsls	r2, r1, #6
 8003d56:	4651      	mov	r1, sl
 8003d58:	ebb2 0801 	subs.w	r8, r2, r1
 8003d5c:	4659      	mov	r1, fp
 8003d5e:	eb63 0901 	sbc.w	r9, r3, r1
 8003d62:	f04f 0200 	mov.w	r2, #0
 8003d66:	f04f 0300 	mov.w	r3, #0
 8003d6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d76:	4690      	mov	r8, r2
 8003d78:	4699      	mov	r9, r3
 8003d7a:	4623      	mov	r3, r4
 8003d7c:	eb18 0303 	adds.w	r3, r8, r3
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	462b      	mov	r3, r5
 8003d84:	eb49 0303 	adc.w	r3, r9, r3
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	f04f 0300 	mov.w	r3, #0
 8003d92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d96:	4629      	mov	r1, r5
 8003d98:	024b      	lsls	r3, r1, #9
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003da0:	4621      	mov	r1, r4
 8003da2:	024a      	lsls	r2, r1, #9
 8003da4:	4610      	mov	r0, r2
 8003da6:	4619      	mov	r1, r3
 8003da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003daa:	2200      	movs	r2, #0
 8003dac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003db0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003db4:	f7fc fa64 	bl	8000280 <__aeabi_uldivmod>
 8003db8:	4602      	mov	r2, r0
 8003dba:	460b      	mov	r3, r1
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dc0:	e058      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dc2:	4b38      	ldr	r3, [pc, #224]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	099b      	lsrs	r3, r3, #6
 8003dc8:	2200      	movs	r2, #0
 8003dca:	4618      	mov	r0, r3
 8003dcc:	4611      	mov	r1, r2
 8003dce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dd2:	623b      	str	r3, [r7, #32]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ddc:	4642      	mov	r2, r8
 8003dde:	464b      	mov	r3, r9
 8003de0:	f04f 0000 	mov.w	r0, #0
 8003de4:	f04f 0100 	mov.w	r1, #0
 8003de8:	0159      	lsls	r1, r3, #5
 8003dea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dee:	0150      	lsls	r0, r2, #5
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4641      	mov	r1, r8
 8003df6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e14:	ebb2 040a 	subs.w	r4, r2, sl
 8003e18:	eb63 050b 	sbc.w	r5, r3, fp
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	00eb      	lsls	r3, r5, #3
 8003e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e2a:	00e2      	lsls	r2, r4, #3
 8003e2c:	4614      	mov	r4, r2
 8003e2e:	461d      	mov	r5, r3
 8003e30:	4643      	mov	r3, r8
 8003e32:	18e3      	adds	r3, r4, r3
 8003e34:	603b      	str	r3, [r7, #0]
 8003e36:	464b      	mov	r3, r9
 8003e38:	eb45 0303 	adc.w	r3, r5, r3
 8003e3c:	607b      	str	r3, [r7, #4]
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	028b      	lsls	r3, r1, #10
 8003e4e:	4621      	mov	r1, r4
 8003e50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e54:	4621      	mov	r1, r4
 8003e56:	028a      	lsls	r2, r1, #10
 8003e58:	4610      	mov	r0, r2
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e5e:	2200      	movs	r2, #0
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	61fa      	str	r2, [r7, #28]
 8003e64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e68:	f7fc fa0a 	bl	8000280 <__aeabi_uldivmod>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4613      	mov	r3, r2
 8003e72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	0c1b      	lsrs	r3, r3, #16
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	005b      	lsls	r3, r3, #1
 8003e82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e8e:	e002      	b.n	8003e96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e90:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3750      	adds	r7, #80	; 0x50
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	00f42400 	.word	0x00f42400
 8003eac:	007a1200 	.word	0x007a1200

08003eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	20000000 	.word	0x20000000

08003ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ecc:	f7ff fff0 	bl	8003eb0 <HAL_RCC_GetHCLKFreq>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	0a9b      	lsrs	r3, r3, #10
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	4903      	ldr	r1, [pc, #12]	; (8003eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ede:	5ccb      	ldrb	r3, [r1, r3]
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	080059e0 	.word	0x080059e0

08003ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ef4:	f7ff ffdc 	bl	8003eb0 <HAL_RCC_GetHCLKFreq>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	0b5b      	lsrs	r3, r3, #13
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	4903      	ldr	r1, [pc, #12]	; (8003f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f06:	5ccb      	ldrb	r3, [r1, r3]
 8003f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	40023800 	.word	0x40023800
 8003f14:	080059e0 	.word	0x080059e0

08003f18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e042      	b.n	8003fb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7fc fd68 	bl	8000a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2224      	movs	r2, #36	; 0x24
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f973 	bl	8004248 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b08a      	sub	sp, #40	; 0x28
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	603b      	str	r3, [r7, #0]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d175      	bne.n	80040c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_UART_Transmit+0x2c>
 8003fde:	88fb      	ldrh	r3, [r7, #6]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e06e      	b.n	80040c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2221      	movs	r2, #33	; 0x21
 8003ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ff6:	f7fc fe61 	bl	8000cbc <HAL_GetTick>
 8003ffa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	88fa      	ldrh	r2, [r7, #6]
 8004000:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	88fa      	ldrh	r2, [r7, #6]
 8004006:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004010:	d108      	bne.n	8004024 <HAL_UART_Transmit+0x6c>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d104      	bne.n	8004024 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800401a:	2300      	movs	r3, #0
 800401c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	e003      	b.n	800402c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004028:	2300      	movs	r3, #0
 800402a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800402c:	e02e      	b.n	800408c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2200      	movs	r2, #0
 8004036:	2180      	movs	r1, #128	; 0x80
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f848 	bl	80040ce <UART_WaitOnFlagUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e03a      	b.n	80040c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10b      	bne.n	800406e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	881b      	ldrh	r3, [r3, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004064:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	3302      	adds	r3, #2
 800406a:	61bb      	str	r3, [r7, #24]
 800406c:	e007      	b.n	800407e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	781a      	ldrb	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	3301      	adds	r3, #1
 800407c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004090:	b29b      	uxth	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1cb      	bne.n	800402e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	9300      	str	r3, [sp, #0]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2200      	movs	r2, #0
 800409e:	2140      	movs	r1, #64	; 0x40
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f814 	bl	80040ce <UART_WaitOnFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e006      	b.n	80040c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	e000      	b.n	80040c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80040c4:	2302      	movs	r3, #2
  }
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3720      	adds	r7, #32
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b086      	sub	sp, #24
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	603b      	str	r3, [r7, #0]
 80040da:	4613      	mov	r3, r2
 80040dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040de:	e03b      	b.n	8004158 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e6:	d037      	beq.n	8004158 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e8:	f7fc fde8 	bl	8000cbc <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	6a3a      	ldr	r2, [r7, #32]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d302      	bcc.n	80040fe <UART_WaitOnFlagUntilTimeout+0x30>
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e03a      	b.n	8004178 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d023      	beq.n	8004158 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b80      	cmp	r3, #128	; 0x80
 8004114:	d020      	beq.n	8004158 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b40      	cmp	r3, #64	; 0x40
 800411a:	d01d      	beq.n	8004158 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b08      	cmp	r3, #8
 8004128:	d116      	bne.n	8004158 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 f81d 	bl	8004180 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2208      	movs	r2, #8
 800414a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e00f      	b.n	8004178 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	4013      	ands	r3, r2
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	429a      	cmp	r2, r3
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	79fb      	ldrb	r3, [r7, #7]
 8004172:	429a      	cmp	r2, r3
 8004174:	d0b4      	beq.n	80040e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004180:	b480      	push	{r7}
 8004182:	b095      	sub	sp, #84	; 0x54
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	330c      	adds	r3, #12
 800418e:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004192:	e853 3f00 	ldrex	r3, [r3]
 8004196:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800419e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	330c      	adds	r3, #12
 80041a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041a8:	643a      	str	r2, [r7, #64]	; 0x40
 80041aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041b0:	e841 2300 	strex	r3, r2, [r1]
 80041b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1e5      	bne.n	8004188 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3314      	adds	r3, #20
 80041c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	e853 3f00 	ldrex	r3, [r3]
 80041ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f023 0301 	bic.w	r3, r3, #1
 80041d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3314      	adds	r3, #20
 80041da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041e4:	e841 2300 	strex	r3, r2, [r1]
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1e5      	bne.n	80041bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d119      	bne.n	800422c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	330c      	adds	r3, #12
 80041fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	e853 3f00 	ldrex	r3, [r3]
 8004206:	60bb      	str	r3, [r7, #8]
   return(result);
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f023 0310 	bic.w	r3, r3, #16
 800420e:	647b      	str	r3, [r7, #68]	; 0x44
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	330c      	adds	r3, #12
 8004216:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004218:	61ba      	str	r2, [r7, #24]
 800421a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	6979      	ldr	r1, [r7, #20]
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	e841 2300 	strex	r3, r2, [r1]
 8004224:	613b      	str	r3, [r7, #16]
   return(result);
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e5      	bne.n	80041f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	631a      	str	r2, [r3, #48]	; 0x30
}
 800423a:	bf00      	nop
 800423c:	3754      	adds	r7, #84	; 0x54
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
	...

08004248 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800424c:	b0c0      	sub	sp, #256	; 0x100
 800424e:	af00      	add	r7, sp, #0
 8004250:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004264:	68d9      	ldr	r1, [r3, #12]
 8004266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	ea40 0301 	orr.w	r3, r0, r1
 8004270:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	431a      	orrs	r2, r3
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	431a      	orrs	r2, r3
 8004288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	4313      	orrs	r3, r2
 8004290:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80042a0:	f021 010c 	bic.w	r1, r1, #12
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80042ae:	430b      	orrs	r3, r1
 80042b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80042be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c2:	6999      	ldr	r1, [r3, #24]
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	ea40 0301 	orr.w	r3, r0, r1
 80042ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	4b8f      	ldr	r3, [pc, #572]	; (8004514 <UART_SetConfig+0x2cc>)
 80042d8:	429a      	cmp	r2, r3
 80042da:	d005      	beq.n	80042e8 <UART_SetConfig+0xa0>
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	4b8d      	ldr	r3, [pc, #564]	; (8004518 <UART_SetConfig+0x2d0>)
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d104      	bne.n	80042f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042e8:	f7ff fe02 	bl	8003ef0 <HAL_RCC_GetPCLK2Freq>
 80042ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80042f0:	e003      	b.n	80042fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042f2:	f7ff fde9 	bl	8003ec8 <HAL_RCC_GetPCLK1Freq>
 80042f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004304:	f040 810c 	bne.w	8004520 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004308:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800430c:	2200      	movs	r2, #0
 800430e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004312:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004316:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800431a:	4622      	mov	r2, r4
 800431c:	462b      	mov	r3, r5
 800431e:	1891      	adds	r1, r2, r2
 8004320:	65b9      	str	r1, [r7, #88]	; 0x58
 8004322:	415b      	adcs	r3, r3
 8004324:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004326:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800432a:	4621      	mov	r1, r4
 800432c:	eb12 0801 	adds.w	r8, r2, r1
 8004330:	4629      	mov	r1, r5
 8004332:	eb43 0901 	adc.w	r9, r3, r1
 8004336:	f04f 0200 	mov.w	r2, #0
 800433a:	f04f 0300 	mov.w	r3, #0
 800433e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800434a:	4690      	mov	r8, r2
 800434c:	4699      	mov	r9, r3
 800434e:	4623      	mov	r3, r4
 8004350:	eb18 0303 	adds.w	r3, r8, r3
 8004354:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004358:	462b      	mov	r3, r5
 800435a:	eb49 0303 	adc.w	r3, r9, r3
 800435e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800436e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004372:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004376:	460b      	mov	r3, r1
 8004378:	18db      	adds	r3, r3, r3
 800437a:	653b      	str	r3, [r7, #80]	; 0x50
 800437c:	4613      	mov	r3, r2
 800437e:	eb42 0303 	adc.w	r3, r2, r3
 8004382:	657b      	str	r3, [r7, #84]	; 0x54
 8004384:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004388:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800438c:	f7fb ff78 	bl	8000280 <__aeabi_uldivmod>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4b61      	ldr	r3, [pc, #388]	; (800451c <UART_SetConfig+0x2d4>)
 8004396:	fba3 2302 	umull	r2, r3, r3, r2
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	011c      	lsls	r4, r3, #4
 800439e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043a2:	2200      	movs	r2, #0
 80043a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80043ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80043b0:	4642      	mov	r2, r8
 80043b2:	464b      	mov	r3, r9
 80043b4:	1891      	adds	r1, r2, r2
 80043b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80043b8:	415b      	adcs	r3, r3
 80043ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043c0:	4641      	mov	r1, r8
 80043c2:	eb12 0a01 	adds.w	sl, r2, r1
 80043c6:	4649      	mov	r1, r9
 80043c8:	eb43 0b01 	adc.w	fp, r3, r1
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043e0:	4692      	mov	sl, r2
 80043e2:	469b      	mov	fp, r3
 80043e4:	4643      	mov	r3, r8
 80043e6:	eb1a 0303 	adds.w	r3, sl, r3
 80043ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043ee:	464b      	mov	r3, r9
 80043f0:	eb4b 0303 	adc.w	r3, fp, r3
 80043f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004404:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004408:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800440c:	460b      	mov	r3, r1
 800440e:	18db      	adds	r3, r3, r3
 8004410:	643b      	str	r3, [r7, #64]	; 0x40
 8004412:	4613      	mov	r3, r2
 8004414:	eb42 0303 	adc.w	r3, r2, r3
 8004418:	647b      	str	r3, [r7, #68]	; 0x44
 800441a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800441e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004422:	f7fb ff2d 	bl	8000280 <__aeabi_uldivmod>
 8004426:	4602      	mov	r2, r0
 8004428:	460b      	mov	r3, r1
 800442a:	4611      	mov	r1, r2
 800442c:	4b3b      	ldr	r3, [pc, #236]	; (800451c <UART_SetConfig+0x2d4>)
 800442e:	fba3 2301 	umull	r2, r3, r3, r1
 8004432:	095b      	lsrs	r3, r3, #5
 8004434:	2264      	movs	r2, #100	; 0x64
 8004436:	fb02 f303 	mul.w	r3, r2, r3
 800443a:	1acb      	subs	r3, r1, r3
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004442:	4b36      	ldr	r3, [pc, #216]	; (800451c <UART_SetConfig+0x2d4>)
 8004444:	fba3 2302 	umull	r2, r3, r3, r2
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004450:	441c      	add	r4, r3
 8004452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004456:	2200      	movs	r2, #0
 8004458:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800445c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004460:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004464:	4642      	mov	r2, r8
 8004466:	464b      	mov	r3, r9
 8004468:	1891      	adds	r1, r2, r2
 800446a:	63b9      	str	r1, [r7, #56]	; 0x38
 800446c:	415b      	adcs	r3, r3
 800446e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004470:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004474:	4641      	mov	r1, r8
 8004476:	1851      	adds	r1, r2, r1
 8004478:	6339      	str	r1, [r7, #48]	; 0x30
 800447a:	4649      	mov	r1, r9
 800447c:	414b      	adcs	r3, r1
 800447e:	637b      	str	r3, [r7, #52]	; 0x34
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800448c:	4659      	mov	r1, fp
 800448e:	00cb      	lsls	r3, r1, #3
 8004490:	4651      	mov	r1, sl
 8004492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004496:	4651      	mov	r1, sl
 8004498:	00ca      	lsls	r2, r1, #3
 800449a:	4610      	mov	r0, r2
 800449c:	4619      	mov	r1, r3
 800449e:	4603      	mov	r3, r0
 80044a0:	4642      	mov	r2, r8
 80044a2:	189b      	adds	r3, r3, r2
 80044a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044a8:	464b      	mov	r3, r9
 80044aa:	460a      	mov	r2, r1
 80044ac:	eb42 0303 	adc.w	r3, r2, r3
 80044b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80044c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80044c8:	460b      	mov	r3, r1
 80044ca:	18db      	adds	r3, r3, r3
 80044cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ce:	4613      	mov	r3, r2
 80044d0:	eb42 0303 	adc.w	r3, r2, r3
 80044d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80044de:	f7fb fecf 	bl	8000280 <__aeabi_uldivmod>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4b0d      	ldr	r3, [pc, #52]	; (800451c <UART_SetConfig+0x2d4>)
 80044e8:	fba3 1302 	umull	r1, r3, r3, r2
 80044ec:	095b      	lsrs	r3, r3, #5
 80044ee:	2164      	movs	r1, #100	; 0x64
 80044f0:	fb01 f303 	mul.w	r3, r1, r3
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	3332      	adds	r3, #50	; 0x32
 80044fa:	4a08      	ldr	r2, [pc, #32]	; (800451c <UART_SetConfig+0x2d4>)
 80044fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	f003 0207 	and.w	r2, r3, #7
 8004506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4422      	add	r2, r4
 800450e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004510:	e106      	b.n	8004720 <UART_SetConfig+0x4d8>
 8004512:	bf00      	nop
 8004514:	40011000 	.word	0x40011000
 8004518:	40011400 	.word	0x40011400
 800451c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004524:	2200      	movs	r2, #0
 8004526:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800452a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800452e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004532:	4642      	mov	r2, r8
 8004534:	464b      	mov	r3, r9
 8004536:	1891      	adds	r1, r2, r2
 8004538:	6239      	str	r1, [r7, #32]
 800453a:	415b      	adcs	r3, r3
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
 800453e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004542:	4641      	mov	r1, r8
 8004544:	1854      	adds	r4, r2, r1
 8004546:	4649      	mov	r1, r9
 8004548:	eb43 0501 	adc.w	r5, r3, r1
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	00eb      	lsls	r3, r5, #3
 8004556:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800455a:	00e2      	lsls	r2, r4, #3
 800455c:	4614      	mov	r4, r2
 800455e:	461d      	mov	r5, r3
 8004560:	4643      	mov	r3, r8
 8004562:	18e3      	adds	r3, r4, r3
 8004564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004568:	464b      	mov	r3, r9
 800456a:	eb45 0303 	adc.w	r3, r5, r3
 800456e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800457e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800458e:	4629      	mov	r1, r5
 8004590:	008b      	lsls	r3, r1, #2
 8004592:	4621      	mov	r1, r4
 8004594:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004598:	4621      	mov	r1, r4
 800459a:	008a      	lsls	r2, r1, #2
 800459c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80045a0:	f7fb fe6e 	bl	8000280 <__aeabi_uldivmod>
 80045a4:	4602      	mov	r2, r0
 80045a6:	460b      	mov	r3, r1
 80045a8:	4b60      	ldr	r3, [pc, #384]	; (800472c <UART_SetConfig+0x4e4>)
 80045aa:	fba3 2302 	umull	r2, r3, r3, r2
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	011c      	lsls	r4, r3, #4
 80045b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045b6:	2200      	movs	r2, #0
 80045b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80045bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80045c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80045c4:	4642      	mov	r2, r8
 80045c6:	464b      	mov	r3, r9
 80045c8:	1891      	adds	r1, r2, r2
 80045ca:	61b9      	str	r1, [r7, #24]
 80045cc:	415b      	adcs	r3, r3
 80045ce:	61fb      	str	r3, [r7, #28]
 80045d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045d4:	4641      	mov	r1, r8
 80045d6:	1851      	adds	r1, r2, r1
 80045d8:	6139      	str	r1, [r7, #16]
 80045da:	4649      	mov	r1, r9
 80045dc:	414b      	adcs	r3, r1
 80045de:	617b      	str	r3, [r7, #20]
 80045e0:	f04f 0200 	mov.w	r2, #0
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045ec:	4659      	mov	r1, fp
 80045ee:	00cb      	lsls	r3, r1, #3
 80045f0:	4651      	mov	r1, sl
 80045f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045f6:	4651      	mov	r1, sl
 80045f8:	00ca      	lsls	r2, r1, #3
 80045fa:	4610      	mov	r0, r2
 80045fc:	4619      	mov	r1, r3
 80045fe:	4603      	mov	r3, r0
 8004600:	4642      	mov	r2, r8
 8004602:	189b      	adds	r3, r3, r2
 8004604:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004608:	464b      	mov	r3, r9
 800460a:	460a      	mov	r2, r1
 800460c:	eb42 0303 	adc.w	r3, r2, r3
 8004610:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	67bb      	str	r3, [r7, #120]	; 0x78
 800461e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800462c:	4649      	mov	r1, r9
 800462e:	008b      	lsls	r3, r1, #2
 8004630:	4641      	mov	r1, r8
 8004632:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004636:	4641      	mov	r1, r8
 8004638:	008a      	lsls	r2, r1, #2
 800463a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800463e:	f7fb fe1f 	bl	8000280 <__aeabi_uldivmod>
 8004642:	4602      	mov	r2, r0
 8004644:	460b      	mov	r3, r1
 8004646:	4611      	mov	r1, r2
 8004648:	4b38      	ldr	r3, [pc, #224]	; (800472c <UART_SetConfig+0x4e4>)
 800464a:	fba3 2301 	umull	r2, r3, r3, r1
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	2264      	movs	r2, #100	; 0x64
 8004652:	fb02 f303 	mul.w	r3, r2, r3
 8004656:	1acb      	subs	r3, r1, r3
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	3332      	adds	r3, #50	; 0x32
 800465c:	4a33      	ldr	r2, [pc, #204]	; (800472c <UART_SetConfig+0x4e4>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004668:	441c      	add	r4, r3
 800466a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800466e:	2200      	movs	r2, #0
 8004670:	673b      	str	r3, [r7, #112]	; 0x70
 8004672:	677a      	str	r2, [r7, #116]	; 0x74
 8004674:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004678:	4642      	mov	r2, r8
 800467a:	464b      	mov	r3, r9
 800467c:	1891      	adds	r1, r2, r2
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	415b      	adcs	r3, r3
 8004682:	60fb      	str	r3, [r7, #12]
 8004684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004688:	4641      	mov	r1, r8
 800468a:	1851      	adds	r1, r2, r1
 800468c:	6039      	str	r1, [r7, #0]
 800468e:	4649      	mov	r1, r9
 8004690:	414b      	adcs	r3, r1
 8004692:	607b      	str	r3, [r7, #4]
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046a0:	4659      	mov	r1, fp
 80046a2:	00cb      	lsls	r3, r1, #3
 80046a4:	4651      	mov	r1, sl
 80046a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046aa:	4651      	mov	r1, sl
 80046ac:	00ca      	lsls	r2, r1, #3
 80046ae:	4610      	mov	r0, r2
 80046b0:	4619      	mov	r1, r3
 80046b2:	4603      	mov	r3, r0
 80046b4:	4642      	mov	r2, r8
 80046b6:	189b      	adds	r3, r3, r2
 80046b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80046ba:	464b      	mov	r3, r9
 80046bc:	460a      	mov	r2, r1
 80046be:	eb42 0303 	adc.w	r3, r2, r3
 80046c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	663b      	str	r3, [r7, #96]	; 0x60
 80046ce:	667a      	str	r2, [r7, #100]	; 0x64
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80046dc:	4649      	mov	r1, r9
 80046de:	008b      	lsls	r3, r1, #2
 80046e0:	4641      	mov	r1, r8
 80046e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046e6:	4641      	mov	r1, r8
 80046e8:	008a      	lsls	r2, r1, #2
 80046ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80046ee:	f7fb fdc7 	bl	8000280 <__aeabi_uldivmod>
 80046f2:	4602      	mov	r2, r0
 80046f4:	460b      	mov	r3, r1
 80046f6:	4b0d      	ldr	r3, [pc, #52]	; (800472c <UART_SetConfig+0x4e4>)
 80046f8:	fba3 1302 	umull	r1, r3, r3, r2
 80046fc:	095b      	lsrs	r3, r3, #5
 80046fe:	2164      	movs	r1, #100	; 0x64
 8004700:	fb01 f303 	mul.w	r3, r1, r3
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	3332      	adds	r3, #50	; 0x32
 800470a:	4a08      	ldr	r2, [pc, #32]	; (800472c <UART_SetConfig+0x4e4>)
 800470c:	fba2 2303 	umull	r2, r3, r2, r3
 8004710:	095b      	lsrs	r3, r3, #5
 8004712:	f003 020f 	and.w	r2, r3, #15
 8004716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4422      	add	r2, r4
 800471e:	609a      	str	r2, [r3, #8]
}
 8004720:	bf00      	nop
 8004722:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004726:	46bd      	mov	sp, r7
 8004728:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800472c:	51eb851f 	.word	0x51eb851f

08004730 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f043 0201 	orr.w	r2, r3, #1
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f023 0201 	bic.w	r2, r3, #1
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	3301      	adds	r3, #1
 8004786:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800478e:	d901      	bls.n	8004794 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e01b      	b.n	80047cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b00      	cmp	r3, #0
 800479a:	daf2      	bge.n	8004782 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800479c:	2300      	movs	r3, #0
 800479e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	019b      	lsls	r3, r3, #6
 80047a4:	f043 0220 	orr.w	r2, r3, #32
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	3301      	adds	r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80047b8:	d901      	bls.n	80047be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e006      	b.n	80047cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	d0f0      	beq.n	80047ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3301      	adds	r3, #1
 80047e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80047f0:	d901      	bls.n	80047f6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e018      	b.n	8004828 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	daf2      	bge.n	80047e4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2210      	movs	r2, #16
 8004806:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3301      	adds	r3, #1
 800480c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8004814:	d901      	bls.n	800481a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e006      	b.n	8004828 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	2b10      	cmp	r3, #16
 8004824:	d0f0      	beq.n	8004808 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004834:	b480      	push	{r7}
 8004836:	b08b      	sub	sp, #44	; 0x2c
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	4613      	mov	r3, r2
 8004840:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	089b      	lsrs	r3, r3, #2
 800484e:	b29b      	uxth	r3, r3
 8004850:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800485a:	2300      	movs	r3, #0
 800485c:	623b      	str	r3, [r7, #32]
 800485e:	e014      	b.n	800488a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	601a      	str	r2, [r3, #0]
    pDest++;
 800486c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486e:	3301      	adds	r3, #1
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	3301      	adds	r3, #1
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	3301      	adds	r3, #1
 800487c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	3301      	adds	r3, #1
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	3301      	adds	r3, #1
 8004888:	623b      	str	r3, [r7, #32]
 800488a:	6a3a      	ldr	r2, [r7, #32]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	429a      	cmp	r2, r3
 8004890:	d3e6      	bcc.n	8004860 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004892:	8bfb      	ldrh	r3, [r7, #30]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01e      	beq.n	80048d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a2:	461a      	mov	r2, r3
 80048a4:	f107 0310 	add.w	r3, r7, #16
 80048a8:	6812      	ldr	r2, [r2, #0]
 80048aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	6a3b      	ldr	r3, [r7, #32]
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
 80048b8:	b2da      	uxtb	r2, r3
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	701a      	strb	r2, [r3, #0]
      i++;
 80048be:	6a3b      	ldr	r3, [r7, #32]
 80048c0:	3301      	adds	r3, #1
 80048c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	3301      	adds	r3, #1
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80048ca:	8bfb      	ldrh	r3, [r7, #30]
 80048cc:	3b01      	subs	r3, #1
 80048ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80048d0:	8bfb      	ldrh	r3, [r7, #30]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1ea      	bne.n	80048ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048d8:	4618      	mov	r0, r3
 80048da:	372c      	adds	r7, #44	; 0x2c
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4013      	ands	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80048fc:	68fb      	ldr	r3, [r7, #12]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800490a:	b480      	push	{r7}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	460b      	mov	r3, r1
 8004914:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	4413      	add	r3, r2
 8004922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800492a:	78fb      	ldrb	r3, [r7, #3]
 800492c:	015a      	lsls	r2, r3, #5
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4413      	add	r3, r2
 8004932:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	68ba      	ldr	r2, [r7, #8]
 800493a:	4013      	ands	r3, r2
 800493c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800493e:	68bb      	ldr	r3, [r7, #8]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	f003 0301 	and.w	r3, r3, #1
}
 800495c:	4618      	mov	r0, r3
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004986:	f023 0303 	bic.w	r3, r3, #3
 800498a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	78fb      	ldrb	r3, [r7, #3]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	68f9      	ldr	r1, [r7, #12]
 800499c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d107      	bne.n	80049ba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049b0:	461a      	mov	r2, r3
 80049b2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80049b6:	6053      	str	r3, [r2, #4]
 80049b8:	e00c      	b.n	80049d4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d107      	bne.n	80049d0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049c6:	461a      	mov	r2, r3
 80049c8:	f241 7370 	movw	r3, #6000	; 0x1770
 80049cc:	6053      	str	r3, [r2, #4]
 80049ce:	e001      	b.n	80049d4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e000      	b.n	80049d6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	b29b      	uxth	r3, r3
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3714      	adds	r7, #20
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b089      	sub	sp, #36	; 0x24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	0c9b      	lsrs	r3, r3, #18
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	0fdb      	lsrs	r3, r3, #31
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	0fdb      	lsrs	r3, r3, #31
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d10d      	bne.n	8004a86 <USB_HC_Halt+0x82>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <USB_HC_Halt+0x82>
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d005      	beq.n	8004a82 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d002      	beq.n	8004a82 <USB_HC_Halt+0x7e>
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d101      	bne.n	8004a86 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	e0d8      	b.n	8004c38 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <USB_HC_Halt+0x8e>
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d173      	bne.n	8004b7a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	0151      	lsls	r1, r2, #5
 8004aa4:	69fa      	ldr	r2, [r7, #28]
 8004aa6:	440a      	add	r2, r1
 8004aa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004aac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ab0:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 0320 	and.w	r3, r3, #32
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d14a      	bne.n	8004b54 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d133      	bne.n	8004b32 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	0151      	lsls	r1, r2, #5
 8004adc:	69fa      	ldr	r2, [r7, #28]
 8004ade:	440a      	add	r2, r1
 8004ae0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ae4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ae8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	015a      	lsls	r2, r3, #5
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	4413      	add	r3, r2
 8004af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	69ba      	ldr	r2, [r7, #24]
 8004afa:	0151      	lsls	r1, r2, #5
 8004afc:	69fa      	ldr	r2, [r7, #28]
 8004afe:	440a      	add	r2, r1
 8004b00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b08:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b16:	d82e      	bhi.n	8004b76 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b2e:	d0ec      	beq.n	8004b0a <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004b30:	e081      	b.n	8004c36 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	0151      	lsls	r1, r2, #5
 8004b44:	69fa      	ldr	r2, [r7, #28]
 8004b46:	440a      	add	r2, r1
 8004b48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b50:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004b52:	e070      	b.n	8004c36 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004b54:	69bb      	ldr	r3, [r7, #24]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	69fb      	ldr	r3, [r7, #28]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	0151      	lsls	r1, r2, #5
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	440a      	add	r2, r1
 8004b6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b72:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004b74:	e05f      	b.n	8004c36 <USB_HC_Halt+0x232>
            break;
 8004b76:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8004b78:	e05d      	b.n	8004c36 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	0151      	lsls	r1, r2, #5
 8004b8c:	69fa      	ldr	r2, [r7, #28]
 8004b8e:	440a      	add	r2, r1
 8004b90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b98:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d133      	bne.n	8004c12 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	015a      	lsls	r2, r3, #5
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	0151      	lsls	r1, r2, #5
 8004bbc:	69fa      	ldr	r2, [r7, #28]
 8004bbe:	440a      	add	r2, r1
 8004bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bc8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	0151      	lsls	r1, r2, #5
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	440a      	add	r2, r1
 8004be0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004be4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004be8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	3301      	adds	r3, #1
 8004bee:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bf6:	d81d      	bhi.n	8004c34 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c0e:	d0ec      	beq.n	8004bea <USB_HC_Halt+0x1e6>
 8004c10:	e011      	b.n	8004c36 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	0151      	lsls	r1, r2, #5
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	440a      	add	r2, r1
 8004c28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	e000      	b.n	8004c36 <USB_HC_Halt+0x232>
          break;
 8004c34:	bf00      	nop
    }
  }

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3724      	adds	r7, #36	; 0x24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b088      	sub	sp, #32
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7ff fd7a 	bl	8004752 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c5e:	2110      	movs	r1, #16
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7ff fd87 	bl	8004774 <USB_FlushTxFifo>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff fdb1 	bl	80047d8 <USB_FlushRxFifo>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8004c80:	2300      	movs	r3, #0
 8004c82:	61bb      	str	r3, [r7, #24]
 8004c84:	e01f      	b.n	8004cc6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c9c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ca4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cac:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cba:	461a      	mov	r2, r3
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b0f      	cmp	r3, #15
 8004cca:	d9dc      	bls.n	8004c86 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61bb      	str	r3, [r7, #24]
 8004cd0:	e034      	b.n	8004d3c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ce8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004cf0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cf8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d06:	461a      	mov	r2, r3
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d18:	d80c      	bhi.n	8004d34 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d30:	d0ec      	beq.n	8004d0c <USB_StopHost+0xc8>
 8004d32:	e000      	b.n	8004d36 <USB_StopHost+0xf2>
        break;
 8004d34:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	61bb      	str	r3, [r7, #24]
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	2b0f      	cmp	r3, #15
 8004d40:	d9c7      	bls.n	8004cd2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d48:	461a      	mov	r2, r3
 8004d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d4e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f04f 32ff 	mov.w	r2, #4294967295
 8004d56:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f7ff fce9 	bl	8004730 <USB_EnableGlobalInt>

  return ret;
 8004d5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3720      	adds	r7, #32
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f804 	bl	8004d8c <USBH_HandleSof>
}
 8004d84:	bf00      	nop
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b0b      	cmp	r3, #11
 8004d9c:	d10a      	bne.n	8004db4 <USBH_HandleSof+0x28>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d005      	beq.n	8004db4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	4798      	blx	r3
  }
}
 8004db4:	bf00      	nop
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8004dcc:	bf00      	nop
}
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8004de8:	bf00      	nop
}
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df2:	4770      	bx	lr

08004df4 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 f883 	bl	8004f4e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	791b      	ldrb	r3, [r3, #4]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f80b 	bl	8004e6a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	795b      	ldrb	r3, [r3, #5]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f805 	bl	8004e6a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	460b      	mov	r3, r1
 8004e74:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8004e76:	78fb      	ldrb	r3, [r7, #3]
 8004e78:	2b0f      	cmp	r3, #15
 8004e7a:	d80d      	bhi.n	8004e98 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8004e7c:	78fb      	ldrb	r3, [r7, #3]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	33e0      	adds	r3, #224	; 0xe0
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	33e0      	adds	r3, #224	; 0xe0
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b082      	sub	sp, #8
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff ff57 	bl	8004d68 <USBH_LL_IncTimer>
}
 8004eba:	bf00      	nop
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b082      	sub	sp, #8
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff ff8f 	bl	8004df4 <USBH_LL_Connect>
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b082      	sub	sp, #8
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7ff ff98 	bl	8004e22 <USBH_LL_Disconnect>
}
 8004ef2:	bf00      	nop
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b083      	sub	sp, #12
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	460b      	mov	r3, r1
 8004f04:	70fb      	strb	r3, [r7, #3]
 8004f06:	4613      	mov	r3, r2
 8004f08:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b082      	sub	sp, #8
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff ff49 	bl	8004dbc <USBH_LL_PortEnabled>
}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 8004f40:	4618      	mov	r0, r3
 8004f42:	f7ff ff49 	bl	8004dd8 <USBH_LL_PortDisabled>
}
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fc fec1 	bl	8001cec <HAL_HCD_Stop>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 f807 	bl	8004f84 <USBH_Get_USB_Status>
 8004f76:	4603      	mov	r3, r0
 8004f78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8004f7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8004f92:	79fb      	ldrb	r3, [r7, #7]
 8004f94:	2b03      	cmp	r3, #3
 8004f96:	d817      	bhi.n	8004fc8 <USBH_Get_USB_Status+0x44>
 8004f98:	a201      	add	r2, pc, #4	; (adr r2, 8004fa0 <USBH_Get_USB_Status+0x1c>)
 8004f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9e:	bf00      	nop
 8004fa0:	08004fb1 	.word	0x08004fb1
 8004fa4:	08004fb7 	.word	0x08004fb7
 8004fa8:	08004fbd 	.word	0x08004fbd
 8004fac:	08004fc3 	.word	0x08004fc3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8004fb4:	e00b      	b.n	8004fce <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	73fb      	strb	r3, [r7, #15]
    break;
 8004fba:	e008      	b.n	8004fce <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8004fc0:	e005      	b.n	8004fce <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	73fb      	strb	r3, [r7, #15]
    break;
 8004fc6:	e002      	b.n	8004fce <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8004fc8:	2302      	movs	r3, #2
 8004fca:	73fb      	strb	r3, [r7, #15]
    break;
 8004fcc:	bf00      	nop
  }
  return usb_status;
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <sbrk_aligned>:
 8004fdc:	b570      	push	{r4, r5, r6, lr}
 8004fde:	4e0e      	ldr	r6, [pc, #56]	; (8005018 <sbrk_aligned+0x3c>)
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	6831      	ldr	r1, [r6, #0]
 8004fe4:	4605      	mov	r5, r0
 8004fe6:	b911      	cbnz	r1, 8004fee <sbrk_aligned+0x12>
 8004fe8:	f000 f8c4 	bl	8005174 <_sbrk_r>
 8004fec:	6030      	str	r0, [r6, #0]
 8004fee:	4621      	mov	r1, r4
 8004ff0:	4628      	mov	r0, r5
 8004ff2:	f000 f8bf 	bl	8005174 <_sbrk_r>
 8004ff6:	1c43      	adds	r3, r0, #1
 8004ff8:	d00a      	beq.n	8005010 <sbrk_aligned+0x34>
 8004ffa:	1cc4      	adds	r4, r0, #3
 8004ffc:	f024 0403 	bic.w	r4, r4, #3
 8005000:	42a0      	cmp	r0, r4
 8005002:	d007      	beq.n	8005014 <sbrk_aligned+0x38>
 8005004:	1a21      	subs	r1, r4, r0
 8005006:	4628      	mov	r0, r5
 8005008:	f000 f8b4 	bl	8005174 <_sbrk_r>
 800500c:	3001      	adds	r0, #1
 800500e:	d101      	bne.n	8005014 <sbrk_aligned+0x38>
 8005010:	f04f 34ff 	mov.w	r4, #4294967295
 8005014:	4620      	mov	r0, r4
 8005016:	bd70      	pop	{r4, r5, r6, pc}
 8005018:	200004d4 	.word	0x200004d4

0800501c <_malloc_r>:
 800501c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005020:	1ccd      	adds	r5, r1, #3
 8005022:	f025 0503 	bic.w	r5, r5, #3
 8005026:	3508      	adds	r5, #8
 8005028:	2d0c      	cmp	r5, #12
 800502a:	bf38      	it	cc
 800502c:	250c      	movcc	r5, #12
 800502e:	2d00      	cmp	r5, #0
 8005030:	4607      	mov	r7, r0
 8005032:	db01      	blt.n	8005038 <_malloc_r+0x1c>
 8005034:	42a9      	cmp	r1, r5
 8005036:	d905      	bls.n	8005044 <_malloc_r+0x28>
 8005038:	230c      	movs	r3, #12
 800503a:	603b      	str	r3, [r7, #0]
 800503c:	2600      	movs	r6, #0
 800503e:	4630      	mov	r0, r6
 8005040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005044:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005118 <_malloc_r+0xfc>
 8005048:	f000 f868 	bl	800511c <__malloc_lock>
 800504c:	f8d8 3000 	ldr.w	r3, [r8]
 8005050:	461c      	mov	r4, r3
 8005052:	bb5c      	cbnz	r4, 80050ac <_malloc_r+0x90>
 8005054:	4629      	mov	r1, r5
 8005056:	4638      	mov	r0, r7
 8005058:	f7ff ffc0 	bl	8004fdc <sbrk_aligned>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	4604      	mov	r4, r0
 8005060:	d155      	bne.n	800510e <_malloc_r+0xf2>
 8005062:	f8d8 4000 	ldr.w	r4, [r8]
 8005066:	4626      	mov	r6, r4
 8005068:	2e00      	cmp	r6, #0
 800506a:	d145      	bne.n	80050f8 <_malloc_r+0xdc>
 800506c:	2c00      	cmp	r4, #0
 800506e:	d048      	beq.n	8005102 <_malloc_r+0xe6>
 8005070:	6823      	ldr	r3, [r4, #0]
 8005072:	4631      	mov	r1, r6
 8005074:	4638      	mov	r0, r7
 8005076:	eb04 0903 	add.w	r9, r4, r3
 800507a:	f000 f87b 	bl	8005174 <_sbrk_r>
 800507e:	4581      	cmp	r9, r0
 8005080:	d13f      	bne.n	8005102 <_malloc_r+0xe6>
 8005082:	6821      	ldr	r1, [r4, #0]
 8005084:	1a6d      	subs	r5, r5, r1
 8005086:	4629      	mov	r1, r5
 8005088:	4638      	mov	r0, r7
 800508a:	f7ff ffa7 	bl	8004fdc <sbrk_aligned>
 800508e:	3001      	adds	r0, #1
 8005090:	d037      	beq.n	8005102 <_malloc_r+0xe6>
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	442b      	add	r3, r5
 8005096:	6023      	str	r3, [r4, #0]
 8005098:	f8d8 3000 	ldr.w	r3, [r8]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d038      	beq.n	8005112 <_malloc_r+0xf6>
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	42a2      	cmp	r2, r4
 80050a4:	d12b      	bne.n	80050fe <_malloc_r+0xe2>
 80050a6:	2200      	movs	r2, #0
 80050a8:	605a      	str	r2, [r3, #4]
 80050aa:	e00f      	b.n	80050cc <_malloc_r+0xb0>
 80050ac:	6822      	ldr	r2, [r4, #0]
 80050ae:	1b52      	subs	r2, r2, r5
 80050b0:	d41f      	bmi.n	80050f2 <_malloc_r+0xd6>
 80050b2:	2a0b      	cmp	r2, #11
 80050b4:	d917      	bls.n	80050e6 <_malloc_r+0xca>
 80050b6:	1961      	adds	r1, r4, r5
 80050b8:	42a3      	cmp	r3, r4
 80050ba:	6025      	str	r5, [r4, #0]
 80050bc:	bf18      	it	ne
 80050be:	6059      	strne	r1, [r3, #4]
 80050c0:	6863      	ldr	r3, [r4, #4]
 80050c2:	bf08      	it	eq
 80050c4:	f8c8 1000 	streq.w	r1, [r8]
 80050c8:	5162      	str	r2, [r4, r5]
 80050ca:	604b      	str	r3, [r1, #4]
 80050cc:	4638      	mov	r0, r7
 80050ce:	f104 060b 	add.w	r6, r4, #11
 80050d2:	f000 f829 	bl	8005128 <__malloc_unlock>
 80050d6:	f026 0607 	bic.w	r6, r6, #7
 80050da:	1d23      	adds	r3, r4, #4
 80050dc:	1af2      	subs	r2, r6, r3
 80050de:	d0ae      	beq.n	800503e <_malloc_r+0x22>
 80050e0:	1b9b      	subs	r3, r3, r6
 80050e2:	50a3      	str	r3, [r4, r2]
 80050e4:	e7ab      	b.n	800503e <_malloc_r+0x22>
 80050e6:	42a3      	cmp	r3, r4
 80050e8:	6862      	ldr	r2, [r4, #4]
 80050ea:	d1dd      	bne.n	80050a8 <_malloc_r+0x8c>
 80050ec:	f8c8 2000 	str.w	r2, [r8]
 80050f0:	e7ec      	b.n	80050cc <_malloc_r+0xb0>
 80050f2:	4623      	mov	r3, r4
 80050f4:	6864      	ldr	r4, [r4, #4]
 80050f6:	e7ac      	b.n	8005052 <_malloc_r+0x36>
 80050f8:	4634      	mov	r4, r6
 80050fa:	6876      	ldr	r6, [r6, #4]
 80050fc:	e7b4      	b.n	8005068 <_malloc_r+0x4c>
 80050fe:	4613      	mov	r3, r2
 8005100:	e7cc      	b.n	800509c <_malloc_r+0x80>
 8005102:	230c      	movs	r3, #12
 8005104:	603b      	str	r3, [r7, #0]
 8005106:	4638      	mov	r0, r7
 8005108:	f000 f80e 	bl	8005128 <__malloc_unlock>
 800510c:	e797      	b.n	800503e <_malloc_r+0x22>
 800510e:	6025      	str	r5, [r4, #0]
 8005110:	e7dc      	b.n	80050cc <_malloc_r+0xb0>
 8005112:	605b      	str	r3, [r3, #4]
 8005114:	deff      	udf	#255	; 0xff
 8005116:	bf00      	nop
 8005118:	200004d0 	.word	0x200004d0

0800511c <__malloc_lock>:
 800511c:	4801      	ldr	r0, [pc, #4]	; (8005124 <__malloc_lock+0x8>)
 800511e:	f000 b863 	b.w	80051e8 <__retarget_lock_acquire_recursive>
 8005122:	bf00      	nop
 8005124:	20000614 	.word	0x20000614

08005128 <__malloc_unlock>:
 8005128:	4801      	ldr	r0, [pc, #4]	; (8005130 <__malloc_unlock+0x8>)
 800512a:	f000 b85e 	b.w	80051ea <__retarget_lock_release_recursive>
 800512e:	bf00      	nop
 8005130:	20000614 	.word	0x20000614

08005134 <siprintf>:
 8005134:	b40e      	push	{r1, r2, r3}
 8005136:	b500      	push	{lr}
 8005138:	b09c      	sub	sp, #112	; 0x70
 800513a:	ab1d      	add	r3, sp, #116	; 0x74
 800513c:	9002      	str	r0, [sp, #8]
 800513e:	9006      	str	r0, [sp, #24]
 8005140:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005144:	4809      	ldr	r0, [pc, #36]	; (800516c <siprintf+0x38>)
 8005146:	9107      	str	r1, [sp, #28]
 8005148:	9104      	str	r1, [sp, #16]
 800514a:	4909      	ldr	r1, [pc, #36]	; (8005170 <siprintf+0x3c>)
 800514c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005150:	9105      	str	r1, [sp, #20]
 8005152:	6800      	ldr	r0, [r0, #0]
 8005154:	9301      	str	r3, [sp, #4]
 8005156:	a902      	add	r1, sp, #8
 8005158:	f000 f8ee 	bl	8005338 <_svfiprintf_r>
 800515c:	9b02      	ldr	r3, [sp, #8]
 800515e:	2200      	movs	r2, #0
 8005160:	701a      	strb	r2, [r3, #0]
 8005162:	b01c      	add	sp, #112	; 0x70
 8005164:	f85d eb04 	ldr.w	lr, [sp], #4
 8005168:	b003      	add	sp, #12
 800516a:	4770      	bx	lr
 800516c:	20000058 	.word	0x20000058
 8005170:	ffff0208 	.word	0xffff0208

08005174 <_sbrk_r>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	4d06      	ldr	r5, [pc, #24]	; (8005190 <_sbrk_r+0x1c>)
 8005178:	2300      	movs	r3, #0
 800517a:	4604      	mov	r4, r0
 800517c:	4608      	mov	r0, r1
 800517e:	602b      	str	r3, [r5, #0]
 8005180:	f7fb fcc4 	bl	8000b0c <_sbrk>
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	d102      	bne.n	800518e <_sbrk_r+0x1a>
 8005188:	682b      	ldr	r3, [r5, #0]
 800518a:	b103      	cbz	r3, 800518e <_sbrk_r+0x1a>
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	bd38      	pop	{r3, r4, r5, pc}
 8005190:	20000610 	.word	0x20000610

08005194 <__errno>:
 8005194:	4b01      	ldr	r3, [pc, #4]	; (800519c <__errno+0x8>)
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	20000058 	.word	0x20000058

080051a0 <__libc_init_array>:
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	4d0d      	ldr	r5, [pc, #52]	; (80051d8 <__libc_init_array+0x38>)
 80051a4:	4c0d      	ldr	r4, [pc, #52]	; (80051dc <__libc_init_array+0x3c>)
 80051a6:	1b64      	subs	r4, r4, r5
 80051a8:	10a4      	asrs	r4, r4, #2
 80051aa:	2600      	movs	r6, #0
 80051ac:	42a6      	cmp	r6, r4
 80051ae:	d109      	bne.n	80051c4 <__libc_init_array+0x24>
 80051b0:	4d0b      	ldr	r5, [pc, #44]	; (80051e0 <__libc_init_array+0x40>)
 80051b2:	4c0c      	ldr	r4, [pc, #48]	; (80051e4 <__libc_init_array+0x44>)
 80051b4:	f000 fbae 	bl	8005914 <_init>
 80051b8:	1b64      	subs	r4, r4, r5
 80051ba:	10a4      	asrs	r4, r4, #2
 80051bc:	2600      	movs	r6, #0
 80051be:	42a6      	cmp	r6, r4
 80051c0:	d105      	bne.n	80051ce <__libc_init_array+0x2e>
 80051c2:	bd70      	pop	{r4, r5, r6, pc}
 80051c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c8:	4798      	blx	r3
 80051ca:	3601      	adds	r6, #1
 80051cc:	e7ee      	b.n	80051ac <__libc_init_array+0xc>
 80051ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d2:	4798      	blx	r3
 80051d4:	3601      	adds	r6, #1
 80051d6:	e7f2      	b.n	80051be <__libc_init_array+0x1e>
 80051d8:	08005a24 	.word	0x08005a24
 80051dc:	08005a24 	.word	0x08005a24
 80051e0:	08005a24 	.word	0x08005a24
 80051e4:	08005a28 	.word	0x08005a28

080051e8 <__retarget_lock_acquire_recursive>:
 80051e8:	4770      	bx	lr

080051ea <__retarget_lock_release_recursive>:
 80051ea:	4770      	bx	lr

080051ec <_free_r>:
 80051ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051ee:	2900      	cmp	r1, #0
 80051f0:	d044      	beq.n	800527c <_free_r+0x90>
 80051f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051f6:	9001      	str	r0, [sp, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f1a1 0404 	sub.w	r4, r1, #4
 80051fe:	bfb8      	it	lt
 8005200:	18e4      	addlt	r4, r4, r3
 8005202:	f7ff ff8b 	bl	800511c <__malloc_lock>
 8005206:	4a1e      	ldr	r2, [pc, #120]	; (8005280 <_free_r+0x94>)
 8005208:	9801      	ldr	r0, [sp, #4]
 800520a:	6813      	ldr	r3, [r2, #0]
 800520c:	b933      	cbnz	r3, 800521c <_free_r+0x30>
 800520e:	6063      	str	r3, [r4, #4]
 8005210:	6014      	str	r4, [r2, #0]
 8005212:	b003      	add	sp, #12
 8005214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005218:	f7ff bf86 	b.w	8005128 <__malloc_unlock>
 800521c:	42a3      	cmp	r3, r4
 800521e:	d908      	bls.n	8005232 <_free_r+0x46>
 8005220:	6825      	ldr	r5, [r4, #0]
 8005222:	1961      	adds	r1, r4, r5
 8005224:	428b      	cmp	r3, r1
 8005226:	bf01      	itttt	eq
 8005228:	6819      	ldreq	r1, [r3, #0]
 800522a:	685b      	ldreq	r3, [r3, #4]
 800522c:	1949      	addeq	r1, r1, r5
 800522e:	6021      	streq	r1, [r4, #0]
 8005230:	e7ed      	b.n	800520e <_free_r+0x22>
 8005232:	461a      	mov	r2, r3
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	b10b      	cbz	r3, 800523c <_free_r+0x50>
 8005238:	42a3      	cmp	r3, r4
 800523a:	d9fa      	bls.n	8005232 <_free_r+0x46>
 800523c:	6811      	ldr	r1, [r2, #0]
 800523e:	1855      	adds	r5, r2, r1
 8005240:	42a5      	cmp	r5, r4
 8005242:	d10b      	bne.n	800525c <_free_r+0x70>
 8005244:	6824      	ldr	r4, [r4, #0]
 8005246:	4421      	add	r1, r4
 8005248:	1854      	adds	r4, r2, r1
 800524a:	42a3      	cmp	r3, r4
 800524c:	6011      	str	r1, [r2, #0]
 800524e:	d1e0      	bne.n	8005212 <_free_r+0x26>
 8005250:	681c      	ldr	r4, [r3, #0]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	6053      	str	r3, [r2, #4]
 8005256:	440c      	add	r4, r1
 8005258:	6014      	str	r4, [r2, #0]
 800525a:	e7da      	b.n	8005212 <_free_r+0x26>
 800525c:	d902      	bls.n	8005264 <_free_r+0x78>
 800525e:	230c      	movs	r3, #12
 8005260:	6003      	str	r3, [r0, #0]
 8005262:	e7d6      	b.n	8005212 <_free_r+0x26>
 8005264:	6825      	ldr	r5, [r4, #0]
 8005266:	1961      	adds	r1, r4, r5
 8005268:	428b      	cmp	r3, r1
 800526a:	bf04      	itt	eq
 800526c:	6819      	ldreq	r1, [r3, #0]
 800526e:	685b      	ldreq	r3, [r3, #4]
 8005270:	6063      	str	r3, [r4, #4]
 8005272:	bf04      	itt	eq
 8005274:	1949      	addeq	r1, r1, r5
 8005276:	6021      	streq	r1, [r4, #0]
 8005278:	6054      	str	r4, [r2, #4]
 800527a:	e7ca      	b.n	8005212 <_free_r+0x26>
 800527c:	b003      	add	sp, #12
 800527e:	bd30      	pop	{r4, r5, pc}
 8005280:	200004d0 	.word	0x200004d0

08005284 <__ssputs_r>:
 8005284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005288:	688e      	ldr	r6, [r1, #8]
 800528a:	461f      	mov	r7, r3
 800528c:	42be      	cmp	r6, r7
 800528e:	680b      	ldr	r3, [r1, #0]
 8005290:	4682      	mov	sl, r0
 8005292:	460c      	mov	r4, r1
 8005294:	4690      	mov	r8, r2
 8005296:	d82c      	bhi.n	80052f2 <__ssputs_r+0x6e>
 8005298:	898a      	ldrh	r2, [r1, #12]
 800529a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800529e:	d026      	beq.n	80052ee <__ssputs_r+0x6a>
 80052a0:	6965      	ldr	r5, [r4, #20]
 80052a2:	6909      	ldr	r1, [r1, #16]
 80052a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80052a8:	eba3 0901 	sub.w	r9, r3, r1
 80052ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80052b0:	1c7b      	adds	r3, r7, #1
 80052b2:	444b      	add	r3, r9
 80052b4:	106d      	asrs	r5, r5, #1
 80052b6:	429d      	cmp	r5, r3
 80052b8:	bf38      	it	cc
 80052ba:	461d      	movcc	r5, r3
 80052bc:	0553      	lsls	r3, r2, #21
 80052be:	d527      	bpl.n	8005310 <__ssputs_r+0x8c>
 80052c0:	4629      	mov	r1, r5
 80052c2:	f7ff feab 	bl	800501c <_malloc_r>
 80052c6:	4606      	mov	r6, r0
 80052c8:	b360      	cbz	r0, 8005324 <__ssputs_r+0xa0>
 80052ca:	6921      	ldr	r1, [r4, #16]
 80052cc:	464a      	mov	r2, r9
 80052ce:	f000 fadb 	bl	8005888 <memcpy>
 80052d2:	89a3      	ldrh	r3, [r4, #12]
 80052d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80052d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052dc:	81a3      	strh	r3, [r4, #12]
 80052de:	6126      	str	r6, [r4, #16]
 80052e0:	6165      	str	r5, [r4, #20]
 80052e2:	444e      	add	r6, r9
 80052e4:	eba5 0509 	sub.w	r5, r5, r9
 80052e8:	6026      	str	r6, [r4, #0]
 80052ea:	60a5      	str	r5, [r4, #8]
 80052ec:	463e      	mov	r6, r7
 80052ee:	42be      	cmp	r6, r7
 80052f0:	d900      	bls.n	80052f4 <__ssputs_r+0x70>
 80052f2:	463e      	mov	r6, r7
 80052f4:	6820      	ldr	r0, [r4, #0]
 80052f6:	4632      	mov	r2, r6
 80052f8:	4641      	mov	r1, r8
 80052fa:	f000 faab 	bl	8005854 <memmove>
 80052fe:	68a3      	ldr	r3, [r4, #8]
 8005300:	1b9b      	subs	r3, r3, r6
 8005302:	60a3      	str	r3, [r4, #8]
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	4433      	add	r3, r6
 8005308:	6023      	str	r3, [r4, #0]
 800530a:	2000      	movs	r0, #0
 800530c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005310:	462a      	mov	r2, r5
 8005312:	f000 fac7 	bl	80058a4 <_realloc_r>
 8005316:	4606      	mov	r6, r0
 8005318:	2800      	cmp	r0, #0
 800531a:	d1e0      	bne.n	80052de <__ssputs_r+0x5a>
 800531c:	6921      	ldr	r1, [r4, #16]
 800531e:	4650      	mov	r0, sl
 8005320:	f7ff ff64 	bl	80051ec <_free_r>
 8005324:	230c      	movs	r3, #12
 8005326:	f8ca 3000 	str.w	r3, [sl]
 800532a:	89a3      	ldrh	r3, [r4, #12]
 800532c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005330:	81a3      	strh	r3, [r4, #12]
 8005332:	f04f 30ff 	mov.w	r0, #4294967295
 8005336:	e7e9      	b.n	800530c <__ssputs_r+0x88>

08005338 <_svfiprintf_r>:
 8005338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533c:	4698      	mov	r8, r3
 800533e:	898b      	ldrh	r3, [r1, #12]
 8005340:	061b      	lsls	r3, r3, #24
 8005342:	b09d      	sub	sp, #116	; 0x74
 8005344:	4607      	mov	r7, r0
 8005346:	460d      	mov	r5, r1
 8005348:	4614      	mov	r4, r2
 800534a:	d50e      	bpl.n	800536a <_svfiprintf_r+0x32>
 800534c:	690b      	ldr	r3, [r1, #16]
 800534e:	b963      	cbnz	r3, 800536a <_svfiprintf_r+0x32>
 8005350:	2140      	movs	r1, #64	; 0x40
 8005352:	f7ff fe63 	bl	800501c <_malloc_r>
 8005356:	6028      	str	r0, [r5, #0]
 8005358:	6128      	str	r0, [r5, #16]
 800535a:	b920      	cbnz	r0, 8005366 <_svfiprintf_r+0x2e>
 800535c:	230c      	movs	r3, #12
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	f04f 30ff 	mov.w	r0, #4294967295
 8005364:	e0d0      	b.n	8005508 <_svfiprintf_r+0x1d0>
 8005366:	2340      	movs	r3, #64	; 0x40
 8005368:	616b      	str	r3, [r5, #20]
 800536a:	2300      	movs	r3, #0
 800536c:	9309      	str	r3, [sp, #36]	; 0x24
 800536e:	2320      	movs	r3, #32
 8005370:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005374:	f8cd 800c 	str.w	r8, [sp, #12]
 8005378:	2330      	movs	r3, #48	; 0x30
 800537a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005520 <_svfiprintf_r+0x1e8>
 800537e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005382:	f04f 0901 	mov.w	r9, #1
 8005386:	4623      	mov	r3, r4
 8005388:	469a      	mov	sl, r3
 800538a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800538e:	b10a      	cbz	r2, 8005394 <_svfiprintf_r+0x5c>
 8005390:	2a25      	cmp	r2, #37	; 0x25
 8005392:	d1f9      	bne.n	8005388 <_svfiprintf_r+0x50>
 8005394:	ebba 0b04 	subs.w	fp, sl, r4
 8005398:	d00b      	beq.n	80053b2 <_svfiprintf_r+0x7a>
 800539a:	465b      	mov	r3, fp
 800539c:	4622      	mov	r2, r4
 800539e:	4629      	mov	r1, r5
 80053a0:	4638      	mov	r0, r7
 80053a2:	f7ff ff6f 	bl	8005284 <__ssputs_r>
 80053a6:	3001      	adds	r0, #1
 80053a8:	f000 80a9 	beq.w	80054fe <_svfiprintf_r+0x1c6>
 80053ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053ae:	445a      	add	r2, fp
 80053b0:	9209      	str	r2, [sp, #36]	; 0x24
 80053b2:	f89a 3000 	ldrb.w	r3, [sl]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 80a1 	beq.w	80054fe <_svfiprintf_r+0x1c6>
 80053bc:	2300      	movs	r3, #0
 80053be:	f04f 32ff 	mov.w	r2, #4294967295
 80053c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053c6:	f10a 0a01 	add.w	sl, sl, #1
 80053ca:	9304      	str	r3, [sp, #16]
 80053cc:	9307      	str	r3, [sp, #28]
 80053ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053d2:	931a      	str	r3, [sp, #104]	; 0x68
 80053d4:	4654      	mov	r4, sl
 80053d6:	2205      	movs	r2, #5
 80053d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053dc:	4850      	ldr	r0, [pc, #320]	; (8005520 <_svfiprintf_r+0x1e8>)
 80053de:	f7fa feff 	bl	80001e0 <memchr>
 80053e2:	9a04      	ldr	r2, [sp, #16]
 80053e4:	b9d8      	cbnz	r0, 800541e <_svfiprintf_r+0xe6>
 80053e6:	06d0      	lsls	r0, r2, #27
 80053e8:	bf44      	itt	mi
 80053ea:	2320      	movmi	r3, #32
 80053ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053f0:	0711      	lsls	r1, r2, #28
 80053f2:	bf44      	itt	mi
 80053f4:	232b      	movmi	r3, #43	; 0x2b
 80053f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053fa:	f89a 3000 	ldrb.w	r3, [sl]
 80053fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005400:	d015      	beq.n	800542e <_svfiprintf_r+0xf6>
 8005402:	9a07      	ldr	r2, [sp, #28]
 8005404:	4654      	mov	r4, sl
 8005406:	2000      	movs	r0, #0
 8005408:	f04f 0c0a 	mov.w	ip, #10
 800540c:	4621      	mov	r1, r4
 800540e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005412:	3b30      	subs	r3, #48	; 0x30
 8005414:	2b09      	cmp	r3, #9
 8005416:	d94d      	bls.n	80054b4 <_svfiprintf_r+0x17c>
 8005418:	b1b0      	cbz	r0, 8005448 <_svfiprintf_r+0x110>
 800541a:	9207      	str	r2, [sp, #28]
 800541c:	e014      	b.n	8005448 <_svfiprintf_r+0x110>
 800541e:	eba0 0308 	sub.w	r3, r0, r8
 8005422:	fa09 f303 	lsl.w	r3, r9, r3
 8005426:	4313      	orrs	r3, r2
 8005428:	9304      	str	r3, [sp, #16]
 800542a:	46a2      	mov	sl, r4
 800542c:	e7d2      	b.n	80053d4 <_svfiprintf_r+0x9c>
 800542e:	9b03      	ldr	r3, [sp, #12]
 8005430:	1d19      	adds	r1, r3, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	9103      	str	r1, [sp, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	bfbb      	ittet	lt
 800543a:	425b      	neglt	r3, r3
 800543c:	f042 0202 	orrlt.w	r2, r2, #2
 8005440:	9307      	strge	r3, [sp, #28]
 8005442:	9307      	strlt	r3, [sp, #28]
 8005444:	bfb8      	it	lt
 8005446:	9204      	strlt	r2, [sp, #16]
 8005448:	7823      	ldrb	r3, [r4, #0]
 800544a:	2b2e      	cmp	r3, #46	; 0x2e
 800544c:	d10c      	bne.n	8005468 <_svfiprintf_r+0x130>
 800544e:	7863      	ldrb	r3, [r4, #1]
 8005450:	2b2a      	cmp	r3, #42	; 0x2a
 8005452:	d134      	bne.n	80054be <_svfiprintf_r+0x186>
 8005454:	9b03      	ldr	r3, [sp, #12]
 8005456:	1d1a      	adds	r2, r3, #4
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	9203      	str	r2, [sp, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	bfb8      	it	lt
 8005460:	f04f 33ff 	movlt.w	r3, #4294967295
 8005464:	3402      	adds	r4, #2
 8005466:	9305      	str	r3, [sp, #20]
 8005468:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005530 <_svfiprintf_r+0x1f8>
 800546c:	7821      	ldrb	r1, [r4, #0]
 800546e:	2203      	movs	r2, #3
 8005470:	4650      	mov	r0, sl
 8005472:	f7fa feb5 	bl	80001e0 <memchr>
 8005476:	b138      	cbz	r0, 8005488 <_svfiprintf_r+0x150>
 8005478:	9b04      	ldr	r3, [sp, #16]
 800547a:	eba0 000a 	sub.w	r0, r0, sl
 800547e:	2240      	movs	r2, #64	; 0x40
 8005480:	4082      	lsls	r2, r0
 8005482:	4313      	orrs	r3, r2
 8005484:	3401      	adds	r4, #1
 8005486:	9304      	str	r3, [sp, #16]
 8005488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800548c:	4825      	ldr	r0, [pc, #148]	; (8005524 <_svfiprintf_r+0x1ec>)
 800548e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005492:	2206      	movs	r2, #6
 8005494:	f7fa fea4 	bl	80001e0 <memchr>
 8005498:	2800      	cmp	r0, #0
 800549a:	d038      	beq.n	800550e <_svfiprintf_r+0x1d6>
 800549c:	4b22      	ldr	r3, [pc, #136]	; (8005528 <_svfiprintf_r+0x1f0>)
 800549e:	bb1b      	cbnz	r3, 80054e8 <_svfiprintf_r+0x1b0>
 80054a0:	9b03      	ldr	r3, [sp, #12]
 80054a2:	3307      	adds	r3, #7
 80054a4:	f023 0307 	bic.w	r3, r3, #7
 80054a8:	3308      	adds	r3, #8
 80054aa:	9303      	str	r3, [sp, #12]
 80054ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ae:	4433      	add	r3, r6
 80054b0:	9309      	str	r3, [sp, #36]	; 0x24
 80054b2:	e768      	b.n	8005386 <_svfiprintf_r+0x4e>
 80054b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80054b8:	460c      	mov	r4, r1
 80054ba:	2001      	movs	r0, #1
 80054bc:	e7a6      	b.n	800540c <_svfiprintf_r+0xd4>
 80054be:	2300      	movs	r3, #0
 80054c0:	3401      	adds	r4, #1
 80054c2:	9305      	str	r3, [sp, #20]
 80054c4:	4619      	mov	r1, r3
 80054c6:	f04f 0c0a 	mov.w	ip, #10
 80054ca:	4620      	mov	r0, r4
 80054cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054d0:	3a30      	subs	r2, #48	; 0x30
 80054d2:	2a09      	cmp	r2, #9
 80054d4:	d903      	bls.n	80054de <_svfiprintf_r+0x1a6>
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0c6      	beq.n	8005468 <_svfiprintf_r+0x130>
 80054da:	9105      	str	r1, [sp, #20]
 80054dc:	e7c4      	b.n	8005468 <_svfiprintf_r+0x130>
 80054de:	fb0c 2101 	mla	r1, ip, r1, r2
 80054e2:	4604      	mov	r4, r0
 80054e4:	2301      	movs	r3, #1
 80054e6:	e7f0      	b.n	80054ca <_svfiprintf_r+0x192>
 80054e8:	ab03      	add	r3, sp, #12
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	462a      	mov	r2, r5
 80054ee:	4b0f      	ldr	r3, [pc, #60]	; (800552c <_svfiprintf_r+0x1f4>)
 80054f0:	a904      	add	r1, sp, #16
 80054f2:	4638      	mov	r0, r7
 80054f4:	f3af 8000 	nop.w
 80054f8:	1c42      	adds	r2, r0, #1
 80054fa:	4606      	mov	r6, r0
 80054fc:	d1d6      	bne.n	80054ac <_svfiprintf_r+0x174>
 80054fe:	89ab      	ldrh	r3, [r5, #12]
 8005500:	065b      	lsls	r3, r3, #25
 8005502:	f53f af2d 	bmi.w	8005360 <_svfiprintf_r+0x28>
 8005506:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005508:	b01d      	add	sp, #116	; 0x74
 800550a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800550e:	ab03      	add	r3, sp, #12
 8005510:	9300      	str	r3, [sp, #0]
 8005512:	462a      	mov	r2, r5
 8005514:	4b05      	ldr	r3, [pc, #20]	; (800552c <_svfiprintf_r+0x1f4>)
 8005516:	a904      	add	r1, sp, #16
 8005518:	4638      	mov	r0, r7
 800551a:	f000 f879 	bl	8005610 <_printf_i>
 800551e:	e7eb      	b.n	80054f8 <_svfiprintf_r+0x1c0>
 8005520:	080059e8 	.word	0x080059e8
 8005524:	080059f2 	.word	0x080059f2
 8005528:	00000000 	.word	0x00000000
 800552c:	08005285 	.word	0x08005285
 8005530:	080059ee 	.word	0x080059ee

08005534 <_printf_common>:
 8005534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005538:	4616      	mov	r6, r2
 800553a:	4699      	mov	r9, r3
 800553c:	688a      	ldr	r2, [r1, #8]
 800553e:	690b      	ldr	r3, [r1, #16]
 8005540:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005544:	4293      	cmp	r3, r2
 8005546:	bfb8      	it	lt
 8005548:	4613      	movlt	r3, r2
 800554a:	6033      	str	r3, [r6, #0]
 800554c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005550:	4607      	mov	r7, r0
 8005552:	460c      	mov	r4, r1
 8005554:	b10a      	cbz	r2, 800555a <_printf_common+0x26>
 8005556:	3301      	adds	r3, #1
 8005558:	6033      	str	r3, [r6, #0]
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	0699      	lsls	r1, r3, #26
 800555e:	bf42      	ittt	mi
 8005560:	6833      	ldrmi	r3, [r6, #0]
 8005562:	3302      	addmi	r3, #2
 8005564:	6033      	strmi	r3, [r6, #0]
 8005566:	6825      	ldr	r5, [r4, #0]
 8005568:	f015 0506 	ands.w	r5, r5, #6
 800556c:	d106      	bne.n	800557c <_printf_common+0x48>
 800556e:	f104 0a19 	add.w	sl, r4, #25
 8005572:	68e3      	ldr	r3, [r4, #12]
 8005574:	6832      	ldr	r2, [r6, #0]
 8005576:	1a9b      	subs	r3, r3, r2
 8005578:	42ab      	cmp	r3, r5
 800557a:	dc26      	bgt.n	80055ca <_printf_common+0x96>
 800557c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005580:	1e13      	subs	r3, r2, #0
 8005582:	6822      	ldr	r2, [r4, #0]
 8005584:	bf18      	it	ne
 8005586:	2301      	movne	r3, #1
 8005588:	0692      	lsls	r2, r2, #26
 800558a:	d42b      	bmi.n	80055e4 <_printf_common+0xb0>
 800558c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005590:	4649      	mov	r1, r9
 8005592:	4638      	mov	r0, r7
 8005594:	47c0      	blx	r8
 8005596:	3001      	adds	r0, #1
 8005598:	d01e      	beq.n	80055d8 <_printf_common+0xa4>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	6922      	ldr	r2, [r4, #16]
 800559e:	f003 0306 	and.w	r3, r3, #6
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	bf02      	ittt	eq
 80055a6:	68e5      	ldreq	r5, [r4, #12]
 80055a8:	6833      	ldreq	r3, [r6, #0]
 80055aa:	1aed      	subeq	r5, r5, r3
 80055ac:	68a3      	ldr	r3, [r4, #8]
 80055ae:	bf0c      	ite	eq
 80055b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055b4:	2500      	movne	r5, #0
 80055b6:	4293      	cmp	r3, r2
 80055b8:	bfc4      	itt	gt
 80055ba:	1a9b      	subgt	r3, r3, r2
 80055bc:	18ed      	addgt	r5, r5, r3
 80055be:	2600      	movs	r6, #0
 80055c0:	341a      	adds	r4, #26
 80055c2:	42b5      	cmp	r5, r6
 80055c4:	d11a      	bne.n	80055fc <_printf_common+0xc8>
 80055c6:	2000      	movs	r0, #0
 80055c8:	e008      	b.n	80055dc <_printf_common+0xa8>
 80055ca:	2301      	movs	r3, #1
 80055cc:	4652      	mov	r2, sl
 80055ce:	4649      	mov	r1, r9
 80055d0:	4638      	mov	r0, r7
 80055d2:	47c0      	blx	r8
 80055d4:	3001      	adds	r0, #1
 80055d6:	d103      	bne.n	80055e0 <_printf_common+0xac>
 80055d8:	f04f 30ff 	mov.w	r0, #4294967295
 80055dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055e0:	3501      	adds	r5, #1
 80055e2:	e7c6      	b.n	8005572 <_printf_common+0x3e>
 80055e4:	18e1      	adds	r1, r4, r3
 80055e6:	1c5a      	adds	r2, r3, #1
 80055e8:	2030      	movs	r0, #48	; 0x30
 80055ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80055ee:	4422      	add	r2, r4
 80055f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80055f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80055f8:	3302      	adds	r3, #2
 80055fa:	e7c7      	b.n	800558c <_printf_common+0x58>
 80055fc:	2301      	movs	r3, #1
 80055fe:	4622      	mov	r2, r4
 8005600:	4649      	mov	r1, r9
 8005602:	4638      	mov	r0, r7
 8005604:	47c0      	blx	r8
 8005606:	3001      	adds	r0, #1
 8005608:	d0e6      	beq.n	80055d8 <_printf_common+0xa4>
 800560a:	3601      	adds	r6, #1
 800560c:	e7d9      	b.n	80055c2 <_printf_common+0x8e>
	...

08005610 <_printf_i>:
 8005610:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005614:	7e0f      	ldrb	r7, [r1, #24]
 8005616:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005618:	2f78      	cmp	r7, #120	; 0x78
 800561a:	4691      	mov	r9, r2
 800561c:	4680      	mov	r8, r0
 800561e:	460c      	mov	r4, r1
 8005620:	469a      	mov	sl, r3
 8005622:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005626:	d807      	bhi.n	8005638 <_printf_i+0x28>
 8005628:	2f62      	cmp	r7, #98	; 0x62
 800562a:	d80a      	bhi.n	8005642 <_printf_i+0x32>
 800562c:	2f00      	cmp	r7, #0
 800562e:	f000 80d4 	beq.w	80057da <_printf_i+0x1ca>
 8005632:	2f58      	cmp	r7, #88	; 0x58
 8005634:	f000 80c0 	beq.w	80057b8 <_printf_i+0x1a8>
 8005638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800563c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005640:	e03a      	b.n	80056b8 <_printf_i+0xa8>
 8005642:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005646:	2b15      	cmp	r3, #21
 8005648:	d8f6      	bhi.n	8005638 <_printf_i+0x28>
 800564a:	a101      	add	r1, pc, #4	; (adr r1, 8005650 <_printf_i+0x40>)
 800564c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005650:	080056a9 	.word	0x080056a9
 8005654:	080056bd 	.word	0x080056bd
 8005658:	08005639 	.word	0x08005639
 800565c:	08005639 	.word	0x08005639
 8005660:	08005639 	.word	0x08005639
 8005664:	08005639 	.word	0x08005639
 8005668:	080056bd 	.word	0x080056bd
 800566c:	08005639 	.word	0x08005639
 8005670:	08005639 	.word	0x08005639
 8005674:	08005639 	.word	0x08005639
 8005678:	08005639 	.word	0x08005639
 800567c:	080057c1 	.word	0x080057c1
 8005680:	080056e9 	.word	0x080056e9
 8005684:	0800577b 	.word	0x0800577b
 8005688:	08005639 	.word	0x08005639
 800568c:	08005639 	.word	0x08005639
 8005690:	080057e3 	.word	0x080057e3
 8005694:	08005639 	.word	0x08005639
 8005698:	080056e9 	.word	0x080056e9
 800569c:	08005639 	.word	0x08005639
 80056a0:	08005639 	.word	0x08005639
 80056a4:	08005783 	.word	0x08005783
 80056a8:	682b      	ldr	r3, [r5, #0]
 80056aa:	1d1a      	adds	r2, r3, #4
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	602a      	str	r2, [r5, #0]
 80056b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056b8:	2301      	movs	r3, #1
 80056ba:	e09f      	b.n	80057fc <_printf_i+0x1ec>
 80056bc:	6820      	ldr	r0, [r4, #0]
 80056be:	682b      	ldr	r3, [r5, #0]
 80056c0:	0607      	lsls	r7, r0, #24
 80056c2:	f103 0104 	add.w	r1, r3, #4
 80056c6:	6029      	str	r1, [r5, #0]
 80056c8:	d501      	bpl.n	80056ce <_printf_i+0xbe>
 80056ca:	681e      	ldr	r6, [r3, #0]
 80056cc:	e003      	b.n	80056d6 <_printf_i+0xc6>
 80056ce:	0646      	lsls	r6, r0, #25
 80056d0:	d5fb      	bpl.n	80056ca <_printf_i+0xba>
 80056d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80056d6:	2e00      	cmp	r6, #0
 80056d8:	da03      	bge.n	80056e2 <_printf_i+0xd2>
 80056da:	232d      	movs	r3, #45	; 0x2d
 80056dc:	4276      	negs	r6, r6
 80056de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e2:	485a      	ldr	r0, [pc, #360]	; (800584c <_printf_i+0x23c>)
 80056e4:	230a      	movs	r3, #10
 80056e6:	e012      	b.n	800570e <_printf_i+0xfe>
 80056e8:	682b      	ldr	r3, [r5, #0]
 80056ea:	6820      	ldr	r0, [r4, #0]
 80056ec:	1d19      	adds	r1, r3, #4
 80056ee:	6029      	str	r1, [r5, #0]
 80056f0:	0605      	lsls	r5, r0, #24
 80056f2:	d501      	bpl.n	80056f8 <_printf_i+0xe8>
 80056f4:	681e      	ldr	r6, [r3, #0]
 80056f6:	e002      	b.n	80056fe <_printf_i+0xee>
 80056f8:	0641      	lsls	r1, r0, #25
 80056fa:	d5fb      	bpl.n	80056f4 <_printf_i+0xe4>
 80056fc:	881e      	ldrh	r6, [r3, #0]
 80056fe:	4853      	ldr	r0, [pc, #332]	; (800584c <_printf_i+0x23c>)
 8005700:	2f6f      	cmp	r7, #111	; 0x6f
 8005702:	bf0c      	ite	eq
 8005704:	2308      	moveq	r3, #8
 8005706:	230a      	movne	r3, #10
 8005708:	2100      	movs	r1, #0
 800570a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800570e:	6865      	ldr	r5, [r4, #4]
 8005710:	60a5      	str	r5, [r4, #8]
 8005712:	2d00      	cmp	r5, #0
 8005714:	bfa2      	ittt	ge
 8005716:	6821      	ldrge	r1, [r4, #0]
 8005718:	f021 0104 	bicge.w	r1, r1, #4
 800571c:	6021      	strge	r1, [r4, #0]
 800571e:	b90e      	cbnz	r6, 8005724 <_printf_i+0x114>
 8005720:	2d00      	cmp	r5, #0
 8005722:	d04b      	beq.n	80057bc <_printf_i+0x1ac>
 8005724:	4615      	mov	r5, r2
 8005726:	fbb6 f1f3 	udiv	r1, r6, r3
 800572a:	fb03 6711 	mls	r7, r3, r1, r6
 800572e:	5dc7      	ldrb	r7, [r0, r7]
 8005730:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005734:	4637      	mov	r7, r6
 8005736:	42bb      	cmp	r3, r7
 8005738:	460e      	mov	r6, r1
 800573a:	d9f4      	bls.n	8005726 <_printf_i+0x116>
 800573c:	2b08      	cmp	r3, #8
 800573e:	d10b      	bne.n	8005758 <_printf_i+0x148>
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	07de      	lsls	r6, r3, #31
 8005744:	d508      	bpl.n	8005758 <_printf_i+0x148>
 8005746:	6923      	ldr	r3, [r4, #16]
 8005748:	6861      	ldr	r1, [r4, #4]
 800574a:	4299      	cmp	r1, r3
 800574c:	bfde      	ittt	le
 800574e:	2330      	movle	r3, #48	; 0x30
 8005750:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005754:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005758:	1b52      	subs	r2, r2, r5
 800575a:	6122      	str	r2, [r4, #16]
 800575c:	f8cd a000 	str.w	sl, [sp]
 8005760:	464b      	mov	r3, r9
 8005762:	aa03      	add	r2, sp, #12
 8005764:	4621      	mov	r1, r4
 8005766:	4640      	mov	r0, r8
 8005768:	f7ff fee4 	bl	8005534 <_printf_common>
 800576c:	3001      	adds	r0, #1
 800576e:	d14a      	bne.n	8005806 <_printf_i+0x1f6>
 8005770:	f04f 30ff 	mov.w	r0, #4294967295
 8005774:	b004      	add	sp, #16
 8005776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	f043 0320 	orr.w	r3, r3, #32
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	4833      	ldr	r0, [pc, #204]	; (8005850 <_printf_i+0x240>)
 8005784:	2778      	movs	r7, #120	; 0x78
 8005786:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	6829      	ldr	r1, [r5, #0]
 800578e:	061f      	lsls	r7, r3, #24
 8005790:	f851 6b04 	ldr.w	r6, [r1], #4
 8005794:	d402      	bmi.n	800579c <_printf_i+0x18c>
 8005796:	065f      	lsls	r7, r3, #25
 8005798:	bf48      	it	mi
 800579a:	b2b6      	uxthmi	r6, r6
 800579c:	07df      	lsls	r7, r3, #31
 800579e:	bf48      	it	mi
 80057a0:	f043 0320 	orrmi.w	r3, r3, #32
 80057a4:	6029      	str	r1, [r5, #0]
 80057a6:	bf48      	it	mi
 80057a8:	6023      	strmi	r3, [r4, #0]
 80057aa:	b91e      	cbnz	r6, 80057b4 <_printf_i+0x1a4>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	f023 0320 	bic.w	r3, r3, #32
 80057b2:	6023      	str	r3, [r4, #0]
 80057b4:	2310      	movs	r3, #16
 80057b6:	e7a7      	b.n	8005708 <_printf_i+0xf8>
 80057b8:	4824      	ldr	r0, [pc, #144]	; (800584c <_printf_i+0x23c>)
 80057ba:	e7e4      	b.n	8005786 <_printf_i+0x176>
 80057bc:	4615      	mov	r5, r2
 80057be:	e7bd      	b.n	800573c <_printf_i+0x12c>
 80057c0:	682b      	ldr	r3, [r5, #0]
 80057c2:	6826      	ldr	r6, [r4, #0]
 80057c4:	6961      	ldr	r1, [r4, #20]
 80057c6:	1d18      	adds	r0, r3, #4
 80057c8:	6028      	str	r0, [r5, #0]
 80057ca:	0635      	lsls	r5, r6, #24
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	d501      	bpl.n	80057d4 <_printf_i+0x1c4>
 80057d0:	6019      	str	r1, [r3, #0]
 80057d2:	e002      	b.n	80057da <_printf_i+0x1ca>
 80057d4:	0670      	lsls	r0, r6, #25
 80057d6:	d5fb      	bpl.n	80057d0 <_printf_i+0x1c0>
 80057d8:	8019      	strh	r1, [r3, #0]
 80057da:	2300      	movs	r3, #0
 80057dc:	6123      	str	r3, [r4, #16]
 80057de:	4615      	mov	r5, r2
 80057e0:	e7bc      	b.n	800575c <_printf_i+0x14c>
 80057e2:	682b      	ldr	r3, [r5, #0]
 80057e4:	1d1a      	adds	r2, r3, #4
 80057e6:	602a      	str	r2, [r5, #0]
 80057e8:	681d      	ldr	r5, [r3, #0]
 80057ea:	6862      	ldr	r2, [r4, #4]
 80057ec:	2100      	movs	r1, #0
 80057ee:	4628      	mov	r0, r5
 80057f0:	f7fa fcf6 	bl	80001e0 <memchr>
 80057f4:	b108      	cbz	r0, 80057fa <_printf_i+0x1ea>
 80057f6:	1b40      	subs	r0, r0, r5
 80057f8:	6060      	str	r0, [r4, #4]
 80057fa:	6863      	ldr	r3, [r4, #4]
 80057fc:	6123      	str	r3, [r4, #16]
 80057fe:	2300      	movs	r3, #0
 8005800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005804:	e7aa      	b.n	800575c <_printf_i+0x14c>
 8005806:	6923      	ldr	r3, [r4, #16]
 8005808:	462a      	mov	r2, r5
 800580a:	4649      	mov	r1, r9
 800580c:	4640      	mov	r0, r8
 800580e:	47d0      	blx	sl
 8005810:	3001      	adds	r0, #1
 8005812:	d0ad      	beq.n	8005770 <_printf_i+0x160>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	079b      	lsls	r3, r3, #30
 8005818:	d413      	bmi.n	8005842 <_printf_i+0x232>
 800581a:	68e0      	ldr	r0, [r4, #12]
 800581c:	9b03      	ldr	r3, [sp, #12]
 800581e:	4298      	cmp	r0, r3
 8005820:	bfb8      	it	lt
 8005822:	4618      	movlt	r0, r3
 8005824:	e7a6      	b.n	8005774 <_printf_i+0x164>
 8005826:	2301      	movs	r3, #1
 8005828:	4632      	mov	r2, r6
 800582a:	4649      	mov	r1, r9
 800582c:	4640      	mov	r0, r8
 800582e:	47d0      	blx	sl
 8005830:	3001      	adds	r0, #1
 8005832:	d09d      	beq.n	8005770 <_printf_i+0x160>
 8005834:	3501      	adds	r5, #1
 8005836:	68e3      	ldr	r3, [r4, #12]
 8005838:	9903      	ldr	r1, [sp, #12]
 800583a:	1a5b      	subs	r3, r3, r1
 800583c:	42ab      	cmp	r3, r5
 800583e:	dcf2      	bgt.n	8005826 <_printf_i+0x216>
 8005840:	e7eb      	b.n	800581a <_printf_i+0x20a>
 8005842:	2500      	movs	r5, #0
 8005844:	f104 0619 	add.w	r6, r4, #25
 8005848:	e7f5      	b.n	8005836 <_printf_i+0x226>
 800584a:	bf00      	nop
 800584c:	080059f9 	.word	0x080059f9
 8005850:	08005a0a 	.word	0x08005a0a

08005854 <memmove>:
 8005854:	4288      	cmp	r0, r1
 8005856:	b510      	push	{r4, lr}
 8005858:	eb01 0402 	add.w	r4, r1, r2
 800585c:	d902      	bls.n	8005864 <memmove+0x10>
 800585e:	4284      	cmp	r4, r0
 8005860:	4623      	mov	r3, r4
 8005862:	d807      	bhi.n	8005874 <memmove+0x20>
 8005864:	1e43      	subs	r3, r0, #1
 8005866:	42a1      	cmp	r1, r4
 8005868:	d008      	beq.n	800587c <memmove+0x28>
 800586a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800586e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005872:	e7f8      	b.n	8005866 <memmove+0x12>
 8005874:	4402      	add	r2, r0
 8005876:	4601      	mov	r1, r0
 8005878:	428a      	cmp	r2, r1
 800587a:	d100      	bne.n	800587e <memmove+0x2a>
 800587c:	bd10      	pop	{r4, pc}
 800587e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005882:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005886:	e7f7      	b.n	8005878 <memmove+0x24>

08005888 <memcpy>:
 8005888:	440a      	add	r2, r1
 800588a:	4291      	cmp	r1, r2
 800588c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005890:	d100      	bne.n	8005894 <memcpy+0xc>
 8005892:	4770      	bx	lr
 8005894:	b510      	push	{r4, lr}
 8005896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800589a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800589e:	4291      	cmp	r1, r2
 80058a0:	d1f9      	bne.n	8005896 <memcpy+0xe>
 80058a2:	bd10      	pop	{r4, pc}

080058a4 <_realloc_r>:
 80058a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058a8:	4680      	mov	r8, r0
 80058aa:	4614      	mov	r4, r2
 80058ac:	460e      	mov	r6, r1
 80058ae:	b921      	cbnz	r1, 80058ba <_realloc_r+0x16>
 80058b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058b4:	4611      	mov	r1, r2
 80058b6:	f7ff bbb1 	b.w	800501c <_malloc_r>
 80058ba:	b92a      	cbnz	r2, 80058c8 <_realloc_r+0x24>
 80058bc:	f7ff fc96 	bl	80051ec <_free_r>
 80058c0:	4625      	mov	r5, r4
 80058c2:	4628      	mov	r0, r5
 80058c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058c8:	f000 f81b 	bl	8005902 <_malloc_usable_size_r>
 80058cc:	4284      	cmp	r4, r0
 80058ce:	4607      	mov	r7, r0
 80058d0:	d802      	bhi.n	80058d8 <_realloc_r+0x34>
 80058d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80058d6:	d812      	bhi.n	80058fe <_realloc_r+0x5a>
 80058d8:	4621      	mov	r1, r4
 80058da:	4640      	mov	r0, r8
 80058dc:	f7ff fb9e 	bl	800501c <_malloc_r>
 80058e0:	4605      	mov	r5, r0
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d0ed      	beq.n	80058c2 <_realloc_r+0x1e>
 80058e6:	42bc      	cmp	r4, r7
 80058e8:	4622      	mov	r2, r4
 80058ea:	4631      	mov	r1, r6
 80058ec:	bf28      	it	cs
 80058ee:	463a      	movcs	r2, r7
 80058f0:	f7ff ffca 	bl	8005888 <memcpy>
 80058f4:	4631      	mov	r1, r6
 80058f6:	4640      	mov	r0, r8
 80058f8:	f7ff fc78 	bl	80051ec <_free_r>
 80058fc:	e7e1      	b.n	80058c2 <_realloc_r+0x1e>
 80058fe:	4635      	mov	r5, r6
 8005900:	e7df      	b.n	80058c2 <_realloc_r+0x1e>

08005902 <_malloc_usable_size_r>:
 8005902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005906:	1f18      	subs	r0, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	bfbc      	itt	lt
 800590c:	580b      	ldrlt	r3, [r1, r0]
 800590e:	18c0      	addlt	r0, r0, r3
 8005910:	4770      	bx	lr
	...

08005914 <_init>:
 8005914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005916:	bf00      	nop
 8005918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800591a:	bc08      	pop	{r3}
 800591c:	469e      	mov	lr, r3
 800591e:	4770      	bx	lr

08005920 <_fini>:
 8005920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005922:	bf00      	nop
 8005924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005926:	bc08      	pop	{r3}
 8005928:	469e      	mov	lr, r3
 800592a:	4770      	bx	lr

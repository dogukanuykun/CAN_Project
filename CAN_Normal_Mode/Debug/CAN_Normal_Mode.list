
CAN_Normal_Mode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b670  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800b800  0800b800  0000c800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b928  0800b928  0000d07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b928  0800b928  0000c928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b930  0800b930  0000d07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b930  0800b930  0000c930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b934  0800b934  0000c934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800b938  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d07c  2**0
                  CONTENTS
 10 .bss          00000a8c  2000007c  2000007c  0000d07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b08  20000b08  0000d07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b1d0  00000000  00000000  0000d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b7f  00000000  00000000  0002827c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c8  00000000  00000000  0002be00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011c8  00000000  00000000  0002d4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000249e3  00000000  00000000  0002e690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c9e8  00000000  00000000  00053073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d55c4  00000000  00000000  0006fa5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014501f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006708  00000000  00000000  00145064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000053  00000000  00000000  0014b76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b7e8 	.word	0x0800b7e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800b7e8 	.word	0x0800b7e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f001 f86e 	bl	8001654 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f84c 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f9b8 	bl	80008f0 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8000580:	f00a f978 	bl	800a874 <MX_USB_HOST_Init>
  MX_CAN1_Init();
 8000584:	f000 f8b0 	bl	80006e8 <MX_CAN1_Init>
  MX_USART2_UART_Init();
 8000588:	f000 f988 	bl	800089c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800058c:	f000 f8e2 	bl	8000754 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000590:	f000 f90e 	bl	80007b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


  lcd_init();
 8000594:	f000 fd69 	bl	800106a <lcd_init>

  CAN_Filter_Config();
 8000598:	f000 fad8 	bl	8000b4c <CAN_Filter_Config>


  if(HAL_CAN_ActivateNotification(&hcan1,CAN_IT_TX_MAILBOX_EMPTY | CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_BUSOFF) != HAL_OK)
 800059c:	f240 4103 	movw	r1, #1027	@ 0x403
 80005a0:	4816      	ldr	r0, [pc, #88]	@ (80005fc <main+0x8c>)
 80005a2:	f001 fc2f 	bl	8001e04 <HAL_CAN_ActivateNotification>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <main+0x40>
  {
	  Error_Handler();
 80005ac:	f000 fdb0 	bl	8001110 <Error_Handler>
  }


  if( HAL_CAN_Start(&hcan1) != HAL_OK)
 80005b0:	4812      	ldr	r0, [pc, #72]	@ (80005fc <main+0x8c>)
 80005b2:	f001 fac1 	bl	8001b38 <HAL_CAN_Start>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <main+0x50>
  {
	  Error_Handler();
 80005bc:	f000 fda8 	bl	8001110 <Error_Handler>
  }

  sprintf(msg,"Started\r\n");
 80005c0:	490f      	ldr	r1, [pc, #60]	@ (8000600 <main+0x90>)
 80005c2:	4810      	ldr	r0, [pc, #64]	@ (8000604 <main+0x94>)
 80005c4:	f00a fd1e 	bl	800b004 <siprintf>
  HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 80005c8:	480e      	ldr	r0, [pc, #56]	@ (8000604 <main+0x94>)
 80005ca:	f7ff fe01 	bl	80001d0 <strlen>
 80005ce:	4603      	mov	r3, r0
 80005d0:	b29a      	uxth	r2, r3
 80005d2:	f04f 33ff 	mov.w	r3, #4294967295
 80005d6:	490b      	ldr	r1, [pc, #44]	@ (8000604 <main+0x94>)
 80005d8:	480b      	ldr	r0, [pc, #44]	@ (8000608 <main+0x98>)
 80005da:	f006 fba1 	bl	8006d20 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005de:	f00a f96f 	bl	800a8c0 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    distanceAlarm(delay);
 80005e2:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <main+0x9c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fc72 	bl	8000ed0 <distanceAlarm>
    checkFire(fire);
 80005ec:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <main+0xa0>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fc93 	bl	8000f1c <checkFire>
    MX_USB_HOST_Process();
 80005f6:	bf00      	nop
 80005f8:	e7f1      	b.n	80005de <main+0x6e>
 80005fa:	bf00      	nop
 80005fc:	20000098 	.word	0x20000098
 8000600:	0800b800 	.word	0x0800b800
 8000604:	200001c8 	.word	0x200001c8
 8000608:	2000015c 	.word	0x2000015c
 800060c:	200001c0 	.word	0x200001c0
 8000610:	200001c4 	.word	0x200001c4

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	@ 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	@ 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f00a fd0e 	bl	800b044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b28      	ldr	r3, [pc, #160]	@ (80006e0 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000640:	4a27      	ldr	r2, [pc, #156]	@ (80006e0 <SystemClock_Config+0xcc>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	@ 0x40
 8000648:	4b25      	ldr	r3, [pc, #148]	@ (80006e0 <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b22      	ldr	r3, [pc, #136]	@ (80006e4 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a21      	ldr	r2, [pc, #132]	@ (80006e4 <SystemClock_Config+0xd0>)
 800065e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	@ (80006e4 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000674:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000678:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000684:	2308      	movs	r3, #8
 8000686:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000688:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800068c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000692:	2307      	movs	r3, #7
 8000694:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	4618      	mov	r0, r3
 800069c:	f004 fe90 	bl	80053c0 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006a6:	f000 fd33 	bl	8001110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	230f      	movs	r3, #15
 80006ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ae:	2302      	movs	r3, #2
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80006b6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80006ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2105      	movs	r1, #5
 80006c8:	4618      	mov	r0, r3
 80006ca:	f005 f8f1 	bl	80058b0 <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006d4:	f000 fd1c 	bl	8001110 <Error_Handler>
  }
}
 80006d8:	bf00      	nop
 80006da:	3750      	adds	r7, #80	@ 0x50
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006ec:	4b17      	ldr	r3, [pc, #92]	@ (800074c <MX_CAN1_Init+0x64>)
 80006ee:	4a18      	ldr	r2, [pc, #96]	@ (8000750 <MX_CAN1_Init+0x68>)
 80006f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80006f2:	4b16      	ldr	r3, [pc, #88]	@ (800074c <MX_CAN1_Init+0x64>)
 80006f4:	2206      	movs	r2, #6
 80006f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006f8:	4b14      	ldr	r3, [pc, #80]	@ (800074c <MX_CAN1_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006fe:	4b13      	ldr	r3, [pc, #76]	@ (800074c <MX_CAN1_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_CAN1_Init+0x64>)
 8000706:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800070a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_CAN1_Init+0x64>)
 800070e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000712:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000714:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <MX_CAN1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_CAN1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_CAN1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_CAN1_Init+0x64>)
 8000728:	2200      	movs	r2, #0
 800072a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_CAN1_Init+0x64>)
 800072e:	2200      	movs	r2, #0
 8000730:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_CAN1_Init+0x64>)
 8000734:	2200      	movs	r2, #0
 8000736:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_CAN1_Init+0x64>)
 800073a:	f001 f821 	bl	8001780 <HAL_CAN_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000744:	f000 fce4 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000098 	.word	0x20000098
 8000750:	40006400 	.word	0x40006400

08000754 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <MX_I2C1_Init+0x50>)
 800075a:	4a13      	ldr	r2, [pc, #76]	@ (80007a8 <MX_I2C1_Init+0x54>)
 800075c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_I2C1_Init+0x50>)
 8000760:	4a12      	ldr	r2, [pc, #72]	@ (80007ac <MX_I2C1_Init+0x58>)
 8000762:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_I2C1_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_I2C1_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_I2C1_Init+0x50>)
 8000772:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000776:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000778:	4b0a      	ldr	r3, [pc, #40]	@ (80007a4 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <MX_I2C1_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_I2C1_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <MX_I2C1_Init+0x50>)
 8000792:	f004 f977 	bl	8004a84 <HAL_I2C_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800079c:	f000 fcb8 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200000c0 	.word	0x200000c0
 80007a8:	40005400 	.word	0x40005400
 80007ac:	000186a0 	.word	0x000186a0

080007b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08e      	sub	sp, #56	@ 0x38
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c4:	f107 0320 	add.w	r3, r7, #32
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	605a      	str	r2, [r3, #4]
 80007d6:	609a      	str	r2, [r3, #8]
 80007d8:	60da      	str	r2, [r3, #12]
 80007da:	611a      	str	r2, [r3, #16]
 80007dc:	615a      	str	r2, [r3, #20]
 80007de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000898 <MX_TIM2_Init+0xe8>)
 80007e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <MX_TIM2_Init+0xe8>)
 80007ea:	2253      	movs	r2, #83	@ 0x53
 80007ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000898 <MX_TIM2_Init+0xe8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80007f4:	4b28      	ldr	r3, [pc, #160]	@ (8000898 <MX_TIM2_Init+0xe8>)
 80007f6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80007fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fc:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <MX_TIM2_Init+0xe8>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000802:	4b25      	ldr	r3, [pc, #148]	@ (8000898 <MX_TIM2_Init+0xe8>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000808:	4823      	ldr	r0, [pc, #140]	@ (8000898 <MX_TIM2_Init+0xe8>)
 800080a:	f005 fa71 	bl	8005cf0 <HAL_TIM_Base_Init>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000814:	f000 fc7c 	bl	8001110 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000818:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800081e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000822:	4619      	mov	r1, r3
 8000824:	481c      	ldr	r0, [pc, #112]	@ (8000898 <MX_TIM2_Init+0xe8>)
 8000826:	f005 fd85 	bl	8006334 <HAL_TIM_ConfigClockSource>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000830:	f000 fc6e 	bl	8001110 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000834:	4818      	ldr	r0, [pc, #96]	@ (8000898 <MX_TIM2_Init+0xe8>)
 8000836:	f005 faaa 	bl	8005d8e <HAL_TIM_PWM_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000840:	f000 fc66 	bl	8001110 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800084c:	f107 0320 	add.w	r3, r7, #32
 8000850:	4619      	mov	r1, r3
 8000852:	4811      	ldr	r0, [pc, #68]	@ (8000898 <MX_TIM2_Init+0xe8>)
 8000854:	f006 f984 	bl	8006b60 <HAL_TIMEx_MasterConfigSynchronization>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800085e:	f000 fc57 	bl	8001110 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000862:	2360      	movs	r3, #96	@ 0x60
 8000864:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	2204      	movs	r2, #4
 8000876:	4619      	mov	r1, r3
 8000878:	4807      	ldr	r0, [pc, #28]	@ (8000898 <MX_TIM2_Init+0xe8>)
 800087a:	f005 fc99 	bl	80061b0 <HAL_TIM_PWM_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000884:	f000 fc44 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000888:	4803      	ldr	r0, [pc, #12]	@ (8000898 <MX_TIM2_Init+0xe8>)
 800088a:	f000 fd7b 	bl	8001384 <HAL_TIM_MspPostInit>

}
 800088e:	bf00      	nop
 8000890:	3738      	adds	r7, #56	@ 0x38
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000114 	.word	0x20000114

0800089c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <MX_USART2_UART_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008d4:	f006 f9d4 	bl	8006c80 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008de:	f000 fc17 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	2000015c 	.word	0x2000015c
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	@ 0x30
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	61bb      	str	r3, [r7, #24]
 800090a:	4b8a      	ldr	r3, [pc, #552]	@ (8000b34 <MX_GPIO_Init+0x244>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a89      	ldr	r2, [pc, #548]	@ (8000b34 <MX_GPIO_Init+0x244>)
 8000910:	f043 0310 	orr.w	r3, r3, #16
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b87      	ldr	r3, [pc, #540]	@ (8000b34 <MX_GPIO_Init+0x244>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	61bb      	str	r3, [r7, #24]
 8000920:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
 8000926:	4b83      	ldr	r3, [pc, #524]	@ (8000b34 <MX_GPIO_Init+0x244>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a82      	ldr	r2, [pc, #520]	@ (8000b34 <MX_GPIO_Init+0x244>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b80      	ldr	r3, [pc, #512]	@ (8000b34 <MX_GPIO_Init+0x244>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
 8000942:	4b7c      	ldr	r3, [pc, #496]	@ (8000b34 <MX_GPIO_Init+0x244>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a7b      	ldr	r2, [pc, #492]	@ (8000b34 <MX_GPIO_Init+0x244>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b79      	ldr	r3, [pc, #484]	@ (8000b34 <MX_GPIO_Init+0x244>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	4b75      	ldr	r3, [pc, #468]	@ (8000b34 <MX_GPIO_Init+0x244>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a74      	ldr	r2, [pc, #464]	@ (8000b34 <MX_GPIO_Init+0x244>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b72      	ldr	r3, [pc, #456]	@ (8000b34 <MX_GPIO_Init+0x244>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
 800097a:	4b6e      	ldr	r3, [pc, #440]	@ (8000b34 <MX_GPIO_Init+0x244>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a6d      	ldr	r2, [pc, #436]	@ (8000b34 <MX_GPIO_Init+0x244>)
 8000980:	f043 0302 	orr.w	r3, r3, #2
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b6b      	ldr	r3, [pc, #428]	@ (8000b34 <MX_GPIO_Init+0x244>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0302 	and.w	r3, r3, #2
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b67      	ldr	r3, [pc, #412]	@ (8000b34 <MX_GPIO_Init+0x244>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a66      	ldr	r2, [pc, #408]	@ (8000b34 <MX_GPIO_Init+0x244>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b64      	ldr	r3, [pc, #400]	@ (8000b34 <MX_GPIO_Init+0x244>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2108      	movs	r1, #8
 80009b2:	4861      	ldr	r0, [pc, #388]	@ (8000b38 <MX_GPIO_Init+0x248>)
 80009b4:	f001 ff0e 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2101      	movs	r1, #1
 80009bc:	485f      	ldr	r0, [pc, #380]	@ (8000b3c <MX_GPIO_Init+0x24c>)
 80009be:	f001 ff09 	bl	80027d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Buzzer_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80009c2:	2200      	movs	r2, #0
 80009c4:	f64f 0110 	movw	r1, #63504	@ 0xf810
 80009c8:	485d      	ldr	r0, [pc, #372]	@ (8000b40 <MX_GPIO_Init+0x250>)
 80009ca:	f001 ff03 	bl	80027d4 <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009ce:	2308      	movs	r3, #8
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4854      	ldr	r0, [pc, #336]	@ (8000b38 <MX_GPIO_Init+0x248>)
 80009e6:	f001 fd59 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	484e      	ldr	r0, [pc, #312]	@ (8000b3c <MX_GPIO_Init+0x24c>)
 8000a02:	f001 fd4b 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a06:	2308      	movs	r3, #8
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a16:	2305      	movs	r3, #5
 8000a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4846      	ldr	r0, [pc, #280]	@ (8000b3c <MX_GPIO_Init+0x24c>)
 8000a22:	f001 fd3b 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a2a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a34:	f107 031c 	add.w	r3, r7, #28
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4842      	ldr	r0, [pc, #264]	@ (8000b44 <MX_GPIO_Init+0x254>)
 8000a3c:	f001 fd2e 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a40:	2310      	movs	r3, #16
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a50:	2306      	movs	r3, #6
 8000a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 031c 	add.w	r3, r7, #28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	483a      	ldr	r0, [pc, #232]	@ (8000b44 <MX_GPIO_Init+0x254>)
 8000a5c:	f001 fd1e 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a60:	23e0      	movs	r3, #224	@ 0xe0
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a70:	2305      	movs	r3, #5
 8000a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a74:	f107 031c 	add.w	r3, r7, #28
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4832      	ldr	r0, [pc, #200]	@ (8000b44 <MX_GPIO_Init+0x254>)
 8000a7c:	f001 fd0e 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a80:	2304      	movs	r3, #4
 8000a82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	482d      	ldr	r0, [pc, #180]	@ (8000b48 <MX_GPIO_Init+0x258>)
 8000a94:	f001 fd02 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000aae:	f107 031c 	add.w	r3, r7, #28
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4824      	ldr	r0, [pc, #144]	@ (8000b48 <MX_GPIO_Init+0x258>)
 8000ab6:	f001 fcf1 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : Buzzer_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD6_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000aba:	f64f 0310 	movw	r3, #63504	@ 0xf810
 8000abe:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000acc:	f107 031c 	add.w	r3, r7, #28
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	481b      	ldr	r0, [pc, #108]	@ (8000b40 <MX_GPIO_Init+0x250>)
 8000ad4:	f001 fce2 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ad8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000aea:	2306      	movs	r3, #6
 8000aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	4619      	mov	r1, r3
 8000af4:	4811      	ldr	r0, [pc, #68]	@ (8000b3c <MX_GPIO_Init+0x24c>)
 8000af6:	f001 fcd1 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000afa:	2320      	movs	r3, #32
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <MX_GPIO_Init+0x250>)
 8000b0e:	f001 fcc5 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000b12:	2302      	movs	r3, #2
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b16:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 031c 	add.w	r3, r7, #28
 8000b24:	4619      	mov	r1, r3
 8000b26:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <MX_GPIO_Init+0x248>)
 8000b28:	f001 fcb8 	bl	800249c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2c:	bf00      	nop
 8000b2e:	3730      	adds	r7, #48	@ 0x30
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	40020c00 	.word	0x40020c00
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40020400 	.word	0x40020400

08000b4c <CAN_Filter_Config>:

/* USER CODE BEGIN 4 */

static void CAN_Filter_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	@ 0x28
 8000b50:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef can1_filter_init;

	can1_filter_init.FilterActivation = ENABLE;
 8000b52:	2301      	movs	r3, #1
 8000b54:	623b      	str	r3, [r7, #32]
	can1_filter_init.FilterBank  = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
	can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
	can1_filter_init.FilterIdHigh = 0x0000;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
	can1_filter_init.FilterIdLow = 0x0000;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
	can1_filter_init.FilterMaskIdHigh = 0x0000;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
	can1_filter_init.FilterMaskIdLow = 0x0000;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
	can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
	can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b72:	2301      	movs	r3, #1
 8000b74:	61fb      	str	r3, [r7, #28]

	if( HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK)
 8000b76:	463b      	mov	r3, r7
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4806      	ldr	r0, [pc, #24]	@ (8000b94 <CAN_Filter_Config+0x48>)
 8000b7c:	f000 fefc 	bl	8001978 <HAL_CAN_ConfigFilter>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <CAN_Filter_Config+0x3e>
	{
		Error_Handler();
 8000b86:	f000 fac3 	bl	8001110 <Error_Handler>
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	@ 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000098 	.word	0x20000098

08000b98 <HAL_CAN_TxMailbox0CompleteCallback>:


void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b090      	sub	sp, #64	@ 0x40
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

	char msg[50];
	sprintf(msg,"Message Transmitted:M0\r\n");
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	490a      	ldr	r1, [pc, #40]	@ (8000bd0 <HAL_CAN_TxMailbox0CompleteCallback+0x38>)
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f00a fa2c 	bl	800b004 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fb0d 	bl	80001d0 <strlen>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	b29a      	uxth	r2, r3
 8000bba:	f107 010c 	add.w	r1, r7, #12
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc2:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <HAL_CAN_TxMailbox0CompleteCallback+0x3c>)
 8000bc4:	f006 f8ac 	bl	8006d20 <HAL_UART_Transmit>

}
 8000bc8:	bf00      	nop
 8000bca:	3740      	adds	r7, #64	@ 0x40
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	0800b80c 	.word	0x0800b80c
 8000bd4:	2000015c 	.word	0x2000015c

08000bd8 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b090      	sub	sp, #64	@ 0x40
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg,"Message Transmitted:M1\r\n");
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	490a      	ldr	r1, [pc, #40]	@ (8000c10 <HAL_CAN_TxMailbox1CompleteCallback+0x38>)
 8000be6:	4618      	mov	r0, r3
 8000be8:	f00a fa0c 	bl	800b004 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff faed 	bl	80001d0 <strlen>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	f107 010c 	add.w	r1, r7, #12
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	4804      	ldr	r0, [pc, #16]	@ (8000c14 <HAL_CAN_TxMailbox1CompleteCallback+0x3c>)
 8000c04:	f006 f88c 	bl	8006d20 <HAL_UART_Transmit>

}
 8000c08:	bf00      	nop
 8000c0a:	3740      	adds	r7, #64	@ 0x40
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	0800b828 	.word	0x0800b828
 8000c14:	2000015c 	.word	0x2000015c

08000c18 <HAL_CAN_TxMailbox2CompleteCallback>:


void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b090      	sub	sp, #64	@ 0x40
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	char msg[50];
	sprintf(msg,"Message Transmitted:M2\r\n");
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	490a      	ldr	r1, [pc, #40]	@ (8000c50 <HAL_CAN_TxMailbox2CompleteCallback+0x38>)
 8000c26:	4618      	mov	r0, r3
 8000c28:	f00a f9ec 	bl	800b004 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff facd 	bl	80001d0 <strlen>
 8000c36:	4603      	mov	r3, r0
 8000c38:	b29a      	uxth	r2, r3
 8000c3a:	f107 010c 	add.w	r1, r7, #12
 8000c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c42:	4804      	ldr	r0, [pc, #16]	@ (8000c54 <HAL_CAN_TxMailbox2CompleteCallback+0x3c>)
 8000c44:	f006 f86c 	bl	8006d20 <HAL_UART_Transmit>
}
 8000c48:	bf00      	nop
 8000c4a:	3740      	adds	r7, #64	@ 0x40
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	0800b844 	.word	0x0800b844
 8000c54:	2000015c 	.word	0x2000015c

08000c58 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b094      	sub	sp, #80	@ 0x50
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

	uint8_t rcvd_msg[8];

	char msg[50];

	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,rcvd_msg) != HAL_OK)
 8000c60:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c64:	4a64      	ldr	r2, [pc, #400]	@ (8000df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000c66:	2100      	movs	r1, #0
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f000 ffa9 	bl	8001bc0 <HAL_CAN_GetRxMessage>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <HAL_CAN_RxFifo0MsgPendingCallback+0x20>
	{
		Error_Handler();
 8000c74:	f000 fa4c 	bl	8001110 <Error_Handler>
	}

	if ( RxHeader.StdId == 0x651 && RxHeader.RTR == CAN_RTR_DATA ) //its a reply ( data frame) by F103_1 to F407 DISTANCE SENSOR
 8000c78:	4b5f      	ldr	r3, [pc, #380]	@ (8000df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f240 6251 	movw	r2, #1617	@ 0x651
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d133      	bne.n	8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
 8000c84:	4b5c      	ldr	r3, [pc, #368]	@ (8000df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d12f      	bne.n	8000cec <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
	{
		uint16_t response = (rcvd_msg[0] << 8) | rcvd_msg[1];
 8000c8c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000c90:	021b      	lsls	r3, r3, #8
 8000c92:	b21a      	sxth	r2, r3
 8000c94:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8000c98:	b21b      	sxth	r3, r3
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
		distanceAction(response);
 8000ca2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f8d2 	bl	8000e50 <distanceAction>
		sprintf(msg,"Distance : %dcm\r\n",response);
 8000cac:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	4951      	ldr	r1, [pc, #324]	@ (8000dfc <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f00a f9a4 	bl	800b004 <siprintf>
		HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fa85 	bl	80001d0 <strlen>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	f107 010c 	add.w	r1, r7, #12
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	484b      	ldr	r0, [pc, #300]	@ (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8000cd4:	f006 f824 	bl	8006d20 <HAL_UART_Transmit>
		lcd_put_cur(0, 0);
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f000 f9a6 	bl	800102c <lcd_put_cur>
		lcd_send_string(msg);
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f000 f9fd 	bl	80010e4 <lcd_send_string>
	{
 8000cea:	e081      	b.n	8000df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>

	}


	else if ( RxHeader.StdId == 0x652 && RxHeader.RTR == CAN_RTR_DATA ) //its a reply ( data frame) by F103_2 to F407 SOUND SENSOR
 8000cec:	4b42      	ldr	r3, [pc, #264]	@ (8000df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f240 6252 	movw	r2, #1618	@ 0x652
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d137      	bne.n	8000d68 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
 8000cf8:	4b3f      	ldr	r3, [pc, #252]	@ (8000df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d133      	bne.n	8000d68 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
	{
		uint16_t response = rcvd_msg[0];
 8000d00:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000d04:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		if (response) {
 8000d08:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d06e      	beq.n	8000dee <HAL_CAN_RxFifo0MsgPendingCallback+0x196>

			sprintf(msg,"High Noise Level!\r\n");
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	493b      	ldr	r1, [pc, #236]	@ (8000e04 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000d16:	4618      	mov	r0, r3
 8000d18:	f00a f974 	bl	800b004 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fa55 	bl	80001d0 <strlen>
 8000d26:	4603      	mov	r3, r0
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	f107 010c 	add.w	r1, r7, #12
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	4833      	ldr	r0, [pc, #204]	@ (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8000d34:	f005 fff4 	bl	8006d20 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fa47 	bl	80001d0 <strlen>
 8000d42:	4603      	mov	r3, r0
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	f107 010c 	add.w	r1, r7, #12
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4e:	482c      	ldr	r0, [pc, #176]	@ (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8000d50:	f005 ffe6 	bl	8006d20 <HAL_UART_Transmit>
			lcd_put_cur(1, 0);
 8000d54:	2100      	movs	r1, #0
 8000d56:	2001      	movs	r0, #1
 8000d58:	f000 f968 	bl	800102c <lcd_put_cur>
			lcd_send_string(msg);
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 f9bf 	bl	80010e4 <lcd_send_string>
	{
 8000d66:	e042      	b.n	8000dee <HAL_CAN_RxFifo0MsgPendingCallback+0x196>
		}

	}

	else if ( RxHeader.StdId == 0x650 && RxHeader.RTR == CAN_RTR_DATA ) //its a reply ( data frame) by F103_2 to F407 TEMPERATURE SENSOR
 8000d68:	4b23      	ldr	r3, [pc, #140]	@ (8000df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8000d70:	d13e      	bne.n	8000df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>
 8000d72:	4b21      	ldr	r3, [pc, #132]	@ (8000df8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 8000d74:	68db      	ldr	r3, [r3, #12]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d13a      	bne.n	8000df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>
	{
		uint16_t response = (rcvd_msg[0] << 8) | rcvd_msg[1];
 8000d7a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000d7e:	021b      	lsls	r3, r3, #8
 8000d80:	b21a      	sxth	r2, r3
 8000d82:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b21b      	sxth	r3, r3
 8000d8c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
		if (response) {
 8000d90:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d02b      	beq.n	8000df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>

			sprintf(msg,"Temperature:%d C\r\n",response);
 8000d98:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	4919      	ldr	r1, [pc, #100]	@ (8000e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8000da2:	4618      	mov	r0, r3
 8000da4:	f00a f92e 	bl	800b004 <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fa0f 	bl	80001d0 <strlen>
 8000db2:	4603      	mov	r3, r0
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	f107 010c 	add.w	r1, r7, #12
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295
 8000dbe:	4810      	ldr	r0, [pc, #64]	@ (8000e00 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8000dc0:	f005 ffae 	bl	8006d20 <HAL_UART_Transmit>
			lcd_put_cur(1, 0);
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f000 f930 	bl	800102c <lcd_put_cur>
			lcd_send_string(msg);
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f000 f987 	bl	80010e4 <lcd_send_string>

			if (response > 40) {
 8000dd6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000dda:	2b28      	cmp	r3, #40	@ 0x28
 8000ddc:	d903      	bls.n	8000de6 <HAL_CAN_RxFifo0MsgPendingCallback+0x18e>
				fire = 1;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]
		}

	}


}
 8000de4:	e004      	b.n	8000df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>
				fire = 0;
 8000de6:	4b09      	ldr	r3, [pc, #36]	@ (8000e0c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
}
 8000dec:	e000      	b.n	8000df0 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>
	{
 8000dee:	bf00      	nop
}
 8000df0:	bf00      	nop
 8000df2:	3750      	adds	r7, #80	@ 0x50
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	200001a4 	.word	0x200001a4
 8000dfc:	0800b860 	.word	0x0800b860
 8000e00:	2000015c 	.word	0x2000015c
 8000e04:	0800b874 	.word	0x0800b874
 8000e08:	0800b888 	.word	0x0800b888
 8000e0c:	200001c4 	.word	0x200001c4

08000e10 <HAL_CAN_ErrorCallback>:


void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b090      	sub	sp, #64	@ 0x40
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

	char msg[50];
	sprintf(msg,"CAN Error Detected: HAL_CAN_ErrorCallback\r\n");
 8000e18:	f107 030c 	add.w	r3, r7, #12
 8000e1c:	490a      	ldr	r1, [pc, #40]	@ (8000e48 <HAL_CAN_ErrorCallback+0x38>)
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f00a f8f0 	bl	800b004 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff f9d1 	bl	80001d0 <strlen>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	f107 010c 	add.w	r1, r7, #12
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	4804      	ldr	r0, [pc, #16]	@ (8000e4c <HAL_CAN_ErrorCallback+0x3c>)
 8000e3c:	f005 ff70 	bl	8006d20 <HAL_UART_Transmit>


}
 8000e40:	bf00      	nop
 8000e42:	3740      	adds	r7, #64	@ 0x40
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	0800b89c 	.word	0x0800b89c
 8000e4c:	2000015c 	.word	0x2000015c

08000e50 <distanceAction>:

static void distanceAction(uint32_t response){
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	if (response <= 40 && response > 30){
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2b28      	cmp	r3, #40	@ 0x28
 8000e5c:	d807      	bhi.n	8000e6e <distanceAction+0x1e>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b1e      	cmp	r3, #30
 8000e62:	d904      	bls.n	8000e6e <distanceAction+0x1e>
		delay = 500;
 8000e64:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <distanceAction+0x7c>)
 8000e66:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	e028      	b.n	8000ec0 <distanceAction+0x70>
	}else if (response <= 30 && response > 20){
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b1e      	cmp	r3, #30
 8000e72:	d806      	bhi.n	8000e82 <distanceAction+0x32>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b14      	cmp	r3, #20
 8000e78:	d903      	bls.n	8000e82 <distanceAction+0x32>
		delay = 250;
 8000e7a:	4b14      	ldr	r3, [pc, #80]	@ (8000ecc <distanceAction+0x7c>)
 8000e7c:	22fa      	movs	r2, #250	@ 0xfa
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e01e      	b.n	8000ec0 <distanceAction+0x70>
	}else if (response <= 20 && response > 15){
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b14      	cmp	r3, #20
 8000e86:	d806      	bhi.n	8000e96 <distanceAction+0x46>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b0f      	cmp	r3, #15
 8000e8c:	d903      	bls.n	8000e96 <distanceAction+0x46>
		delay = 125;
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <distanceAction+0x7c>)
 8000e90:	227d      	movs	r2, #125	@ 0x7d
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	e014      	b.n	8000ec0 <distanceAction+0x70>
	}else if (response <= 15 && response > 10){
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d806      	bhi.n	8000eaa <distanceAction+0x5a>
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2b0a      	cmp	r3, #10
 8000ea0:	d903      	bls.n	8000eaa <distanceAction+0x5a>
		delay = 50;
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <distanceAction+0x7c>)
 8000ea4:	2232      	movs	r2, #50	@ 0x32
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	e00a      	b.n	8000ec0 <distanceAction+0x70>
	}else if (response <= 10){
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0a      	cmp	r3, #10
 8000eae:	d803      	bhi.n	8000eb8 <distanceAction+0x68>
		delay = 1;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <distanceAction+0x7c>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]
	}else{
		delay = 0;
	}
}
 8000eb6:	e003      	b.n	8000ec0 <distanceAction+0x70>
		delay = 0;
 8000eb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <distanceAction+0x7c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
}
 8000ebe:	e7ff      	b.n	8000ec0 <distanceAction+0x70>
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	200001c0 	.word	0x200001c0

08000ed0 <distanceAlarm>:

static void distanceAlarm(uint32_t delay){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

	if (delay){
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d012      	beq.n	8000f04 <distanceAlarm+0x34>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ee4:	480c      	ldr	r0, [pc, #48]	@ (8000f18 <distanceAlarm+0x48>)
 8000ee6:	f001 fc75 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f000 fc24 	bl	8001738 <HAL_Delay>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ef6:	4808      	ldr	r0, [pc, #32]	@ (8000f18 <distanceAlarm+0x48>)
 8000ef8:	f001 fc6c 	bl	80027d4 <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f000 fc1b 	bl	8001738 <HAL_Delay>
	}else{
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
	}

}
 8000f02:	e005      	b.n	8000f10 <distanceAlarm+0x40>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f0a:	4803      	ldr	r0, [pc, #12]	@ (8000f18 <distanceAlarm+0x48>)
 8000f0c:	f001 fc62 	bl	80027d4 <HAL_GPIO_WritePin>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40020c00 	.word	0x40020c00

08000f1c <checkFire>:

static void checkFire(uint8_t fire){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]

	if (fire) {
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d019      	beq.n	8000f60 <checkFire+0x44>

		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	480e      	ldr	r0, [pc, #56]	@ (8000f68 <checkFire+0x4c>)
 8000f30:	f004 ff86 	bl	8005e40 <HAL_TIM_PWM_Start>
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 250);
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <checkFire+0x4c>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	22fa      	movs	r2, #250	@ 0xfa
 8000f3a:	639a      	str	r2, [r3, #56]	@ 0x38
		  HAL_Delay(500);
 8000f3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f40:	f000 fbfa 	bl	8001738 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 750);
 8000f44:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <checkFire+0x4c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8000f4c:	639a      	str	r2, [r3, #56]	@ 0x38
		  HAL_Delay(500);
 8000f4e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f52:	f000 fbf1 	bl	8001738 <HAL_Delay>
		  __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 1250);
 8000f56:	4b04      	ldr	r3, [pc, #16]	@ (8000f68 <checkFire+0x4c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8000f5e:	639a      	str	r2, [r3, #56]	@ 0x38

	}


}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000114 	.word	0x20000114

08000f6c <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af02      	add	r7, sp, #8
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	f023 030f 	bic.w	r3, r3, #15
 8000f7c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	011b      	lsls	r3, r3, #4
 8000f82:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	f043 030c 	orr.w	r3, r3, #12
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000f98:	7bbb      	ldrb	r3, [r7, #14]
 8000f9a:	f043 030c 	orr.w	r3, r3, #12
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000fa2:	7bbb      	ldrb	r3, [r7, #14]
 8000fa4:	f043 0308 	orr.w	r3, r3, #8
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000fac:	f107 0208 	add.w	r2, r7, #8
 8000fb0:	2364      	movs	r3, #100	@ 0x64
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	214e      	movs	r1, #78	@ 0x4e
 8000fb8:	4803      	ldr	r0, [pc, #12]	@ (8000fc8 <lcd_send_cmd+0x5c>)
 8000fba:	f003 fea7 	bl	8004d0c <HAL_I2C_Master_Transmit>
}
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000c0 	.word	0x200000c0

08000fcc <lcd_send_data>:

void lcd_send_data (char data)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f023 030f 	bic.w	r3, r3, #15
 8000fdc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	011b      	lsls	r3, r3, #4
 8000fe2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	f043 030d 	orr.w	r3, r3, #13
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	f043 0309 	orr.w	r3, r3, #9
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000ff8:	7bbb      	ldrb	r3, [r7, #14]
 8000ffa:	f043 030d 	orr.w	r3, r3, #13
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001002:	7bbb      	ldrb	r3, [r7, #14]
 8001004:	f043 0309 	orr.w	r3, r3, #9
 8001008:	b2db      	uxtb	r3, r3
 800100a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800100c:	f107 0208 	add.w	r2, r7, #8
 8001010:	2364      	movs	r3, #100	@ 0x64
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2304      	movs	r3, #4
 8001016:	214e      	movs	r1, #78	@ 0x4e
 8001018:	4803      	ldr	r0, [pc, #12]	@ (8001028 <lcd_send_data+0x5c>)
 800101a:	f003 fe77 	bl	8004d0c <HAL_I2C_Master_Transmit>
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200000c0 	.word	0x200000c0

0800102c <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
    switch (row)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d003      	beq.n	8001044 <lcd_put_cur+0x18>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d005      	beq.n	800104e <lcd_put_cur+0x22>
 8001042:	e009      	b.n	8001058 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800104a:	603b      	str	r3, [r7, #0]
            break;
 800104c:	e004      	b.n	8001058 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001054:	603b      	str	r3, [r7, #0]
            break;
 8001056:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff85 	bl	8000f6c <lcd_send_cmd>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <lcd_init>:


void lcd_init (void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800106e:	2032      	movs	r0, #50	@ 0x32
 8001070:	f000 fb62 	bl	8001738 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001074:	2030      	movs	r0, #48	@ 0x30
 8001076:	f7ff ff79 	bl	8000f6c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800107a:	2005      	movs	r0, #5
 800107c:	f000 fb5c 	bl	8001738 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001080:	2030      	movs	r0, #48	@ 0x30
 8001082:	f7ff ff73 	bl	8000f6c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001086:	2001      	movs	r0, #1
 8001088:	f000 fb56 	bl	8001738 <HAL_Delay>
	lcd_send_cmd (0x30);
 800108c:	2030      	movs	r0, #48	@ 0x30
 800108e:	f7ff ff6d 	bl	8000f6c <lcd_send_cmd>
	HAL_Delay(10);
 8001092:	200a      	movs	r0, #10
 8001094:	f000 fb50 	bl	8001738 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001098:	2020      	movs	r0, #32
 800109a:	f7ff ff67 	bl	8000f6c <lcd_send_cmd>
	HAL_Delay(10);
 800109e:	200a      	movs	r0, #10
 80010a0:	f000 fb4a 	bl	8001738 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80010a4:	2028      	movs	r0, #40	@ 0x28
 80010a6:	f7ff ff61 	bl	8000f6c <lcd_send_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f000 fb44 	bl	8001738 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80010b0:	2008      	movs	r0, #8
 80010b2:	f7ff ff5b 	bl	8000f6c <lcd_send_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f000 fb3e 	bl	8001738 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80010bc:	2001      	movs	r0, #1
 80010be:	f7ff ff55 	bl	8000f6c <lcd_send_cmd>
	HAL_Delay(1);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f000 fb38 	bl	8001738 <HAL_Delay>
	HAL_Delay(1);
 80010c8:	2001      	movs	r0, #1
 80010ca:	f000 fb35 	bl	8001738 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80010ce:	2006      	movs	r0, #6
 80010d0:	f7ff ff4c 	bl	8000f6c <lcd_send_cmd>
	HAL_Delay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f000 fb2f 	bl	8001738 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80010da:	200c      	movs	r0, #12
 80010dc:	f7ff ff46 	bl	8000f6c <lcd_send_cmd>
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80010ec:	e006      	b.n	80010fc <lcd_send_string+0x18>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff68 	bl	8000fcc <lcd_send_data>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1f4      	bne.n	80010ee <lcd_send_string+0xa>
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08e      	sub	sp, #56	@ 0x38
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	char msg[50];
	sprintf(msg,"Error_Handler\r\n");
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	4909      	ldr	r1, [pc, #36]	@ (8001140 <Error_Handler+0x30>)
 800111a:	4618      	mov	r0, r3
 800111c:	f009 ff72 	bl	800b004 <siprintf>
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg),HAL_MAX_DELAY);
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff f854 	bl	80001d0 <strlen>
 8001128:	4603      	mov	r3, r0
 800112a:	b29a      	uxth	r2, r3
 800112c:	1d39      	adds	r1, r7, #4
 800112e:	f04f 33ff 	mov.w	r3, #4294967295
 8001132:	4804      	ldr	r0, [pc, #16]	@ (8001144 <Error_Handler+0x34>)
 8001134:	f005 fdf4 	bl	8006d20 <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	bf00      	nop
 800113e:	e7fd      	b.n	800113c <Error_Handler+0x2c>
 8001140:	0800b8c8 	.word	0x0800b8c8
 8001144:	2000015c 	.word	0x2000015c

08001148 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <HAL_MspInit+0x4c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	4a0f      	ldr	r2, [pc, #60]	@ (8001194 <HAL_MspInit+0x4c>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800115c:	6453      	str	r3, [r2, #68]	@ 0x44
 800115e:	4b0d      	ldr	r3, [pc, #52]	@ (8001194 <HAL_MspInit+0x4c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <HAL_MspInit+0x4c>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	4a08      	ldr	r2, [pc, #32]	@ (8001194 <HAL_MspInit+0x4c>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001178:	6413      	str	r3, [r2, #64]	@ 0x40
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HAL_MspInit+0x4c>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001186:	2007      	movs	r0, #7
 8001188:	f001 f93a 	bl	8002400 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40023800 	.word	0x40023800

08001198 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a39      	ldr	r2, [pc, #228]	@ (800129c <HAL_CAN_MspInit+0x104>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d16b      	bne.n	8001292 <HAL_CAN_MspInit+0xfa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	4b38      	ldr	r3, [pc, #224]	@ (80012a0 <HAL_CAN_MspInit+0x108>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c2:	4a37      	ldr	r2, [pc, #220]	@ (80012a0 <HAL_CAN_MspInit+0x108>)
 80011c4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ca:	4b35      	ldr	r3, [pc, #212]	@ (80012a0 <HAL_CAN_MspInit+0x108>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
 80011da:	4b31      	ldr	r3, [pc, #196]	@ (80012a0 <HAL_CAN_MspInit+0x108>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a30      	ldr	r2, [pc, #192]	@ (80012a0 <HAL_CAN_MspInit+0x108>)
 80011e0:	f043 0308 	orr.w	r3, r3, #8
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b2e      	ldr	r3, [pc, #184]	@ (80012a0 <HAL_CAN_MspInit+0x108>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0308 	and.w	r3, r3, #8
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011f2:	2303      	movs	r3, #3
 80011f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001202:	2309      	movs	r3, #9
 8001204:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4619      	mov	r1, r3
 800120c:	4825      	ldr	r0, [pc, #148]	@ (80012a4 <HAL_CAN_MspInit+0x10c>)
 800120e:	f001 f945 	bl	800249c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	2013      	movs	r0, #19
 8001218:	f001 f8fd 	bl	8002416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800121c:	2013      	movs	r0, #19
 800121e:	f001 f916 	bl	800244e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2014      	movs	r0, #20
 8001228:	f001 f8f5 	bl	8002416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800122c:	2014      	movs	r0, #20
 800122e:	f001 f90e 	bl	800244e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2015      	movs	r0, #21
 8001238:	f001 f8ed 	bl	8002416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800123c:	2015      	movs	r0, #21
 800123e:	f001 f906 	bl	800244e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2016      	movs	r0, #22
 8001248:	f001 f8e5 	bl	8002416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800124c:	2016      	movs	r0, #22
 800124e:	f001 f8fe 	bl	800244e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */
	HAL_NVIC_SetPriority(CAN1_TX_IRQn,15,0);
 8001252:	2200      	movs	r2, #0
 8001254:	210f      	movs	r1, #15
 8001256:	2013      	movs	r0, #19
 8001258:	f001 f8dd 	bl	8002416 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX0_IRQn,15,0);
 800125c:	2200      	movs	r2, #0
 800125e:	210f      	movs	r1, #15
 8001260:	2014      	movs	r0, #20
 8001262:	f001 f8d8 	bl	8002416 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_RX1_IRQn,15,0);
 8001266:	2200      	movs	r2, #0
 8001268:	210f      	movs	r1, #15
 800126a:	2015      	movs	r0, #21
 800126c:	f001 f8d3 	bl	8002416 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(CAN1_SCE_IRQn,15,0);
 8001270:	2200      	movs	r2, #0
 8001272:	210f      	movs	r1, #15
 8001274:	2016      	movs	r0, #22
 8001276:	f001 f8ce 	bl	8002416 <HAL_NVIC_SetPriority>

	HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800127a:	2013      	movs	r0, #19
 800127c:	f001 f8e7 	bl	800244e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001280:	2014      	movs	r0, #20
 8001282:	f001 f8e4 	bl	800244e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001286:	2015      	movs	r0, #21
 8001288:	f001 f8e1 	bl	800244e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800128c:	2016      	movs	r0, #22
 800128e:	f001 f8de 	bl	800244e <HAL_NVIC_EnableIRQ>


  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	@ 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40006400 	.word	0x40006400
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020c00 	.word	0x40020c00

080012a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a19      	ldr	r2, [pc, #100]	@ (800132c <HAL_I2C_MspInit+0x84>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d12c      	bne.n	8001324 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a17      	ldr	r2, [pc, #92]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 80012d4:	f043 0302 	orr.w	r3, r3, #2
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b15      	ldr	r3, [pc, #84]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012e6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ec:	2312      	movs	r3, #18
 80012ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f8:	2304      	movs	r3, #4
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	480c      	ldr	r0, [pc, #48]	@ (8001334 <HAL_I2C_MspInit+0x8c>)
 8001304:	f001 f8ca 	bl	800249c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001308:	2300      	movs	r3, #0
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 800130e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001310:	4a07      	ldr	r2, [pc, #28]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 8001312:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001316:	6413      	str	r3, [r2, #64]	@ 0x40
 8001318:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <HAL_I2C_MspInit+0x88>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001324:	bf00      	nop
 8001326:	3728      	adds	r7, #40	@ 0x28
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	40005400 	.word	0x40005400
 8001330:	40023800 	.word	0x40023800
 8001334:	40020400 	.word	0x40020400

08001338 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001348:	d115      	bne.n	8001376 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <HAL_TIM_Base_MspInit+0x48>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	4a0b      	ldr	r2, [pc, #44]	@ (8001380 <HAL_TIM_Base_MspInit+0x48>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6413      	str	r3, [r2, #64]	@ 0x40
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <HAL_TIM_Base_MspInit+0x48>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	201c      	movs	r0, #28
 800136c:	f001 f853 	bl	8002416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001370:	201c      	movs	r0, #28
 8001372:	f001 f86c 	bl	800244e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800

08001384 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013a4:	d11d      	bne.n	80013e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <HAL_TIM_MspPostInit+0x68>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a0f      	ldr	r2, [pc, #60]	@ (80013ec <HAL_TIM_MspPostInit+0x68>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <HAL_TIM_MspPostInit+0x68>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013c2:	2302      	movs	r3, #2
 80013c4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013d2:	2301      	movs	r3, #1
 80013d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 030c 	add.w	r3, r7, #12
 80013da:	4619      	mov	r1, r3
 80013dc:	4804      	ldr	r0, [pc, #16]	@ (80013f0 <HAL_TIM_MspPostInit+0x6c>)
 80013de:	f001 f85d 	bl	800249c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013e2:	bf00      	nop
 80013e4:	3720      	adds	r7, #32
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020000 	.word	0x40020000

080013f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	@ 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a19      	ldr	r2, [pc, #100]	@ (8001478 <HAL_UART_MspInit+0x84>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d12b      	bne.n	800146e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b18      	ldr	r3, [pc, #96]	@ (800147c <HAL_UART_MspInit+0x88>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800141e:	4a17      	ldr	r2, [pc, #92]	@ (800147c <HAL_UART_MspInit+0x88>)
 8001420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001424:	6413      	str	r3, [r2, #64]	@ 0x40
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <HAL_UART_MspInit+0x88>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b11      	ldr	r3, [pc, #68]	@ (800147c <HAL_UART_MspInit+0x88>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a10      	ldr	r2, [pc, #64]	@ (800147c <HAL_UART_MspInit+0x88>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <HAL_UART_MspInit+0x88>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800144e:	230c      	movs	r3, #12
 8001450:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800145e:	2307      	movs	r3, #7
 8001460:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	@ (8001480 <HAL_UART_MspInit+0x8c>)
 800146a:	f001 f817 	bl	800249c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800146e:	bf00      	nop
 8001470:	3728      	adds	r7, #40	@ 0x28
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40004400 	.word	0x40004400
 800147c:	40023800 	.word	0x40023800
 8001480:	40020000 	.word	0x40020000

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <NMI_Handler+0x4>

0800148c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <HardFault_Handler+0x4>

08001494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001498:	bf00      	nop
 800149a:	e7fd      	b.n	8001498 <MemManage_Handler+0x4>

0800149c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	bf00      	nop
 80014aa:	e7fd      	b.n	80014a8 <UsageFault_Handler+0x4>

080014ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014da:	f000 f90d 	bl	80016f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80014de:	f000 ffd0 	bl	8002482 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
	...

080014e8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80014ec:	4802      	ldr	r0, [pc, #8]	@ (80014f8 <CAN1_TX_IRQHandler+0x10>)
 80014ee:	f000 fcaf 	bl	8001e50 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000098 	.word	0x20000098

080014fc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001500:	4802      	ldr	r0, [pc, #8]	@ (800150c <CAN1_RX0_IRQHandler+0x10>)
 8001502:	f000 fca5 	bl	8001e50 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000098 	.word	0x20000098

08001510 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001514:	4802      	ldr	r0, [pc, #8]	@ (8001520 <CAN1_RX1_IRQHandler+0x10>)
 8001516:	f000 fc9b 	bl	8001e50 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000098 	.word	0x20000098

08001524 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001528:	4802      	ldr	r0, [pc, #8]	@ (8001534 <CAN1_SCE_IRQHandler+0x10>)
 800152a:	f000 fc91 	bl	8001e50 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000098 	.word	0x20000098

08001538 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800153c:	4802      	ldr	r0, [pc, #8]	@ (8001548 <TIM2_IRQHandler+0x10>)
 800153e:	f004 fd47 	bl	8005fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000114 	.word	0x20000114

0800154c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <OTG_FS_IRQHandler+0x10>)
 8001552:	f001 fc5d 	bl	8002e10 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200005e0 	.word	0x200005e0

08001560 <EXTI15_10_IRQHandler>:

/* USER CODE BEGIN 1 */

void EXTI15_10_IRQHandler(void){
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001564:	2001      	movs	r0, #1
 8001566:	f001 f94f 	bl	8002808 <HAL_GPIO_EXTI_IRQHandler>
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001578:	4a14      	ldr	r2, [pc, #80]	@ (80015cc <_sbrk+0x5c>)
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <_sbrk+0x60>)
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001584:	4b13      	ldr	r3, [pc, #76]	@ (80015d4 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d102      	bne.n	8001592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800158c:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <_sbrk+0x64>)
 800158e:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <_sbrk+0x68>)
 8001590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001592:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	693a      	ldr	r2, [r7, #16]
 800159c:	429a      	cmp	r2, r3
 800159e:	d207      	bcs.n	80015b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a0:	f009 fd68 	bl	800b074 <__errno>
 80015a4:	4603      	mov	r3, r0
 80015a6:	220c      	movs	r2, #12
 80015a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015aa:	f04f 33ff 	mov.w	r3, #4294967295
 80015ae:	e009      	b.n	80015c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015b6:	4b07      	ldr	r3, [pc, #28]	@ (80015d4 <_sbrk+0x64>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	4a05      	ldr	r2, [pc, #20]	@ (80015d4 <_sbrk+0x64>)
 80015c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20020000 	.word	0x20020000
 80015d0:	00000400 	.word	0x00000400
 80015d4:	200001fc 	.word	0x200001fc
 80015d8:	20000b08 	.word	0x20000b08

080015dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <SystemInit+0x20>)
 80015e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015e6:	4a05      	ldr	r2, [pc, #20]	@ (80015fc <SystemInit+0x20>)
 80015e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001600:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001638 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001604:	f7ff ffea 	bl	80015dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001608:	480c      	ldr	r0, [pc, #48]	@ (800163c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800160a:	490d      	ldr	r1, [pc, #52]	@ (8001640 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800160c:	4a0d      	ldr	r2, [pc, #52]	@ (8001644 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800160e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001610:	e002      	b.n	8001618 <LoopCopyDataInit>

08001612 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001612:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001614:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001616:	3304      	adds	r3, #4

08001618 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001618:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800161c:	d3f9      	bcc.n	8001612 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161e:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001620:	4c0a      	ldr	r4, [pc, #40]	@ (800164c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001624:	e001      	b.n	800162a <LoopFillZerobss>

08001626 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001626:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001628:	3204      	adds	r2, #4

0800162a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800162c:	d3fb      	bcc.n	8001626 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800162e:	f009 fd27 	bl	800b080 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001632:	f7fe ff9d 	bl	8000570 <main>
  bx  lr    
 8001636:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001638:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800163c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001640:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001644:	0800b938 	.word	0x0800b938
  ldr r2, =_sbss
 8001648:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800164c:	20000b08 	.word	0x20000b08

08001650 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001650:	e7fe      	b.n	8001650 <ADC_IRQHandler>
	...

08001654 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001658:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <HAL_Init+0x40>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a0d      	ldr	r2, [pc, #52]	@ (8001694 <HAL_Init+0x40>)
 800165e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001662:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001664:	4b0b      	ldr	r3, [pc, #44]	@ (8001694 <HAL_Init+0x40>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <HAL_Init+0x40>)
 800166a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800166e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001670:	4b08      	ldr	r3, [pc, #32]	@ (8001694 <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a07      	ldr	r2, [pc, #28]	@ (8001694 <HAL_Init+0x40>)
 8001676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800167a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f000 febf 	bl	8002400 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001682:	2000      	movs	r0, #0
 8001684:	f000 f808 	bl	8001698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001688:	f7ff fd5e 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023c00 	.word	0x40023c00

08001698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a0:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <HAL_InitTick+0x54>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b12      	ldr	r3, [pc, #72]	@ (80016f0 <HAL_InitTick+0x58>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 fed7 	bl	800246a <HAL_SYSTICK_Config>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00e      	b.n	80016e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d80a      	bhi.n	80016e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016cc:	2200      	movs	r2, #0
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f000 fe9f 	bl	8002416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d8:	4a06      	ldr	r2, [pc, #24]	@ (80016f4 <HAL_InitTick+0x5c>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e000      	b.n	80016e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000000 	.word	0x20000000
 80016f0:	20000008 	.word	0x20000008
 80016f4:	20000004 	.word	0x20000004

080016f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_IncTick+0x20>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b06      	ldr	r3, [pc, #24]	@ (800171c <HAL_IncTick+0x24>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a04      	ldr	r2, [pc, #16]	@ (800171c <HAL_IncTick+0x24>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000008 	.word	0x20000008
 800171c:	20000200 	.word	0x20000200

08001720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  return uwTick;
 8001724:	4b03      	ldr	r3, [pc, #12]	@ (8001734 <HAL_GetTick+0x14>)
 8001726:	681b      	ldr	r3, [r3, #0]
}
 8001728:	4618      	mov	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000200 	.word	0x20000200

08001738 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff ffee 	bl	8001720 <HAL_GetTick>
 8001744:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001750:	d005      	beq.n	800175e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001752:	4b0a      	ldr	r3, [pc, #40]	@ (800177c <HAL_Delay+0x44>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4413      	add	r3, r2
 800175c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800175e:	bf00      	nop
 8001760:	f7ff ffde 	bl	8001720 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	429a      	cmp	r2, r3
 800176e:	d8f7      	bhi.n	8001760 <HAL_Delay+0x28>
  {
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008

08001780 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e0ed      	b.n	800196e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f7ff fcfa 	bl	8001198 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b4:	f7ff ffb4 	bl	8001720 <HAL_GetTick>
 80017b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017ba:	e012      	b.n	80017e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017bc:	f7ff ffb0 	bl	8001720 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b0a      	cmp	r3, #10
 80017c8:	d90b      	bls.n	80017e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2205      	movs	r2, #5
 80017da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e0c5      	b.n	800196e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d0e5      	beq.n	80017bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0202 	bic.w	r2, r2, #2
 80017fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001800:	f7ff ff8e 	bl	8001720 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001806:	e012      	b.n	800182e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001808:	f7ff ff8a 	bl	8001720 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b0a      	cmp	r3, #10
 8001814:	d90b      	bls.n	800182e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2205      	movs	r2, #5
 8001826:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e09f      	b.n	800196e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1e5      	bne.n	8001808 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7e1b      	ldrb	r3, [r3, #24]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d108      	bne.n	8001856 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	e007      	b.n	8001866 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	7e5b      	ldrb	r3, [r3, #25]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d108      	bne.n	8001880 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e007      	b.n	8001890 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800188e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	7e9b      	ldrb	r3, [r3, #26]
 8001894:	2b01      	cmp	r3, #1
 8001896:	d108      	bne.n	80018aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0220 	orr.w	r2, r2, #32
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	e007      	b.n	80018ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0220 	bic.w	r2, r2, #32
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7edb      	ldrb	r3, [r3, #27]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d108      	bne.n	80018d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 0210 	bic.w	r2, r2, #16
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	e007      	b.n	80018e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f042 0210 	orr.w	r2, r2, #16
 80018e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	7f1b      	ldrb	r3, [r3, #28]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d108      	bne.n	80018fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0208 	orr.w	r2, r2, #8
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	e007      	b.n	800190e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 0208 	bic.w	r2, r2, #8
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7f5b      	ldrb	r3, [r3, #29]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d108      	bne.n	8001928 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f042 0204 	orr.w	r2, r2, #4
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	e007      	b.n	8001938 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0204 	bic.w	r2, r2, #4
 8001936:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	431a      	orrs	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	ea42 0103 	orr.w	r1, r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	1e5a      	subs	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2200      	movs	r2, #0
 8001962:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001978:	b480      	push	{r7}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800198e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001990:	7cfb      	ldrb	r3, [r7, #19]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d003      	beq.n	800199e <HAL_CAN_ConfigFilter+0x26>
 8001996:	7cfb      	ldrb	r3, [r7, #19]
 8001998:	2b02      	cmp	r3, #2
 800199a:	f040 80be 	bne.w	8001b1a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800199e:	4b65      	ldr	r3, [pc, #404]	@ (8001b34 <HAL_CAN_ConfigFilter+0x1bc>)
 80019a0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019a8:	f043 0201 	orr.w	r2, r3, #1
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80019b8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019cc:	021b      	lsls	r3, r3, #8
 80019ce:	431a      	orrs	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	f003 031f 	and.w	r3, r3, #31
 80019de:	2201      	movs	r2, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	43db      	mvns	r3, r3
 80019f0:	401a      	ands	r2, r3
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d123      	bne.n	8001a48 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a22:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3248      	adds	r2, #72	@ 0x48
 8001a28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a3c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a3e:	6979      	ldr	r1, [r7, #20]
 8001a40:	3348      	adds	r3, #72	@ 0x48
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	440b      	add	r3, r1
 8001a46:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d122      	bne.n	8001a96 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a70:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	3248      	adds	r2, #72	@ 0x48
 8001a76:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a8a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a8c:	6979      	ldr	r1, [r7, #20]
 8001a8e:	3348      	adds	r3, #72	@ 0x48
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	440b      	add	r3, r1
 8001a94:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001ab0:	e007      	b.n	8001ac2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	431a      	orrs	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d109      	bne.n	8001ade <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	401a      	ands	r2, r3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001adc:	e007      	b.n	8001aee <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d107      	bne.n	8001b06 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	431a      	orrs	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001b0c:	f023 0201 	bic.w	r2, r3, #1
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e006      	b.n	8001b28 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b1e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
  }
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	371c      	adds	r7, #28
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	40006400 	.word	0x40006400

08001b38 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d12e      	bne.n	8001baa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b64:	f7ff fddc 	bl	8001720 <HAL_GetTick>
 8001b68:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b6a:	e012      	b.n	8001b92 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b6c:	f7ff fdd8 	bl	8001720 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b0a      	cmp	r3, #10
 8001b78:	d90b      	bls.n	8001b92 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2205      	movs	r2, #5
 8001b8a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e012      	b.n	8001bb8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1e5      	bne.n	8001b6c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e006      	b.n	8001bb8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bae:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
  }
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	607a      	str	r2, [r7, #4]
 8001bcc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d003      	beq.n	8001be4 <HAL_CAN_GetRxMessage+0x24>
 8001bdc:	7dfb      	ldrb	r3, [r7, #23]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	f040 8103 	bne.w	8001dea <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10e      	bne.n	8001c08 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d116      	bne.n	8001c26 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0f7      	b.n	8001df8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d107      	bne.n	8001c26 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0e8      	b.n	8001df8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	331b      	adds	r3, #27
 8001c2e:	011b      	lsls	r3, r3, #4
 8001c30:	4413      	add	r3, r2
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0204 	and.w	r2, r3, #4
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d10c      	bne.n	8001c5e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	331b      	adds	r3, #27
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	4413      	add	r3, r2
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	0d5b      	lsrs	r3, r3, #21
 8001c54:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	e00b      	b.n	8001c76 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	331b      	adds	r3, #27
 8001c66:	011b      	lsls	r3, r3, #4
 8001c68:	4413      	add	r3, r2
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	08db      	lsrs	r3, r3, #3
 8001c6e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	331b      	adds	r3, #27
 8001c7e:	011b      	lsls	r3, r3, #4
 8001c80:	4413      	add	r3, r2
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0202 	and.w	r2, r3, #2
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	331b      	adds	r3, #27
 8001c94:	011b      	lsls	r3, r3, #4
 8001c96:	4413      	add	r3, r2
 8001c98:	3304      	adds	r3, #4
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2208      	movs	r2, #8
 8001ca8:	611a      	str	r2, [r3, #16]
 8001caa:	e00b      	b.n	8001cc4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	331b      	adds	r3, #27
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3304      	adds	r3, #4
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 020f 	and.w	r2, r3, #15
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	331b      	adds	r3, #27
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	4413      	add	r3, r2
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0a1b      	lsrs	r3, r3, #8
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	331b      	adds	r3, #27
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	4413      	add	r3, r2
 8001ce8:	3304      	adds	r3, #4
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	0c1b      	lsrs	r3, r3, #16
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	4413      	add	r3, r2
 8001cfe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	0a1a      	lsrs	r2, r3, #8
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	0c1a      	lsrs	r2, r3, #16
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	3302      	adds	r3, #2
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	0e1a      	lsrs	r2, r3, #24
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	3303      	adds	r3, #3
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	4413      	add	r3, r2
 8001d62:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	3304      	adds	r3, #4
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	0a1a      	lsrs	r2, r3, #8
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	3305      	adds	r3, #5
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	0c1a      	lsrs	r2, r3, #16
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	3306      	adds	r3, #6
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	4413      	add	r3, r2
 8001dae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	0e1a      	lsrs	r2, r3, #24
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	3307      	adds	r3, #7
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d108      	bne.n	8001dd6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0220 	orr.w	r2, r2, #32
 8001dd2:	60da      	str	r2, [r3, #12]
 8001dd4:	e007      	b.n	8001de6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f042 0220 	orr.w	r2, r2, #32
 8001de4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e006      	b.n	8001df8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
  }
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e14:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d002      	beq.n	8001e22 <HAL_CAN_ActivateNotification+0x1e>
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d109      	bne.n	8001e36 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6959      	ldr	r1, [r3, #20]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e006      	b.n	8001e44 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
  }
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	@ 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d07c      	beq.n	8001f90 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d023      	beq.n	8001ee8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f7fe fe70 	bl	8000b98 <HAL_CAN_TxMailbox0CompleteCallback>
 8001eb8:	e016      	b.n	8001ee8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001eca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ecc:	e00c      	b.n	8001ee8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d004      	beq.n	8001ee2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee0:	e002      	b.n	8001ee8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f96b 	bl	80021be <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d024      	beq.n	8001f3c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001efa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7fe fe66 	bl	8000bd8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f0c:	e016      	b.n	8001f3c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d004      	beq.n	8001f22 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f20:	e00c      	b.n	8001f3c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d004      	beq.n	8001f36 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f34:	e002      	b.n	8001f3c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f94b 	bl	80021d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d024      	beq.n	8001f90 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7fe fe5c 	bl	8000c18 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f60:	e016      	b.n	8001f90 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d004      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f74:	e00c      	b.n	8001f90 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d004      	beq.n	8001f8a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f88:	e002      	b.n	8001f90 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f92b 	bl	80021e6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00c      	beq.n	8001fb4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2210      	movs	r2, #16
 8001fb2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	f003 0304 	and.w	r3, r3, #4
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d006      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2208      	movs	r2, #8
 8001fce:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f912 	bl	80021fa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d009      	beq.n	8001ff4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7fe fe32 	bl	8000c58 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00c      	beq.n	8002018 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	d007      	beq.n	8002018 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800200e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2210      	movs	r2, #16
 8002016:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	f003 0320 	and.w	r3, r3, #32
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d006      	beq.n	800203a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2208      	movs	r2, #8
 8002032:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f8f4 	bl	8002222 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800203a:	6a3b      	ldr	r3, [r7, #32]
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b00      	cmp	r3, #0
 8002042:	d009      	beq.n	8002058 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f8db 	bl	800220e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00b      	beq.n	800207a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	2b00      	cmp	r3, #0
 800206a:	d006      	beq.n	800207a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2210      	movs	r2, #16
 8002072:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f8de 	bl	8002236 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800207a:	6a3b      	ldr	r3, [r7, #32]
 800207c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00b      	beq.n	800209c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2208      	movs	r2, #8
 8002094:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f8d7 	bl	800224a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d07b      	beq.n	800219e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d072      	beq.n	8002196 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020b0:	6a3b      	ldr	r3, [r7, #32]
 80020b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d008      	beq.n	80020cc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d003      	beq.n	80020e8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e2:	f043 0302 	orr.w	r3, r3, #2
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d008      	beq.n	8002104 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fe:	f043 0304 	orr.w	r3, r3, #4
 8002102:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800210a:	2b00      	cmp	r3, #0
 800210c:	d043      	beq.n	8002196 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002114:	2b00      	cmp	r3, #0
 8002116:	d03e      	beq.n	8002196 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800211e:	2b60      	cmp	r3, #96	@ 0x60
 8002120:	d02b      	beq.n	800217a <HAL_CAN_IRQHandler+0x32a>
 8002122:	2b60      	cmp	r3, #96	@ 0x60
 8002124:	d82e      	bhi.n	8002184 <HAL_CAN_IRQHandler+0x334>
 8002126:	2b50      	cmp	r3, #80	@ 0x50
 8002128:	d022      	beq.n	8002170 <HAL_CAN_IRQHandler+0x320>
 800212a:	2b50      	cmp	r3, #80	@ 0x50
 800212c:	d82a      	bhi.n	8002184 <HAL_CAN_IRQHandler+0x334>
 800212e:	2b40      	cmp	r3, #64	@ 0x40
 8002130:	d019      	beq.n	8002166 <HAL_CAN_IRQHandler+0x316>
 8002132:	2b40      	cmp	r3, #64	@ 0x40
 8002134:	d826      	bhi.n	8002184 <HAL_CAN_IRQHandler+0x334>
 8002136:	2b30      	cmp	r3, #48	@ 0x30
 8002138:	d010      	beq.n	800215c <HAL_CAN_IRQHandler+0x30c>
 800213a:	2b30      	cmp	r3, #48	@ 0x30
 800213c:	d822      	bhi.n	8002184 <HAL_CAN_IRQHandler+0x334>
 800213e:	2b10      	cmp	r3, #16
 8002140:	d002      	beq.n	8002148 <HAL_CAN_IRQHandler+0x2f8>
 8002142:	2b20      	cmp	r3, #32
 8002144:	d005      	beq.n	8002152 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002146:	e01d      	b.n	8002184 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	f043 0308 	orr.w	r3, r3, #8
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002150:	e019      	b.n	8002186 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	f043 0310 	orr.w	r3, r3, #16
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800215a:	e014      	b.n	8002186 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800215c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215e:	f043 0320 	orr.w	r3, r3, #32
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002164:	e00f      	b.n	8002186 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800216c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800216e:	e00a      	b.n	8002186 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002178:	e005      	b.n	8002186 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002180:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002182:	e000      	b.n	8002186 <HAL_CAN_IRQHandler+0x336>
            break;
 8002184:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699a      	ldr	r2, [r3, #24]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002194:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2204      	movs	r2, #4
 800219c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800219e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7fe fe2d 	bl	8000e10 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80021b6:	bf00      	nop
 80021b8:	3728      	adds	r7, #40	@ 0x28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr

08002236 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
	...

08002260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002270:	4b0c      	ldr	r3, [pc, #48]	@ (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800227c:	4013      	ands	r3, r2
 800227e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002288:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800228c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002292:	4a04      	ldr	r2, [pc, #16]	@ (80022a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	60d3      	str	r3, [r2, #12]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ac:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0a1b      	lsrs	r3, r3, #8
 80022b2:	f003 0307 	and.w	r3, r3, #7
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	db0b      	blt.n	80022ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	f003 021f 	and.w	r2, r3, #31
 80022dc:	4907      	ldr	r1, [pc, #28]	@ (80022fc <__NVIC_EnableIRQ+0x38>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2001      	movs	r0, #1
 80022e6:	fa00 f202 	lsl.w	r2, r0, r2
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	e000e100 	.word	0xe000e100

08002300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	2b00      	cmp	r3, #0
 8002312:	db0a      	blt.n	800232a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	490c      	ldr	r1, [pc, #48]	@ (800234c <__NVIC_SetPriority+0x4c>)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	440b      	add	r3, r1
 8002324:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002328:	e00a      	b.n	8002340 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4908      	ldr	r1, [pc, #32]	@ (8002350 <__NVIC_SetPriority+0x50>)
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	3b04      	subs	r3, #4
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	440b      	add	r3, r1
 800233e:	761a      	strb	r2, [r3, #24]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	@ 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f1c3 0307 	rsb	r3, r3, #7
 800236e:	2b04      	cmp	r3, #4
 8002370:	bf28      	it	cs
 8002372:	2304      	movcs	r3, #4
 8002374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3304      	adds	r3, #4
 800237a:	2b06      	cmp	r3, #6
 800237c:	d902      	bls.n	8002384 <NVIC_EncodePriority+0x30>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3b03      	subs	r3, #3
 8002382:	e000      	b.n	8002386 <NVIC_EncodePriority+0x32>
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	f04f 32ff 	mov.w	r2, #4294967295
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43d9      	mvns	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	4313      	orrs	r3, r2
         );
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3724      	adds	r7, #36	@ 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023cc:	d301      	bcc.n	80023d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00f      	b.n	80023f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d2:	4a0a      	ldr	r2, [pc, #40]	@ (80023fc <SysTick_Config+0x40>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023da:	210f      	movs	r1, #15
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	f7ff ff8e 	bl	8002300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e4:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <SysTick_Config+0x40>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ea:	4b04      	ldr	r3, [pc, #16]	@ (80023fc <SysTick_Config+0x40>)
 80023ec:	2207      	movs	r2, #7
 80023ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	e000e010 	.word	0xe000e010

08002400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff29 	bl	8002260 <__NVIC_SetPriorityGrouping>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002428:	f7ff ff3e 	bl	80022a8 <__NVIC_GetPriorityGrouping>
 800242c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	6978      	ldr	r0, [r7, #20]
 8002434:	f7ff ff8e 	bl	8002354 <NVIC_EncodePriority>
 8002438:	4602      	mov	r2, r0
 800243a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff5d 	bl	8002300 <__NVIC_SetPriority>
}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff31 	bl	80022c4 <__NVIC_EnableIRQ>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ffa2 	bl	80023bc <SysTick_Config>
 8002478:	4603      	mov	r3, r0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8002486:	f000 f802 	bl	800248e <HAL_SYSTICK_Callback>
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800248e:	b480      	push	{r7}
 8002490:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	@ 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	e16b      	b.n	8002790 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024b8:	2201      	movs	r2, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	f040 815a 	bne.w	800278a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d005      	beq.n	80024ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d130      	bne.n	8002550 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	2203      	movs	r2, #3
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 0201 	and.w	r2, r3, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b03      	cmp	r3, #3
 800255a:	d017      	beq.n	800258c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d123      	bne.n	80025e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	08da      	lsrs	r2, r3, #3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3208      	adds	r2, #8
 80025a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	220f      	movs	r2, #15
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	08da      	lsrs	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3208      	adds	r2, #8
 80025da:	69b9      	ldr	r1, [r7, #24]
 80025dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0203 	and.w	r2, r3, #3
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80b4 	beq.w	800278a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	4b60      	ldr	r3, [pc, #384]	@ (80027a8 <HAL_GPIO_Init+0x30c>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	4a5f      	ldr	r2, [pc, #380]	@ (80027a8 <HAL_GPIO_Init+0x30c>)
 800262c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002630:	6453      	str	r3, [r2, #68]	@ 0x44
 8002632:	4b5d      	ldr	r3, [pc, #372]	@ (80027a8 <HAL_GPIO_Init+0x30c>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800263e:	4a5b      	ldr	r2, [pc, #364]	@ (80027ac <HAL_GPIO_Init+0x310>)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	3302      	adds	r3, #2
 8002646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	220f      	movs	r2, #15
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a52      	ldr	r2, [pc, #328]	@ (80027b0 <HAL_GPIO_Init+0x314>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d02b      	beq.n	80026c2 <HAL_GPIO_Init+0x226>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a51      	ldr	r2, [pc, #324]	@ (80027b4 <HAL_GPIO_Init+0x318>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d025      	beq.n	80026be <HAL_GPIO_Init+0x222>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a50      	ldr	r2, [pc, #320]	@ (80027b8 <HAL_GPIO_Init+0x31c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d01f      	beq.n	80026ba <HAL_GPIO_Init+0x21e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4f      	ldr	r2, [pc, #316]	@ (80027bc <HAL_GPIO_Init+0x320>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d019      	beq.n	80026b6 <HAL_GPIO_Init+0x21a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4e      	ldr	r2, [pc, #312]	@ (80027c0 <HAL_GPIO_Init+0x324>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d013      	beq.n	80026b2 <HAL_GPIO_Init+0x216>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4d      	ldr	r2, [pc, #308]	@ (80027c4 <HAL_GPIO_Init+0x328>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00d      	beq.n	80026ae <HAL_GPIO_Init+0x212>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4c      	ldr	r2, [pc, #304]	@ (80027c8 <HAL_GPIO_Init+0x32c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d007      	beq.n	80026aa <HAL_GPIO_Init+0x20e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4b      	ldr	r2, [pc, #300]	@ (80027cc <HAL_GPIO_Init+0x330>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d101      	bne.n	80026a6 <HAL_GPIO_Init+0x20a>
 80026a2:	2307      	movs	r3, #7
 80026a4:	e00e      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026a6:	2308      	movs	r3, #8
 80026a8:	e00c      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026aa:	2306      	movs	r3, #6
 80026ac:	e00a      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026ae:	2305      	movs	r3, #5
 80026b0:	e008      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026b2:	2304      	movs	r3, #4
 80026b4:	e006      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026b6:	2303      	movs	r3, #3
 80026b8:	e004      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e002      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_GPIO_Init+0x228>
 80026c2:	2300      	movs	r3, #0
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	f002 0203 	and.w	r2, r2, #3
 80026ca:	0092      	lsls	r2, r2, #2
 80026cc:	4093      	lsls	r3, r2
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026d4:	4935      	ldr	r1, [pc, #212]	@ (80027ac <HAL_GPIO_Init+0x310>)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	089b      	lsrs	r3, r3, #2
 80026da:	3302      	adds	r3, #2
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e2:	4b3b      	ldr	r3, [pc, #236]	@ (80027d0 <HAL_GPIO_Init+0x334>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002706:	4a32      	ldr	r2, [pc, #200]	@ (80027d0 <HAL_GPIO_Init+0x334>)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800270c:	4b30      	ldr	r3, [pc, #192]	@ (80027d0 <HAL_GPIO_Init+0x334>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002730:	4a27      	ldr	r2, [pc, #156]	@ (80027d0 <HAL_GPIO_Init+0x334>)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002736:	4b26      	ldr	r3, [pc, #152]	@ (80027d0 <HAL_GPIO_Init+0x334>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800275a:	4a1d      	ldr	r2, [pc, #116]	@ (80027d0 <HAL_GPIO_Init+0x334>)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002760:	4b1b      	ldr	r3, [pc, #108]	@ (80027d0 <HAL_GPIO_Init+0x334>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002784:	4a12      	ldr	r2, [pc, #72]	@ (80027d0 <HAL_GPIO_Init+0x334>)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3301      	adds	r3, #1
 800278e:	61fb      	str	r3, [r7, #28]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	2b0f      	cmp	r3, #15
 8002794:	f67f ae90 	bls.w	80024b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3724      	adds	r7, #36	@ 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40013800 	.word	0x40013800
 80027b0:	40020000 	.word	0x40020000
 80027b4:	40020400 	.word	0x40020400
 80027b8:	40020800 	.word	0x40020800
 80027bc:	40020c00 	.word	0x40020c00
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40021400 	.word	0x40021400
 80027c8:	40021800 	.word	0x40021800
 80027cc:	40021c00 	.word	0x40021c00
 80027d0:	40013c00 	.word	0x40013c00

080027d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	460b      	mov	r3, r1
 80027de:	807b      	strh	r3, [r7, #2]
 80027e0:	4613      	mov	r3, r2
 80027e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e4:	787b      	ldrb	r3, [r7, #1]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027ea:	887a      	ldrh	r2, [r7, #2]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027f0:	e003      	b.n	80027fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027f2:	887b      	ldrh	r3, [r7, #2]
 80027f4:	041a      	lsls	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	619a      	str	r2, [r3, #24]
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002812:	4b08      	ldr	r3, [pc, #32]	@ (8002834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	4013      	ands	r3, r2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d006      	beq.n	800282c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800281e:	4a05      	ldr	r2, [pc, #20]	@ (8002834 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002820:	88fb      	ldrh	r3, [r7, #6]
 8002822:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	4618      	mov	r0, r3
 8002828:	f000 f806 	bl	8002838 <HAL_GPIO_EXTI_Callback>
  }
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40013c00 	.word	0x40013c00

08002838 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b086      	sub	sp, #24
 8002852:	af02      	add	r7, sp, #8
 8002854:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e059      	b.n	8002914 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f008 f858 	bl	800a930 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2203      	movs	r2, #3
 8002884:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800288e:	d102      	bne.n	8002896 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f004 fe71 	bl	8007582 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	7c1a      	ldrb	r2, [r3, #16]
 80028a8:	f88d 2000 	strb.w	r2, [sp]
 80028ac:	3304      	adds	r3, #4
 80028ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028b0:	f004 fdf2 	bl	8007498 <USB_CoreInit>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2202      	movs	r2, #2
 80028be:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e026      	b.n	8002914 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2101      	movs	r1, #1
 80028cc:	4618      	mov	r0, r3
 80028ce:	f004 fe69 	bl	80075a4 <USB_SetCurrentMode>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e017      	b.n	8002914 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	7c1a      	ldrb	r2, [r3, #16]
 80028ec:	f88d 2000 	strb.w	r2, [sp]
 80028f0:	3304      	adds	r3, #4
 80028f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f4:	f005 f80c 	bl	8007910 <USB_HostInit>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2202      	movs	r2, #2
 8002902:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e004      	b.n	8002914 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800291c:	b590      	push	{r4, r7, lr}
 800291e:	b08b      	sub	sp, #44	@ 0x2c
 8002920:	af04      	add	r7, sp, #16
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	4608      	mov	r0, r1
 8002926:	4611      	mov	r1, r2
 8002928:	461a      	mov	r2, r3
 800292a:	4603      	mov	r3, r0
 800292c:	70fb      	strb	r3, [r7, #3]
 800292e:	460b      	mov	r3, r1
 8002930:	70bb      	strb	r3, [r7, #2]
 8002932:	4613      	mov	r3, r2
 8002934:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002936:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002938:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_HCD_HC_Init+0x2c>
 8002944:	2302      	movs	r3, #2
 8002946:	e09d      	b.n	8002a84 <HAL_HCD_HC_Init+0x168>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	3319      	adds	r3, #25
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	3314      	adds	r3, #20
 8002974:	787a      	ldrb	r2, [r7, #1]
 8002976:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	3315      	adds	r3, #21
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	3326      	adds	r3, #38	@ 0x26
 800299c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80029a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	78bb      	ldrb	r3, [r7, #2]
 80029a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029aa:	b2d8      	uxtb	r0, r3
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	1a9b      	subs	r3, r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	3316      	adds	r3, #22
 80029ba:	4602      	mov	r2, r0
 80029bc:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	4619      	mov	r1, r3
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fbc8 	bl	8003158 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80029c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	da0a      	bge.n	80029e6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80029d0:	78fa      	ldrb	r2, [r7, #3]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	3317      	adds	r3, #23
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]
 80029e4:	e009      	b.n	80029fa <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80029e6:	78fa      	ldrb	r2, [r7, #3]
 80029e8:	6879      	ldr	r1, [r7, #4]
 80029ea:	4613      	mov	r3, r2
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	1a9b      	subs	r3, r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	3317      	adds	r3, #23
 80029f6:	2200      	movs	r2, #0
 80029f8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f005 f8ea 	bl	8007bd8 <USB_GetHostSpeed>
 8002a04:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002a06:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d10b      	bne.n	8002a26 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002a0e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d107      	bne.n	8002a26 <HAL_HCD_HC_Init+0x10a>
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d104      	bne.n	8002a26 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2bbc      	cmp	r3, #188	@ 0xbc
 8002a20:	d901      	bls.n	8002a26 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002a22:	23bc      	movs	r3, #188	@ 0xbc
 8002a24:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	3318      	adds	r3, #24
 8002a36:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002a3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002a3c:	78fa      	ldrb	r2, [r7, #3]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	b298      	uxth	r0, r3
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3328      	adds	r3, #40	@ 0x28
 8002a50:	4602      	mov	r2, r0
 8002a52:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	787c      	ldrb	r4, [r7, #1]
 8002a5e:	78ba      	ldrb	r2, [r7, #2]
 8002a60:	78f9      	ldrb	r1, [r7, #3]
 8002a62:	9302      	str	r3, [sp, #8]
 8002a64:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002a68:	9301      	str	r3, [sp, #4]
 8002a6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	4623      	mov	r3, r4
 8002a72:	f005 f8d9 	bl	8007c28 <USB_HC_Init>
 8002a76:	4603      	mov	r3, r0
 8002a78:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	371c      	adds	r7, #28
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd90      	pop	{r4, r7, pc}

08002a8c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_HCD_HC_Halt+0x1e>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e00f      	b.n	8002aca <HAL_HCD_HC_Halt+0x3e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f005 fc6b 	bl	8008396 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	4608      	mov	r0, r1
 8002ade:	4611      	mov	r1, r2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	70fb      	strb	r3, [r7, #3]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	70bb      	strb	r3, [r7, #2]
 8002aea:	4613      	mov	r3, r2
 8002aec:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	3317      	adds	r3, #23
 8002afe:	78ba      	ldrb	r2, [r7, #2]
 8002b00:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	3326      	adds	r3, #38	@ 0x26
 8002b12:	787a      	ldrb	r2, [r7, #1]
 8002b14:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002b16:	7c3b      	ldrb	r3, [r7, #16]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d114      	bne.n	8002b46 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	332a      	adds	r3, #42	@ 0x2a
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	3319      	adds	r3, #25
 8002b40:	7f3a      	ldrb	r2, [r7, #28]
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	e009      	b.n	8002b5a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b46:	78fa      	ldrb	r2, [r7, #3]
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	1a9b      	subs	r3, r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	332a      	adds	r3, #42	@ 0x2a
 8002b56:	2202      	movs	r2, #2
 8002b58:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002b5a:	787b      	ldrb	r3, [r7, #1]
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	f200 8102 	bhi.w	8002d66 <HAL_HCD_HC_SubmitRequest+0x292>
 8002b62:	a201      	add	r2, pc, #4	@ (adr r2, 8002b68 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b68:	08002b79 	.word	0x08002b79
 8002b6c:	08002d51 	.word	0x08002d51
 8002b70:	08002c3d 	.word	0x08002c3d
 8002b74:	08002cc7 	.word	0x08002cc7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002b78:	7c3b      	ldrb	r3, [r7, #16]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	f040 80f5 	bne.w	8002d6a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002b80:	78bb      	ldrb	r3, [r7, #2]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d12d      	bne.n	8002be2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002b86:	8b3b      	ldrh	r3, [r7, #24]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d109      	bne.n	8002ba0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	333d      	adds	r3, #61	@ 0x3d
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	333d      	adds	r3, #61	@ 0x3d
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10a      	bne.n	8002bcc <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	332a      	adds	r3, #42	@ 0x2a
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002bca:	e0ce      	b.n	8002d6a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bcc:	78fa      	ldrb	r2, [r7, #3]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	332a      	adds	r3, #42	@ 0x2a
 8002bdc:	2202      	movs	r2, #2
 8002bde:	701a      	strb	r2, [r3, #0]
      break;
 8002be0:	e0c3      	b.n	8002d6a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	331a      	adds	r3, #26
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	f040 80b8 	bne.w	8002d6a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	1a9b      	subs	r3, r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	333c      	adds	r3, #60	@ 0x3c
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10a      	bne.n	8002c26 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	1a9b      	subs	r3, r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	332a      	adds	r3, #42	@ 0x2a
 8002c20:	2200      	movs	r2, #0
 8002c22:	701a      	strb	r2, [r3, #0]
      break;
 8002c24:	e0a1      	b.n	8002d6a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	332a      	adds	r3, #42	@ 0x2a
 8002c36:	2202      	movs	r2, #2
 8002c38:	701a      	strb	r2, [r3, #0]
      break;
 8002c3a:	e096      	b.n	8002d6a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002c3c:	78bb      	ldrb	r3, [r7, #2]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d120      	bne.n	8002c84 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	333d      	adds	r3, #61	@ 0x3d
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10a      	bne.n	8002c6e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	332a      	adds	r3, #42	@ 0x2a
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002c6c:	e07e      	b.n	8002d6c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	332a      	adds	r3, #42	@ 0x2a
 8002c7e:	2202      	movs	r2, #2
 8002c80:	701a      	strb	r2, [r3, #0]
      break;
 8002c82:	e073      	b.n	8002d6c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	333c      	adds	r3, #60	@ 0x3c
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10a      	bne.n	8002cb0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	332a      	adds	r3, #42	@ 0x2a
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
      break;
 8002cae:	e05d      	b.n	8002d6c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	011b      	lsls	r3, r3, #4
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	440b      	add	r3, r1
 8002cbe:	332a      	adds	r3, #42	@ 0x2a
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	701a      	strb	r2, [r3, #0]
      break;
 8002cc4:	e052      	b.n	8002d6c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002cc6:	78bb      	ldrb	r3, [r7, #2]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d120      	bne.n	8002d0e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ccc:	78fa      	ldrb	r2, [r7, #3]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	333d      	adds	r3, #61	@ 0x3d
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10a      	bne.n	8002cf8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ce2:	78fa      	ldrb	r2, [r7, #3]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	332a      	adds	r3, #42	@ 0x2a
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002cf6:	e039      	b.n	8002d6c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cf8:	78fa      	ldrb	r2, [r7, #3]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	332a      	adds	r3, #42	@ 0x2a
 8002d08:	2202      	movs	r2, #2
 8002d0a:	701a      	strb	r2, [r3, #0]
      break;
 8002d0c:	e02e      	b.n	8002d6c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	333c      	adds	r3, #60	@ 0x3c
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10a      	bne.n	8002d3a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	332a      	adds	r3, #42	@ 0x2a
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
      break;
 8002d38:	e018      	b.n	8002d6c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	332a      	adds	r3, #42	@ 0x2a
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	701a      	strb	r2, [r3, #0]
      break;
 8002d4e:	e00d      	b.n	8002d6c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	332a      	adds	r3, #42	@ 0x2a
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
      break;
 8002d64:	e002      	b.n	8002d6c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002d66:	bf00      	nop
 8002d68:	e000      	b.n	8002d6c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002d6a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	332c      	adds	r3, #44	@ 0x2c
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	8b39      	ldrh	r1, [r7, #24]
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4403      	add	r3, r0
 8002d90:	3334      	adds	r3, #52	@ 0x34
 8002d92:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	334c      	adds	r3, #76	@ 0x4c
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	3338      	adds	r3, #56	@ 0x38
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	3315      	adds	r3, #21
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	334d      	adds	r3, #77	@ 0x4d
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	4613      	mov	r3, r2
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	3310      	adds	r3, #16
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	4413      	add	r3, r2
 8002df8:	1d19      	adds	r1, r3, #4
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	799b      	ldrb	r3, [r3, #6]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f005 f83e 	bl	8007e80 <USB_HC_StartXfer>
 8002e04:	4603      	mov	r3, r0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop

08002e10 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f004 fd32 	bl	8007890 <USB_GetMode>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	f040 80fb 	bne.w	800302a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f004 fcf5 	bl	8007828 <USB_ReadInterrupts>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80f1 	beq.w	8003028 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f004 fcec 	bl	8007828 <USB_ReadInterrupts>
 8002e50:	4603      	mov	r3, r0
 8002e52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e5a:	d104      	bne.n	8002e66 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002e64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f004 fcdc 	bl	8007828 <USB_ReadInterrupts>
 8002e70:	4603      	mov	r3, r0
 8002e72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e7a:	d104      	bne.n	8002e86 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002e84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f004 fccc 	bl	8007828 <USB_ReadInterrupts>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e96:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e9a:	d104      	bne.n	8002ea6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002ea4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f004 fcbc 	bl	8007828 <USB_ReadInterrupts>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d103      	bne.n	8002ec2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f004 fcae 	bl	8007828 <USB_ReadInterrupts>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ed2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ed6:	d120      	bne.n	8002f1a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002ee0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d113      	bne.n	8002f1a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002ef2:	2110      	movs	r1, #16
 8002ef4:	6938      	ldr	r0, [r7, #16]
 8002ef6:	f004 fba1 	bl	800763c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002efa:	6938      	ldr	r0, [r7, #16]
 8002efc:	f004 fbd0 	bl	80076a0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	7a5b      	ldrb	r3, [r3, #9]
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d105      	bne.n	8002f14 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f004 fdc2 	bl	8007a98 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f007 fd89 	bl	800aa2c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f004 fc82 	bl	8007828 <USB_ReadInterrupts>
 8002f24:	4603      	mov	r3, r0
 8002f26:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f2e:	d102      	bne.n	8002f36 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f001 fd33 	bl	800499c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f004 fc74 	bl	8007828 <USB_ReadInterrupts>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d106      	bne.n	8002f58 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f007 fd52 	bl	800a9f4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2208      	movs	r2, #8
 8002f56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f004 fc63 	bl	8007828 <USB_ReadInterrupts>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f6c:	d139      	bne.n	8002fe2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f005 f9fe 	bl	8008374 <USB_HC_ReadInterrupt>
 8002f78:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	e025      	b.n	8002fcc <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d018      	beq.n	8002fc6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002faa:	d106      	bne.n	8002fba <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f905 	bl	80031c2 <HCD_HC_IN_IRQHandler>
 8002fb8:	e005      	b.n	8002fc6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 ff67 	bl	8003e94 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	795b      	ldrb	r3, [r3, #5]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d3d3      	bcc.n	8002f80 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f004 fc1e 	bl	8007828 <USB_ReadInterrupts>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f003 0310 	and.w	r3, r3, #16
 8002ff2:	2b10      	cmp	r3, #16
 8002ff4:	d101      	bne.n	8002ffa <HAL_HCD_IRQHandler+0x1ea>
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e000      	b.n	8002ffc <HAL_HCD_IRQHandler+0x1ec>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d014      	beq.n	800302a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0210 	bic.w	r2, r2, #16
 800300e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f001 fbe4 	bl	80047de <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699a      	ldr	r2, [r3, #24]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0210 	orr.w	r2, r2, #16
 8003024:	619a      	str	r2, [r3, #24]
 8003026:	e000      	b.n	800302a <HAL_HCD_IRQHandler+0x21a>
      return;
 8003028:	bf00      	nop
    }
  }
}
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_HCD_Start+0x16>
 8003042:	2302      	movs	r3, #2
 8003044:	e013      	b.n	800306e <HAL_HCD_Start+0x3e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2101      	movs	r1, #1
 8003054:	4618      	mov	r0, r3
 8003056:	f004 fd86 	bl	8007b66 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f004 fa7e 	bl	8007560 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_HCD_Stop+0x16>
 8003088:	2302      	movs	r3, #2
 800308a:	e00d      	b.n	80030a8 <HAL_HCD_Stop+0x32>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f005 fad9 	bl	8008650 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3708      	adds	r7, #8
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f004 fd28 	bl	8007b12 <USB_ResetPort>
 80030c2:	4603      	mov	r3, r0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	460b      	mov	r3, r1
 80030d6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	6879      	ldr	r1, [r7, #4]
 80030dc:	4613      	mov	r3, r2
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	334c      	adds	r3, #76	@ 0x4c
 80030e8:	781b      	ldrb	r3, [r3, #0]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	460b      	mov	r3, r1
 8003100:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003102:	78fa      	ldrb	r2, [r7, #3]
 8003104:	6879      	ldr	r1, [r7, #4]
 8003106:	4613      	mov	r3, r2
 8003108:	011b      	lsls	r3, r3, #4
 800310a:	1a9b      	subs	r3, r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	3338      	adds	r3, #56	@ 0x38
 8003112:	681b      	ldr	r3, [r3, #0]
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f004 fd6a 	bl	8007c06 <USB_GetCurrentFrame>
 8003132:	4603      	mov	r3, r0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f004 fd45 	bl	8007bd8 <USB_GetHostSpeed>
 800314e:	4603      	mov	r3, r0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	460b      	mov	r3, r1
 8003162:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	4613      	mov	r3, r2
 800316a:	011b      	lsls	r3, r3, #4
 800316c:	1a9b      	subs	r3, r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	440b      	add	r3, r1
 8003172:	331a      	adds	r3, #26
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	331b      	adds	r3, #27
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800318c:	78fa      	ldrb	r2, [r7, #3]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	3325      	adds	r3, #37	@ 0x25
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	3324      	adds	r3, #36	@ 0x24
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b086      	sub	sp, #24
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	460b      	mov	r3, r1
 80031cc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	4611      	mov	r1, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f004 fb34 	bl	800784e <USB_ReadChInterrupts>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b04      	cmp	r3, #4
 80031ee:	d11a      	bne.n	8003226 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031fc:	461a      	mov	r2, r3
 80031fe:	2304      	movs	r3, #4
 8003200:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	6879      	ldr	r1, [r7, #4]
 8003206:	4613      	mov	r3, r2
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	1a9b      	subs	r3, r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	334d      	adds	r3, #77	@ 0x4d
 8003212:	2207      	movs	r2, #7
 8003214:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	4611      	mov	r1, r2
 800321e:	4618      	mov	r0, r3
 8003220:	f005 f8b9 	bl	8008396 <USB_HC_Halt>
 8003224:	e09e      	b.n	8003364 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	4611      	mov	r1, r2
 800322e:	4618      	mov	r0, r3
 8003230:	f004 fb0d 	bl	800784e <USB_ReadChInterrupts>
 8003234:	4603      	mov	r3, r0
 8003236:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800323a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800323e:	d11b      	bne.n	8003278 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	015a      	lsls	r2, r3, #5
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4413      	add	r3, r2
 8003248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800324c:	461a      	mov	r2, r3
 800324e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003252:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	334d      	adds	r3, #77	@ 0x4d
 8003264:	2208      	movs	r2, #8
 8003266:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	78fa      	ldrb	r2, [r7, #3]
 800326e:	4611      	mov	r1, r2
 8003270:	4618      	mov	r0, r3
 8003272:	f005 f890 	bl	8008396 <USB_HC_Halt>
 8003276:	e075      	b.n	8003364 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	4611      	mov	r1, r2
 8003280:	4618      	mov	r0, r3
 8003282:	f004 fae4 	bl	800784e <USB_ReadChInterrupts>
 8003286:	4603      	mov	r3, r0
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b08      	cmp	r3, #8
 800328e:	d11a      	bne.n	80032c6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4413      	add	r3, r2
 8003298:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800329c:	461a      	mov	r2, r3
 800329e:	2308      	movs	r3, #8
 80032a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	334d      	adds	r3, #77	@ 0x4d
 80032b2:	2206      	movs	r2, #6
 80032b4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	78fa      	ldrb	r2, [r7, #3]
 80032bc:	4611      	mov	r1, r2
 80032be:	4618      	mov	r0, r3
 80032c0:	f005 f869 	bl	8008396 <USB_HC_Halt>
 80032c4:	e04e      	b.n	8003364 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	4611      	mov	r1, r2
 80032ce:	4618      	mov	r0, r3
 80032d0:	f004 fabd 	bl	800784e <USB_ReadChInterrupts>
 80032d4:	4603      	mov	r3, r0
 80032d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032de:	d11b      	bne.n	8003318 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ec:	461a      	mov	r2, r3
 80032ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80032f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	334d      	adds	r3, #77	@ 0x4d
 8003304:	2209      	movs	r2, #9
 8003306:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	78fa      	ldrb	r2, [r7, #3]
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f005 f840 	bl	8008396 <USB_HC_Halt>
 8003316:	e025      	b.n	8003364 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	4611      	mov	r1, r2
 8003320:	4618      	mov	r0, r3
 8003322:	f004 fa94 	bl	800784e <USB_ReadChInterrupts>
 8003326:	4603      	mov	r3, r0
 8003328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800332c:	2b80      	cmp	r3, #128	@ 0x80
 800332e:	d119      	bne.n	8003364 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800333c:	461a      	mov	r2, r3
 800333e:	2380      	movs	r3, #128	@ 0x80
 8003340:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	334d      	adds	r3, #77	@ 0x4d
 8003352:	2207      	movs	r2, #7
 8003354:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	4611      	mov	r1, r2
 800335e:	4618      	mov	r0, r3
 8003360:	f005 f819 	bl	8008396 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	78fa      	ldrb	r2, [r7, #3]
 800336a:	4611      	mov	r1, r2
 800336c:	4618      	mov	r0, r3
 800336e:	f004 fa6e 	bl	800784e <USB_ReadChInterrupts>
 8003372:	4603      	mov	r3, r0
 8003374:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003378:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800337c:	d112      	bne.n	80033a4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	4611      	mov	r1, r2
 8003386:	4618      	mov	r0, r3
 8003388:	f005 f805 	bl	8008396 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800338c:	78fb      	ldrb	r3, [r7, #3]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4413      	add	r3, r2
 8003394:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003398:	461a      	mov	r2, r3
 800339a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800339e:	6093      	str	r3, [r2, #8]
 80033a0:	f000 bd75 	b.w	8003e8e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	4611      	mov	r1, r2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f004 fa4e 	bl	800784e <USB_ReadChInterrupts>
 80033b2:	4603      	mov	r3, r0
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	f040 8128 	bne.w	800360e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ca:	461a      	mov	r2, r3
 80033cc:	2320      	movs	r3, #32
 80033ce:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	331b      	adds	r3, #27
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d119      	bne.n	800341a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	331b      	adds	r3, #27
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033fa:	78fb      	ldrb	r3, [r7, #3]
 80033fc:	015a      	lsls	r2, r3, #5
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4413      	add	r3, r2
 8003402:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	78fa      	ldrb	r2, [r7, #3]
 800340a:	0151      	lsls	r1, r2, #5
 800340c:	693a      	ldr	r2, [r7, #16]
 800340e:	440a      	add	r2, r1
 8003410:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003414:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003418:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	799b      	ldrb	r3, [r3, #6]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d01b      	beq.n	800345a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003422:	78fa      	ldrb	r2, [r7, #3]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	3330      	adds	r3, #48	@ 0x30
 8003432:	6819      	ldr	r1, [r3, #0]
 8003434:	78fb      	ldrb	r3, [r7, #3]
 8003436:	015a      	lsls	r2, r3, #5
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	4413      	add	r3, r2
 800343c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003446:	78fa      	ldrb	r2, [r7, #3]
 8003448:	1ac9      	subs	r1, r1, r3
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4403      	add	r3, r0
 8003456:	3338      	adds	r3, #56	@ 0x38
 8003458:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	334d      	adds	r3, #77	@ 0x4d
 800346a:	2201      	movs	r2, #1
 800346c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	3344      	adds	r3, #68	@ 0x44
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4413      	add	r3, r2
 800348a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800348e:	461a      	mov	r2, r3
 8003490:	2301      	movs	r3, #1
 8003492:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003494:	78fa      	ldrb	r2, [r7, #3]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	3326      	adds	r3, #38	@ 0x26
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	3326      	adds	r3, #38	@ 0x26
 80034ba:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d110      	bne.n	80034e2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	4611      	mov	r1, r2
 80034c8:	4618      	mov	r0, r3
 80034ca:	f004 ff64 	bl	8008396 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	015a      	lsls	r2, r3, #5
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	4413      	add	r3, r2
 80034d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034da:	461a      	mov	r2, r3
 80034dc:	2310      	movs	r3, #16
 80034de:	6093      	str	r3, [r2, #8]
 80034e0:	e03d      	b.n	800355e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80034e2:	78fa      	ldrb	r2, [r7, #3]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	1a9b      	subs	r3, r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	3326      	adds	r3, #38	@ 0x26
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b03      	cmp	r3, #3
 80034f6:	d00a      	beq.n	800350e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80034f8:	78fa      	ldrb	r2, [r7, #3]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	3326      	adds	r3, #38	@ 0x26
 8003508:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800350a:	2b01      	cmp	r3, #1
 800350c:	d127      	bne.n	800355e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4413      	add	r3, r2
 8003516:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	78fa      	ldrb	r2, [r7, #3]
 800351e:	0151      	lsls	r1, r2, #5
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	440a      	add	r2, r1
 8003524:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003528:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800352c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	334c      	adds	r3, #76	@ 0x4c
 800353e:	2201      	movs	r2, #1
 8003540:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	334c      	adds	r3, #76	@ 0x4c
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	4619      	mov	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f007 fa75 	bl	800aa48 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	799b      	ldrb	r3, [r3, #6]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d13b      	bne.n	80035de <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	4613      	mov	r3, r2
 800356c:	011b      	lsls	r3, r3, #4
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	3338      	adds	r3, #56	@ 0x38
 8003576:	6819      	ldr	r1, [r3, #0]
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4403      	add	r3, r0
 8003586:	3328      	adds	r3, #40	@ 0x28
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	440b      	add	r3, r1
 800358c:	1e59      	subs	r1, r3, #1
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4403      	add	r3, r0
 800359c:	3328      	adds	r3, #40	@ 0x28
 800359e:	881b      	ldrh	r3, [r3, #0]
 80035a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8470 	beq.w	8003e8e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80035ae:	78fa      	ldrb	r2, [r7, #3]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	333c      	adds	r3, #60	@ 0x3c
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	78fa      	ldrb	r2, [r7, #3]
 80035c2:	f083 0301 	eor.w	r3, r3, #1
 80035c6:	b2d8      	uxtb	r0, r3
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	4613      	mov	r3, r2
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	1a9b      	subs	r3, r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	440b      	add	r3, r1
 80035d4:	333c      	adds	r3, #60	@ 0x3c
 80035d6:	4602      	mov	r2, r0
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	f000 bc58 	b.w	8003e8e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80035de:	78fa      	ldrb	r2, [r7, #3]
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	333c      	adds	r3, #60	@ 0x3c
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	f083 0301 	eor.w	r3, r3, #1
 80035f6:	b2d8      	uxtb	r0, r3
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	440b      	add	r3, r1
 8003604:	333c      	adds	r3, #60	@ 0x3c
 8003606:	4602      	mov	r2, r0
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	f000 bc40 	b.w	8003e8e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	4611      	mov	r1, r2
 8003616:	4618      	mov	r0, r3
 8003618:	f004 f919 	bl	800784e <USB_ReadChInterrupts>
 800361c:	4603      	mov	r3, r0
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b20      	cmp	r3, #32
 8003624:	d131      	bne.n	800368a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003626:	78fb      	ldrb	r3, [r7, #3]
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4413      	add	r3, r2
 800362e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003632:	461a      	mov	r2, r3
 8003634:	2320      	movs	r3, #32
 8003636:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	331a      	adds	r3, #26
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b01      	cmp	r3, #1
 800364c:	f040 841f 	bne.w	8003e8e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003650:	78fa      	ldrb	r2, [r7, #3]
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	1a9b      	subs	r3, r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	331b      	adds	r3, #27
 8003660:	2201      	movs	r2, #1
 8003662:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	334d      	adds	r3, #77	@ 0x4d
 8003674:	2203      	movs	r2, #3
 8003676:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	78fa      	ldrb	r2, [r7, #3]
 800367e:	4611      	mov	r1, r2
 8003680:	4618      	mov	r0, r3
 8003682:	f004 fe88 	bl	8008396 <USB_HC_Halt>
 8003686:	f000 bc02 	b.w	8003e8e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	4611      	mov	r1, r2
 8003692:	4618      	mov	r0, r3
 8003694:	f004 f8db 	bl	800784e <USB_ReadChInterrupts>
 8003698:	4603      	mov	r3, r0
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b02      	cmp	r3, #2
 80036a0:	f040 8305 	bne.w	8003cae <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	015a      	lsls	r2, r3, #5
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4413      	add	r3, r2
 80036ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b0:	461a      	mov	r2, r3
 80036b2:	2302      	movs	r3, #2
 80036b4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	334d      	adds	r3, #77	@ 0x4d
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d114      	bne.n	80036f6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036cc:	78fa      	ldrb	r2, [r7, #3]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	334d      	adds	r3, #77	@ 0x4d
 80036dc:	2202      	movs	r2, #2
 80036de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	334c      	adds	r3, #76	@ 0x4c
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]
 80036f4:	e2cc      	b.n	8003c90 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	334d      	adds	r3, #77	@ 0x4d
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b06      	cmp	r3, #6
 800370a:	d114      	bne.n	8003736 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800370c:	78fa      	ldrb	r2, [r7, #3]
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	334d      	adds	r3, #77	@ 0x4d
 800371c:	2202      	movs	r2, #2
 800371e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	334c      	adds	r3, #76	@ 0x4c
 8003730:	2205      	movs	r2, #5
 8003732:	701a      	strb	r2, [r3, #0]
 8003734:	e2ac      	b.n	8003c90 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003736:	78fa      	ldrb	r2, [r7, #3]
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	334d      	adds	r3, #77	@ 0x4d
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b07      	cmp	r3, #7
 800374a:	d00b      	beq.n	8003764 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4613      	mov	r3, r2
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	1a9b      	subs	r3, r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	440b      	add	r3, r1
 800375a:	334d      	adds	r3, #77	@ 0x4d
 800375c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800375e:	2b09      	cmp	r3, #9
 8003760:	f040 80a6 	bne.w	80038b0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	334d      	adds	r3, #77	@ 0x4d
 8003774:	2202      	movs	r2, #2
 8003776:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	3344      	adds	r3, #68	@ 0x44
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	1c59      	adds	r1, r3, #1
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4403      	add	r3, r0
 8003798:	3344      	adds	r3, #68	@ 0x44
 800379a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	011b      	lsls	r3, r3, #4
 80037a4:	1a9b      	subs	r3, r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	3344      	adds	r3, #68	@ 0x44
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d943      	bls.n	800383a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80037b2:	78fa      	ldrb	r2, [r7, #3]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	1a9b      	subs	r3, r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	440b      	add	r3, r1
 80037c0:	3344      	adds	r3, #68	@ 0x44
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80037c6:	78fa      	ldrb	r2, [r7, #3]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	4613      	mov	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	1a9b      	subs	r3, r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	440b      	add	r3, r1
 80037d4:	331a      	adds	r3, #26
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d123      	bne.n	8003824 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80037dc:	78fa      	ldrb	r2, [r7, #3]
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	1a9b      	subs	r3, r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	331b      	adds	r3, #27
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	440b      	add	r3, r1
 80037fe:	331c      	adds	r3, #28
 8003800:	2200      	movs	r2, #0
 8003802:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	4413      	add	r3, r2
 800380c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	78fa      	ldrb	r2, [r7, #3]
 8003814:	0151      	lsls	r1, r2, #5
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	440a      	add	r2, r1
 800381a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800381e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003822:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003824:	78fa      	ldrb	r2, [r7, #3]
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	334c      	adds	r3, #76	@ 0x4c
 8003834:	2204      	movs	r2, #4
 8003836:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003838:	e229      	b.n	8003c8e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	334c      	adds	r3, #76	@ 0x4c
 800384a:	2202      	movs	r2, #2
 800384c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	3326      	adds	r3, #38	@ 0x26
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00b      	beq.n	800387c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	4613      	mov	r3, r2
 800386a:	011b      	lsls	r3, r3, #4
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	3326      	adds	r3, #38	@ 0x26
 8003874:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003876:	2b02      	cmp	r3, #2
 8003878:	f040 8209 	bne.w	8003c8e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4413      	add	r3, r2
 8003884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003892:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800389a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800389c:	78fb      	ldrb	r3, [r7, #3]
 800389e:	015a      	lsls	r2, r3, #5
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	4413      	add	r3, r2
 80038a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038a8:	461a      	mov	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80038ae:	e1ee      	b.n	8003c8e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	334d      	adds	r3, #77	@ 0x4d
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b05      	cmp	r3, #5
 80038c4:	f040 80c8 	bne.w	8003a58 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	334d      	adds	r3, #77	@ 0x4d
 80038d8:	2202      	movs	r2, #2
 80038da:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80038dc:	78fa      	ldrb	r2, [r7, #3]
 80038de:	6879      	ldr	r1, [r7, #4]
 80038e0:	4613      	mov	r3, r2
 80038e2:	011b      	lsls	r3, r3, #4
 80038e4:	1a9b      	subs	r3, r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	331b      	adds	r3, #27
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	f040 81ce 	bne.w	8003c90 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	3326      	adds	r3, #38	@ 0x26
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b03      	cmp	r3, #3
 8003908:	d16b      	bne.n	80039e2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	4613      	mov	r3, r2
 8003910:	011b      	lsls	r3, r3, #4
 8003912:	1a9b      	subs	r3, r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	3348      	adds	r3, #72	@ 0x48
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	1c59      	adds	r1, r3, #1
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	011b      	lsls	r3, r3, #4
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4403      	add	r3, r0
 800392a:	3348      	adds	r3, #72	@ 0x48
 800392c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	3348      	adds	r3, #72	@ 0x48
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d943      	bls.n	80039cc <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	3348      	adds	r3, #72	@ 0x48
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	331b      	adds	r3, #27
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800396c:	78fa      	ldrb	r2, [r7, #3]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	3344      	adds	r3, #68	@ 0x44
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d809      	bhi.n	8003996 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	331c      	adds	r3, #28
 8003992:	2201      	movs	r2, #1
 8003994:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003996:	78fb      	ldrb	r3, [r7, #3]
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4413      	add	r3, r2
 800399e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	0151      	lsls	r1, r2, #5
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	440a      	add	r2, r1
 80039ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039b4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80039b6:	78fa      	ldrb	r2, [r7, #3]
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	011b      	lsls	r3, r3, #4
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	440b      	add	r3, r1
 80039c4:	334c      	adds	r3, #76	@ 0x4c
 80039c6:	2204      	movs	r2, #4
 80039c8:	701a      	strb	r2, [r3, #0]
 80039ca:	e014      	b.n	80039f6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039cc:	78fa      	ldrb	r2, [r7, #3]
 80039ce:	6879      	ldr	r1, [r7, #4]
 80039d0:	4613      	mov	r3, r2
 80039d2:	011b      	lsls	r3, r3, #4
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	334c      	adds	r3, #76	@ 0x4c
 80039dc:	2202      	movs	r2, #2
 80039de:	701a      	strb	r2, [r3, #0]
 80039e0:	e009      	b.n	80039f6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	334c      	adds	r3, #76	@ 0x4c
 80039f2:	2202      	movs	r2, #2
 80039f4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	3326      	adds	r3, #38	@ 0x26
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00b      	beq.n	8003a24 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	3326      	adds	r3, #38	@ 0x26
 8003a1c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	f040 8136 	bne.w	8003c90 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003a3a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a42:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003a44:	78fb      	ldrb	r3, [r7, #3]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a50:	461a      	mov	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	e11b      	b.n	8003c90 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	334d      	adds	r3, #77	@ 0x4d
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	f040 8081 	bne.w	8003b72 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a70:	78fa      	ldrb	r2, [r7, #3]
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	334d      	adds	r3, #77	@ 0x4d
 8003a80:	2202      	movs	r2, #2
 8003a82:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003a84:	78fa      	ldrb	r2, [r7, #3]
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	331b      	adds	r3, #27
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	f040 80fa 	bne.w	8003c90 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a9c:	78fa      	ldrb	r2, [r7, #3]
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	1a9b      	subs	r3, r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	334c      	adds	r3, #76	@ 0x4c
 8003aac:	2202      	movs	r2, #2
 8003aae:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	78fa      	ldrb	r2, [r7, #3]
 8003ac0:	0151      	lsls	r1, r2, #5
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	440a      	add	r2, r1
 8003ac6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003aca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ace:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	0151      	lsls	r1, r2, #5
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	440a      	add	r2, r1
 8003ae6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003aea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aee:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	0151      	lsls	r1, r2, #5
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	440a      	add	r2, r1
 8003b06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b0a:	f023 0320 	bic.w	r3, r3, #32
 8003b0e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	3326      	adds	r3, #38	@ 0x26
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00b      	beq.n	8003b3e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b26:	78fa      	ldrb	r2, [r7, #3]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	3326      	adds	r3, #38	@ 0x26
 8003b36:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	f040 80a9 	bne.w	8003c90 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b3e:	78fb      	ldrb	r3, [r7, #3]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b54:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b5c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b5e:	78fb      	ldrb	r3, [r7, #3]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	e08e      	b.n	8003c90 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	334d      	adds	r3, #77	@ 0x4d
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b04      	cmp	r3, #4
 8003b86:	d143      	bne.n	8003c10 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	334d      	adds	r3, #77	@ 0x4d
 8003b98:	2202      	movs	r2, #2
 8003b9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b9c:	78fa      	ldrb	r2, [r7, #3]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	1a9b      	subs	r3, r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	334c      	adds	r3, #76	@ 0x4c
 8003bac:	2202      	movs	r2, #2
 8003bae:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bb0:	78fa      	ldrb	r2, [r7, #3]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	3326      	adds	r3, #38	@ 0x26
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	3326      	adds	r3, #38	@ 0x26
 8003bd6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d159      	bne.n	8003c90 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bf2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bfa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c08:	461a      	mov	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6013      	str	r3, [r2, #0]
 8003c0e:	e03f      	b.n	8003c90 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	334d      	adds	r3, #77	@ 0x4d
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b08      	cmp	r3, #8
 8003c24:	d126      	bne.n	8003c74 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	334d      	adds	r3, #77	@ 0x4d
 8003c36:	2202      	movs	r2, #2
 8003c38:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	3344      	adds	r3, #68	@ 0x44
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	1c59      	adds	r1, r3, #1
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4403      	add	r3, r0
 8003c5a:	3344      	adds	r3, #68	@ 0x44
 8003c5c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c5e:	78fa      	ldrb	r2, [r7, #3]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	334c      	adds	r3, #76	@ 0x4c
 8003c6e:	2204      	movs	r2, #4
 8003c70:	701a      	strb	r2, [r3, #0]
 8003c72:	e00d      	b.n	8003c90 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	334d      	adds	r3, #77	@ 0x4d
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	f000 8100 	beq.w	8003e8c <HCD_HC_IN_IRQHandler+0xcca>
 8003c8c:	e000      	b.n	8003c90 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c8e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	1a9b      	subs	r3, r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	334c      	adds	r3, #76	@ 0x4c
 8003ca0:	781a      	ldrb	r2, [r3, #0]
 8003ca2:	78fb      	ldrb	r3, [r7, #3]
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f006 fece 	bl	800aa48 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003cac:	e0ef      	b.n	8003e8e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	78fa      	ldrb	r2, [r7, #3]
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f003 fdc9 	bl	800784e <USB_ReadChInterrupts>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc2:	2b40      	cmp	r3, #64	@ 0x40
 8003cc4:	d12f      	bne.n	8003d26 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003cc6:	78fb      	ldrb	r3, [r7, #3]
 8003cc8:	015a      	lsls	r2, r3, #5
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	4413      	add	r3, r2
 8003cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	2340      	movs	r3, #64	@ 0x40
 8003cd6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003cd8:	78fa      	ldrb	r2, [r7, #3]
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	334d      	adds	r3, #77	@ 0x4d
 8003ce8:	2205      	movs	r2, #5
 8003cea:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003cec:	78fa      	ldrb	r2, [r7, #3]
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	331a      	adds	r3, #26
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	3344      	adds	r3, #68	@ 0x44
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f004 fb39 	bl	8008396 <USB_HC_Halt>
 8003d24:	e0b3      	b.n	8003e8e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	78fa      	ldrb	r2, [r7, #3]
 8003d2c:	4611      	mov	r1, r2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f003 fd8d 	bl	800784e <USB_ReadChInterrupts>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f003 0310 	and.w	r3, r3, #16
 8003d3a:	2b10      	cmp	r3, #16
 8003d3c:	f040 80a7 	bne.w	8003e8e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003d40:	78fa      	ldrb	r2, [r7, #3]
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	3326      	adds	r3, #38	@ 0x26
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d11b      	bne.n	8003d8e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d56:	78fa      	ldrb	r2, [r7, #3]
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	1a9b      	subs	r3, r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	3344      	adds	r3, #68	@ 0x44
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003d6a:	78fa      	ldrb	r2, [r7, #3]
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	334d      	adds	r3, #77	@ 0x4d
 8003d7a:	2204      	movs	r2, #4
 8003d7c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	78fa      	ldrb	r2, [r7, #3]
 8003d84:	4611      	mov	r1, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f004 fb05 	bl	8008396 <USB_HC_Halt>
 8003d8c:	e03f      	b.n	8003e0e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	3326      	adds	r3, #38	@ 0x26
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003da4:	78fa      	ldrb	r2, [r7, #3]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	3326      	adds	r3, #38	@ 0x26
 8003db4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d129      	bne.n	8003e0e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003dba:	78fa      	ldrb	r2, [r7, #3]
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	1a9b      	subs	r3, r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	3344      	adds	r3, #68	@ 0x44
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	799b      	ldrb	r3, [r3, #6]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HCD_HC_IN_IRQHandler+0xc2a>
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	331b      	adds	r3, #27
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d110      	bne.n	8003e0e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003dec:	78fa      	ldrb	r2, [r7, #3]
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	334d      	adds	r3, #77	@ 0x4d
 8003dfc:	2204      	movs	r2, #4
 8003dfe:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	78fa      	ldrb	r2, [r7, #3]
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f004 fac4 	bl	8008396 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003e0e:	78fa      	ldrb	r2, [r7, #3]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	331b      	adds	r3, #27
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d129      	bne.n	8003e78 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	331b      	adds	r3, #27
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	78fa      	ldrb	r2, [r7, #3]
 8003e48:	0151      	lsls	r1, r2, #5
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	440a      	add	r2, r1
 8003e4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e56:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003e58:	78fb      	ldrb	r3, [r7, #3]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	78fa      	ldrb	r2, [r7, #3]
 8003e68:	0151      	lsls	r1, r2, #5
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	440a      	add	r2, r1
 8003e6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e72:	f043 0320 	orr.w	r3, r3, #32
 8003e76:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e84:	461a      	mov	r2, r3
 8003e86:	2310      	movs	r3, #16
 8003e88:	6093      	str	r3, [r2, #8]
 8003e8a:	e000      	b.n	8003e8e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003e8c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	78fa      	ldrb	r2, [r7, #3]
 8003eb0:	4611      	mov	r1, r2
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f003 fccb 	bl	800784e <USB_ReadChInterrupts>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f003 0304 	and.w	r3, r3, #4
 8003ebe:	2b04      	cmp	r3, #4
 8003ec0:	d11b      	bne.n	8003efa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ece:	461a      	mov	r2, r3
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003ed4:	78fa      	ldrb	r2, [r7, #3]
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	011b      	lsls	r3, r3, #4
 8003edc:	1a9b      	subs	r3, r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	334d      	adds	r3, #77	@ 0x4d
 8003ee4:	2207      	movs	r2, #7
 8003ee6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	78fa      	ldrb	r2, [r7, #3]
 8003eee:	4611      	mov	r1, r2
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f004 fa50 	bl	8008396 <USB_HC_Halt>
 8003ef6:	f000 bc6f 	b.w	80047d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	78fa      	ldrb	r2, [r7, #3]
 8003f00:	4611      	mov	r1, r2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f003 fca3 	bl	800784e <USB_ReadChInterrupts>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	f040 8082 	bne.w	8004018 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f20:	461a      	mov	r2, r3
 8003f22:	2320      	movs	r3, #32
 8003f24:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003f26:	78fa      	ldrb	r2, [r7, #3]
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	011b      	lsls	r3, r3, #4
 8003f2e:	1a9b      	subs	r3, r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	440b      	add	r3, r1
 8003f34:	3319      	adds	r3, #25
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d124      	bne.n	8003f86 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003f3c:	78fa      	ldrb	r2, [r7, #3]
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	4613      	mov	r3, r2
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	1a9b      	subs	r3, r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	3319      	adds	r3, #25
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f50:	78fa      	ldrb	r2, [r7, #3]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	4613      	mov	r3, r2
 8003f56:	011b      	lsls	r3, r3, #4
 8003f58:	1a9b      	subs	r3, r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	334c      	adds	r3, #76	@ 0x4c
 8003f60:	2202      	movs	r2, #2
 8003f62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003f64:	78fa      	ldrb	r2, [r7, #3]
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	011b      	lsls	r3, r3, #4
 8003f6c:	1a9b      	subs	r3, r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	440b      	add	r3, r1
 8003f72:	334d      	adds	r3, #77	@ 0x4d
 8003f74:	2203      	movs	r2, #3
 8003f76:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	78fa      	ldrb	r2, [r7, #3]
 8003f7e:	4611      	mov	r1, r2
 8003f80:	4618      	mov	r0, r3
 8003f82:	f004 fa08 	bl	8008396 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003f86:	78fa      	ldrb	r2, [r7, #3]
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	1a9b      	subs	r3, r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	440b      	add	r3, r1
 8003f94:	331a      	adds	r3, #26
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	f040 841d 	bne.w	80047d8 <HCD_HC_OUT_IRQHandler+0x944>
 8003f9e:	78fa      	ldrb	r2, [r7, #3]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	331b      	adds	r3, #27
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f040 8411 	bne.w	80047d8 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	3326      	adds	r3, #38	@ 0x26
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d009      	beq.n	8003fe0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003fcc:	78fa      	ldrb	r2, [r7, #3]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	331b      	adds	r3, #27
 8003fdc:	2201      	movs	r2, #1
 8003fde:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003fe0:	78fa      	ldrb	r2, [r7, #3]
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	334d      	adds	r3, #77	@ 0x4d
 8003ff0:	2203      	movs	r2, #3
 8003ff2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	78fa      	ldrb	r2, [r7, #3]
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f004 f9ca 	bl	8008396 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004002:	78fa      	ldrb	r2, [r7, #3]
 8004004:	6879      	ldr	r1, [r7, #4]
 8004006:	4613      	mov	r3, r2
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	1a9b      	subs	r3, r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	440b      	add	r3, r1
 8004010:	3344      	adds	r3, #68	@ 0x44
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	e3df      	b.n	80047d8 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	78fa      	ldrb	r2, [r7, #3]
 800401e:	4611      	mov	r1, r2
 8004020:	4618      	mov	r0, r3
 8004022:	f003 fc14 	bl	800784e <USB_ReadChInterrupts>
 8004026:	4603      	mov	r3, r0
 8004028:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800402c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004030:	d111      	bne.n	8004056 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4413      	add	r3, r2
 800403a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800403e:	461a      	mov	r2, r3
 8004040:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004044:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	78fa      	ldrb	r2, [r7, #3]
 800404c:	4611      	mov	r1, r2
 800404e:	4618      	mov	r0, r3
 8004050:	f004 f9a1 	bl	8008396 <USB_HC_Halt>
 8004054:	e3c0      	b.n	80047d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	78fa      	ldrb	r2, [r7, #3]
 800405c:	4611      	mov	r1, r2
 800405e:	4618      	mov	r0, r3
 8004060:	f003 fbf5 	bl	800784e <USB_ReadChInterrupts>
 8004064:	4603      	mov	r3, r0
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b01      	cmp	r3, #1
 800406c:	d168      	bne.n	8004140 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800406e:	78fa      	ldrb	r2, [r7, #3]
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	3344      	adds	r3, #68	@ 0x44
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	4611      	mov	r1, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f003 fbdf 	bl	800784e <USB_ReadChInterrupts>
 8004090:	4603      	mov	r3, r0
 8004092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004096:	2b40      	cmp	r3, #64	@ 0x40
 8004098:	d112      	bne.n	80040c0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800409a:	78fa      	ldrb	r2, [r7, #3]
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	4613      	mov	r3, r2
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	1a9b      	subs	r3, r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	440b      	add	r3, r1
 80040a8:	3319      	adds	r3, #25
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040ba:	461a      	mov	r2, r3
 80040bc:	2340      	movs	r3, #64	@ 0x40
 80040be:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80040c0:	78fa      	ldrb	r2, [r7, #3]
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	4613      	mov	r3, r2
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	1a9b      	subs	r3, r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	331b      	adds	r3, #27
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d019      	beq.n	800410a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80040d6:	78fa      	ldrb	r2, [r7, #3]
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	1a9b      	subs	r3, r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	331b      	adds	r3, #27
 80040e6:	2200      	movs	r2, #0
 80040e8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	015a      	lsls	r2, r3, #5
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	4413      	add	r3, r2
 80040f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	78fa      	ldrb	r2, [r7, #3]
 80040fa:	0151      	lsls	r1, r2, #5
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	440a      	add	r2, r1
 8004100:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004104:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004108:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	4413      	add	r3, r2
 8004112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004116:	461a      	mov	r2, r3
 8004118:	2301      	movs	r3, #1
 800411a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	334d      	adds	r3, #77	@ 0x4d
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	78fa      	ldrb	r2, [r7, #3]
 8004136:	4611      	mov	r1, r2
 8004138:	4618      	mov	r0, r3
 800413a:	f004 f92c 	bl	8008396 <USB_HC_Halt>
 800413e:	e34b      	b.n	80047d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	4611      	mov	r1, r2
 8004148:	4618      	mov	r0, r3
 800414a:	f003 fb80 	bl	800784e <USB_ReadChInterrupts>
 800414e:	4603      	mov	r3, r0
 8004150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004154:	2b40      	cmp	r3, #64	@ 0x40
 8004156:	d139      	bne.n	80041cc <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004158:	78fa      	ldrb	r2, [r7, #3]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	334d      	adds	r3, #77	@ 0x4d
 8004168:	2205      	movs	r2, #5
 800416a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800416c:	78fa      	ldrb	r2, [r7, #3]
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	4613      	mov	r3, r2
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	1a9b      	subs	r3, r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	440b      	add	r3, r1
 800417a:	331a      	adds	r3, #26
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004182:	78fa      	ldrb	r2, [r7, #3]
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	1a9b      	subs	r3, r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	3319      	adds	r3, #25
 8004192:	2201      	movs	r2, #1
 8004194:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004196:	78fa      	ldrb	r2, [r7, #3]
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	4613      	mov	r3, r2
 800419c:	011b      	lsls	r3, r3, #4
 800419e:	1a9b      	subs	r3, r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	440b      	add	r3, r1
 80041a4:	3344      	adds	r3, #68	@ 0x44
 80041a6:	2200      	movs	r2, #0
 80041a8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	4611      	mov	r1, r2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f004 f8ef 	bl	8008396 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	015a      	lsls	r2, r3, #5
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	4413      	add	r3, r2
 80041c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c4:	461a      	mov	r2, r3
 80041c6:	2340      	movs	r3, #64	@ 0x40
 80041c8:	6093      	str	r3, [r2, #8]
 80041ca:	e305      	b.n	80047d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	78fa      	ldrb	r2, [r7, #3]
 80041d2:	4611      	mov	r1, r2
 80041d4:	4618      	mov	r0, r3
 80041d6:	f003 fb3a 	bl	800784e <USB_ReadChInterrupts>
 80041da:	4603      	mov	r3, r0
 80041dc:	f003 0308 	and.w	r3, r3, #8
 80041e0:	2b08      	cmp	r3, #8
 80041e2:	d11a      	bne.n	800421a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	015a      	lsls	r2, r3, #5
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	4413      	add	r3, r2
 80041ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041f0:	461a      	mov	r2, r3
 80041f2:	2308      	movs	r3, #8
 80041f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	4613      	mov	r3, r2
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	334d      	adds	r3, #77	@ 0x4d
 8004206:	2206      	movs	r2, #6
 8004208:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	4611      	mov	r1, r2
 8004212:	4618      	mov	r0, r3
 8004214:	f004 f8bf 	bl	8008396 <USB_HC_Halt>
 8004218:	e2de      	b.n	80047d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	78fa      	ldrb	r2, [r7, #3]
 8004220:	4611      	mov	r1, r2
 8004222:	4618      	mov	r0, r3
 8004224:	f003 fb13 	bl	800784e <USB_ReadChInterrupts>
 8004228:	4603      	mov	r3, r0
 800422a:	f003 0310 	and.w	r3, r3, #16
 800422e:	2b10      	cmp	r3, #16
 8004230:	d144      	bne.n	80042bc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	3344      	adds	r3, #68	@ 0x44
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004246:	78fa      	ldrb	r2, [r7, #3]
 8004248:	6879      	ldr	r1, [r7, #4]
 800424a:	4613      	mov	r3, r2
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	440b      	add	r3, r1
 8004254:	334d      	adds	r3, #77	@ 0x4d
 8004256:	2204      	movs	r2, #4
 8004258:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800425a:	78fa      	ldrb	r2, [r7, #3]
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	1a9b      	subs	r3, r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	3319      	adds	r3, #25
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d114      	bne.n	800429a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004270:	78fa      	ldrb	r2, [r7, #3]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	3318      	adds	r3, #24
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004286:	78fa      	ldrb	r2, [r7, #3]
 8004288:	6879      	ldr	r1, [r7, #4]
 800428a:	4613      	mov	r3, r2
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	1a9b      	subs	r3, r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	440b      	add	r3, r1
 8004294:	3319      	adds	r3, #25
 8004296:	2201      	movs	r2, #1
 8004298:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	4611      	mov	r1, r2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f004 f877 	bl	8008396 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80042a8:	78fb      	ldrb	r3, [r7, #3]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042b4:	461a      	mov	r2, r3
 80042b6:	2310      	movs	r3, #16
 80042b8:	6093      	str	r3, [r2, #8]
 80042ba:	e28d      	b.n	80047d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	78fa      	ldrb	r2, [r7, #3]
 80042c2:	4611      	mov	r1, r2
 80042c4:	4618      	mov	r0, r3
 80042c6:	f003 fac2 	bl	800784e <USB_ReadChInterrupts>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d0:	2b80      	cmp	r3, #128	@ 0x80
 80042d2:	d169      	bne.n	80043a8 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	799b      	ldrb	r3, [r3, #6]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d111      	bne.n	8004300 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80042dc:	78fa      	ldrb	r2, [r7, #3]
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	4613      	mov	r3, r2
 80042e2:	011b      	lsls	r3, r3, #4
 80042e4:	1a9b      	subs	r3, r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	440b      	add	r3, r1
 80042ea:	334d      	adds	r3, #77	@ 0x4d
 80042ec:	2207      	movs	r2, #7
 80042ee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	78fa      	ldrb	r2, [r7, #3]
 80042f6:	4611      	mov	r1, r2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f004 f84c 	bl	8008396 <USB_HC_Halt>
 80042fe:	e049      	b.n	8004394 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004300:	78fa      	ldrb	r2, [r7, #3]
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	3344      	adds	r3, #68	@ 0x44
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	1c59      	adds	r1, r3, #1
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	4613      	mov	r3, r2
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4403      	add	r3, r0
 8004320:	3344      	adds	r3, #68	@ 0x44
 8004322:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004324:	78fa      	ldrb	r2, [r7, #3]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	1a9b      	subs	r3, r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	3344      	adds	r3, #68	@ 0x44
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d922      	bls.n	8004380 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800433a:	78fa      	ldrb	r2, [r7, #3]
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	3344      	adds	r3, #68	@ 0x44
 800434a:	2200      	movs	r2, #0
 800434c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	1a9b      	subs	r3, r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	334c      	adds	r3, #76	@ 0x4c
 800435e:	2204      	movs	r2, #4
 8004360:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004362:	78fa      	ldrb	r2, [r7, #3]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	1a9b      	subs	r3, r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	334c      	adds	r3, #76	@ 0x4c
 8004372:	781a      	ldrb	r2, [r3, #0]
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	4619      	mov	r1, r3
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f006 fb65 	bl	800aa48 <HAL_HCD_HC_NotifyURBChange_Callback>
 800437e:	e009      	b.n	8004394 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004380:	78fa      	ldrb	r2, [r7, #3]
 8004382:	6879      	ldr	r1, [r7, #4]
 8004384:	4613      	mov	r3, r2
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	440b      	add	r3, r1
 800438e:	334c      	adds	r3, #76	@ 0x4c
 8004390:	2202      	movs	r2, #2
 8004392:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	4413      	add	r3, r2
 800439c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043a0:	461a      	mov	r2, r3
 80043a2:	2380      	movs	r3, #128	@ 0x80
 80043a4:	6093      	str	r3, [r2, #8]
 80043a6:	e217      	b.n	80047d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	4611      	mov	r1, r2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f003 fa4c 	bl	800784e <USB_ReadChInterrupts>
 80043b6:	4603      	mov	r3, r0
 80043b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c0:	d11b      	bne.n	80043fa <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80043c2:	78fa      	ldrb	r2, [r7, #3]
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	334d      	adds	r3, #77	@ 0x4d
 80043d2:	2209      	movs	r2, #9
 80043d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	78fa      	ldrb	r2, [r7, #3]
 80043dc:	4611      	mov	r1, r2
 80043de:	4618      	mov	r0, r3
 80043e0:	f003 ffd9 	bl	8008396 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043f0:	461a      	mov	r2, r3
 80043f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80043f6:	6093      	str	r3, [r2, #8]
 80043f8:	e1ee      	b.n	80047d8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	78fa      	ldrb	r2, [r7, #3]
 8004400:	4611      	mov	r1, r2
 8004402:	4618      	mov	r0, r3
 8004404:	f003 fa23 	bl	800784e <USB_ReadChInterrupts>
 8004408:	4603      	mov	r3, r0
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b02      	cmp	r3, #2
 8004410:	f040 81df 	bne.w	80047d2 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4413      	add	r3, r2
 800441c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004420:	461a      	mov	r2, r3
 8004422:	2302      	movs	r3, #2
 8004424:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	334d      	adds	r3, #77	@ 0x4d
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	2b01      	cmp	r3, #1
 800443a:	f040 8093 	bne.w	8004564 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800443e:	78fa      	ldrb	r2, [r7, #3]
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	334d      	adds	r3, #77	@ 0x4d
 800444e:	2202      	movs	r2, #2
 8004450:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004452:	78fa      	ldrb	r2, [r7, #3]
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	334c      	adds	r3, #76	@ 0x4c
 8004462:	2201      	movs	r2, #1
 8004464:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	3326      	adds	r3, #38	@ 0x26
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b02      	cmp	r3, #2
 800447a:	d00b      	beq.n	8004494 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800447c:	78fa      	ldrb	r2, [r7, #3]
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	4613      	mov	r3, r2
 8004482:	011b      	lsls	r3, r3, #4
 8004484:	1a9b      	subs	r3, r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	3326      	adds	r3, #38	@ 0x26
 800448c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800448e:	2b03      	cmp	r3, #3
 8004490:	f040 8190 	bne.w	80047b4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	799b      	ldrb	r3, [r3, #6]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d115      	bne.n	80044c8 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800449c:	78fa      	ldrb	r2, [r7, #3]
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	333d      	adds	r3, #61	@ 0x3d
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	78fa      	ldrb	r2, [r7, #3]
 80044b0:	f083 0301 	eor.w	r3, r3, #1
 80044b4:	b2d8      	uxtb	r0, r3
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	333d      	adds	r3, #61	@ 0x3d
 80044c4:	4602      	mov	r2, r0
 80044c6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	799b      	ldrb	r3, [r3, #6]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	f040 8171 	bne.w	80047b4 <HCD_HC_OUT_IRQHandler+0x920>
 80044d2:	78fa      	ldrb	r2, [r7, #3]
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	1a9b      	subs	r3, r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	440b      	add	r3, r1
 80044e0:	3334      	adds	r3, #52	@ 0x34
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8165 	beq.w	80047b4 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80044ea:	78fa      	ldrb	r2, [r7, #3]
 80044ec:	6879      	ldr	r1, [r7, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	1a9b      	subs	r3, r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	3334      	adds	r3, #52	@ 0x34
 80044fa:	6819      	ldr	r1, [r3, #0]
 80044fc:	78fa      	ldrb	r2, [r7, #3]
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	1a9b      	subs	r3, r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4403      	add	r3, r0
 800450a:	3328      	adds	r3, #40	@ 0x28
 800450c:	881b      	ldrh	r3, [r3, #0]
 800450e:	440b      	add	r3, r1
 8004510:	1e59      	subs	r1, r3, #1
 8004512:	78fa      	ldrb	r2, [r7, #3]
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	4613      	mov	r3, r2
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4403      	add	r3, r0
 8004520:	3328      	adds	r3, #40	@ 0x28
 8004522:	881b      	ldrh	r3, [r3, #0]
 8004524:	fbb1 f3f3 	udiv	r3, r1, r3
 8004528:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 813f 	beq.w	80047b4 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	1a9b      	subs	r3, r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	333d      	adds	r3, #61	@ 0x3d
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	78fa      	ldrb	r2, [r7, #3]
 800454a:	f083 0301 	eor.w	r3, r3, #1
 800454e:	b2d8      	uxtb	r0, r3
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	4613      	mov	r3, r2
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	1a9b      	subs	r3, r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	440b      	add	r3, r1
 800455c:	333d      	adds	r3, #61	@ 0x3d
 800455e:	4602      	mov	r2, r0
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	e127      	b.n	80047b4 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004564:	78fa      	ldrb	r2, [r7, #3]
 8004566:	6879      	ldr	r1, [r7, #4]
 8004568:	4613      	mov	r3, r2
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	1a9b      	subs	r3, r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	440b      	add	r3, r1
 8004572:	334d      	adds	r3, #77	@ 0x4d
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b03      	cmp	r3, #3
 8004578:	d120      	bne.n	80045bc <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800457a:	78fa      	ldrb	r2, [r7, #3]
 800457c:	6879      	ldr	r1, [r7, #4]
 800457e:	4613      	mov	r3, r2
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	1a9b      	subs	r3, r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	440b      	add	r3, r1
 8004588:	334d      	adds	r3, #77	@ 0x4d
 800458a:	2202      	movs	r2, #2
 800458c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	331b      	adds	r3, #27
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	f040 8107 	bne.w	80047b4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045a6:	78fa      	ldrb	r2, [r7, #3]
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	1a9b      	subs	r3, r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	334c      	adds	r3, #76	@ 0x4c
 80045b6:	2202      	movs	r2, #2
 80045b8:	701a      	strb	r2, [r3, #0]
 80045ba:	e0fb      	b.n	80047b4 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80045bc:	78fa      	ldrb	r2, [r7, #3]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	4613      	mov	r3, r2
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	334d      	adds	r3, #77	@ 0x4d
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b04      	cmp	r3, #4
 80045d0:	d13a      	bne.n	8004648 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80045d2:	78fa      	ldrb	r2, [r7, #3]
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	1a9b      	subs	r3, r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	334d      	adds	r3, #77	@ 0x4d
 80045e2:	2202      	movs	r2, #2
 80045e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80045e6:	78fa      	ldrb	r2, [r7, #3]
 80045e8:	6879      	ldr	r1, [r7, #4]
 80045ea:	4613      	mov	r3, r2
 80045ec:	011b      	lsls	r3, r3, #4
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	440b      	add	r3, r1
 80045f4:	334c      	adds	r3, #76	@ 0x4c
 80045f6:	2202      	movs	r2, #2
 80045f8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80045fa:	78fa      	ldrb	r2, [r7, #3]
 80045fc:	6879      	ldr	r1, [r7, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	1a9b      	subs	r3, r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	331b      	adds	r3, #27
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b01      	cmp	r3, #1
 800460e:	f040 80d1 	bne.w	80047b4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004612:	78fa      	ldrb	r2, [r7, #3]
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	1a9b      	subs	r3, r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	331b      	adds	r3, #27
 8004622:	2200      	movs	r2, #0
 8004624:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004626:	78fb      	ldrb	r3, [r7, #3]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4413      	add	r3, r2
 800462e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	78fa      	ldrb	r2, [r7, #3]
 8004636:	0151      	lsls	r1, r2, #5
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	440a      	add	r2, r1
 800463c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004640:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004644:	6053      	str	r3, [r2, #4]
 8004646:	e0b5      	b.n	80047b4 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004648:	78fa      	ldrb	r2, [r7, #3]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	334d      	adds	r3, #77	@ 0x4d
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b05      	cmp	r3, #5
 800465c:	d114      	bne.n	8004688 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800465e:	78fa      	ldrb	r2, [r7, #3]
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	1a9b      	subs	r3, r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	334d      	adds	r3, #77	@ 0x4d
 800466e:	2202      	movs	r2, #2
 8004670:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	4613      	mov	r3, r2
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	1a9b      	subs	r3, r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	440b      	add	r3, r1
 8004680:	334c      	adds	r3, #76	@ 0x4c
 8004682:	2202      	movs	r2, #2
 8004684:	701a      	strb	r2, [r3, #0]
 8004686:	e095      	b.n	80047b4 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	011b      	lsls	r3, r3, #4
 8004690:	1a9b      	subs	r3, r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	334d      	adds	r3, #77	@ 0x4d
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b06      	cmp	r3, #6
 800469c:	d114      	bne.n	80046c8 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800469e:	78fa      	ldrb	r2, [r7, #3]
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	1a9b      	subs	r3, r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	334d      	adds	r3, #77	@ 0x4d
 80046ae:	2202      	movs	r2, #2
 80046b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80046b2:	78fa      	ldrb	r2, [r7, #3]
 80046b4:	6879      	ldr	r1, [r7, #4]
 80046b6:	4613      	mov	r3, r2
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	440b      	add	r3, r1
 80046c0:	334c      	adds	r3, #76	@ 0x4c
 80046c2:	2205      	movs	r2, #5
 80046c4:	701a      	strb	r2, [r3, #0]
 80046c6:	e075      	b.n	80047b4 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80046c8:	78fa      	ldrb	r2, [r7, #3]
 80046ca:	6879      	ldr	r1, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	440b      	add	r3, r1
 80046d6:	334d      	adds	r3, #77	@ 0x4d
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b07      	cmp	r3, #7
 80046dc:	d00a      	beq.n	80046f4 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80046de:	78fa      	ldrb	r2, [r7, #3]
 80046e0:	6879      	ldr	r1, [r7, #4]
 80046e2:	4613      	mov	r3, r2
 80046e4:	011b      	lsls	r3, r3, #4
 80046e6:	1a9b      	subs	r3, r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	440b      	add	r3, r1
 80046ec:	334d      	adds	r3, #77	@ 0x4d
 80046ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80046f0:	2b09      	cmp	r3, #9
 80046f2:	d170      	bne.n	80047d6 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046f4:	78fa      	ldrb	r2, [r7, #3]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	334d      	adds	r3, #77	@ 0x4d
 8004704:	2202      	movs	r2, #2
 8004706:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004708:	78fa      	ldrb	r2, [r7, #3]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	3344      	adds	r3, #68	@ 0x44
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	1c59      	adds	r1, r3, #1
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	4613      	mov	r3, r2
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	1a9b      	subs	r3, r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4403      	add	r3, r0
 8004728:	3344      	adds	r3, #68	@ 0x44
 800472a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800472c:	78fa      	ldrb	r2, [r7, #3]
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	4613      	mov	r3, r2
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	3344      	adds	r3, #68	@ 0x44
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d914      	bls.n	800476c <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004742:	78fa      	ldrb	r2, [r7, #3]
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	4613      	mov	r3, r2
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	1a9b      	subs	r3, r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	3344      	adds	r3, #68	@ 0x44
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	1a9b      	subs	r3, r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	334c      	adds	r3, #76	@ 0x4c
 8004766:	2204      	movs	r2, #4
 8004768:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800476a:	e022      	b.n	80047b2 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800476c:	78fa      	ldrb	r2, [r7, #3]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	334c      	adds	r3, #76	@ 0x4c
 800477c:	2202      	movs	r2, #2
 800477e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	4413      	add	r3, r2
 8004788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004796:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800479e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047ac:	461a      	mov	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047b2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80047b4:	78fa      	ldrb	r2, [r7, #3]
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	4613      	mov	r3, r2
 80047ba:	011b      	lsls	r3, r3, #4
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	440b      	add	r3, r1
 80047c2:	334c      	adds	r3, #76	@ 0x4c
 80047c4:	781a      	ldrb	r2, [r3, #0]
 80047c6:	78fb      	ldrb	r3, [r7, #3]
 80047c8:	4619      	mov	r1, r3
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f006 f93c 	bl	800aa48 <HAL_HCD_HC_NotifyURBChange_Callback>
 80047d0:	e002      	b.n	80047d8 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80047d2:	bf00      	nop
 80047d4:	e000      	b.n	80047d8 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80047d6:	bf00      	nop
  }
}
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b08a      	sub	sp, #40	@ 0x28
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ee:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	0c5b      	lsrs	r3, r3, #17
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	091b      	lsrs	r3, r3, #4
 800480e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004812:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b02      	cmp	r3, #2
 8004818:	d004      	beq.n	8004824 <HCD_RXQLVL_IRQHandler+0x46>
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b05      	cmp	r3, #5
 800481e:	f000 80b6 	beq.w	800498e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004822:	e0b7      	b.n	8004994 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 80b3 	beq.w	8004992 <HCD_RXQLVL_IRQHandler+0x1b4>
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4613      	mov	r3, r2
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	332c      	adds	r3, #44	@ 0x2c
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 80a7 	beq.w	8004992 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	4613      	mov	r3, r2
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	3338      	adds	r3, #56	@ 0x38
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	18d1      	adds	r1, r2, r3
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	4613      	mov	r3, r2
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4403      	add	r3, r0
 8004868:	3334      	adds	r3, #52	@ 0x34
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4299      	cmp	r1, r3
 800486e:	f200 8083 	bhi.w	8004978 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4613      	mov	r3, r2
 800487c:	011b      	lsls	r3, r3, #4
 800487e:	1a9b      	subs	r3, r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	440b      	add	r3, r1
 8004884:	332c      	adds	r3, #44	@ 0x2c
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	b292      	uxth	r2, r2
 800488c:	4619      	mov	r1, r3
 800488e:	f002 ff73 	bl	8007778 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4613      	mov	r3, r2
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	1a9b      	subs	r3, r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	440b      	add	r3, r1
 80048a0:	332c      	adds	r3, #44	@ 0x2c
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	18d1      	adds	r1, r2, r3
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4613      	mov	r3, r2
 80048ae:	011b      	lsls	r3, r3, #4
 80048b0:	1a9b      	subs	r3, r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4403      	add	r3, r0
 80048b6:	332c      	adds	r3, #44	@ 0x2c
 80048b8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4613      	mov	r3, r2
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	3338      	adds	r3, #56	@ 0x38
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	18d1      	adds	r1, r2, r3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4613      	mov	r3, r2
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	1a9b      	subs	r3, r3, r2
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4403      	add	r3, r0
 80048de:	3338      	adds	r3, #56	@ 0x38
 80048e0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	0cdb      	lsrs	r3, r3, #19
 80048f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048f6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	4613      	mov	r3, r2
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	1a9b      	subs	r3, r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	3328      	adds	r3, #40	@ 0x28
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	4293      	cmp	r3, r2
 8004910:	d13f      	bne.n	8004992 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d03c      	beq.n	8004992 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	4413      	add	r3, r2
 8004920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800492e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004936:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	4413      	add	r3, r2
 8004940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004944:	461a      	mov	r2, r3
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	4613      	mov	r3, r2
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	1a9b      	subs	r3, r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	440b      	add	r3, r1
 8004958:	333c      	adds	r3, #60	@ 0x3c
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	f083 0301 	eor.w	r3, r3, #1
 8004960:	b2d8      	uxtb	r0, r3
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	4613      	mov	r3, r2
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	1a9b      	subs	r3, r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	440b      	add	r3, r1
 8004970:	333c      	adds	r3, #60	@ 0x3c
 8004972:	4602      	mov	r2, r0
 8004974:	701a      	strb	r2, [r3, #0]
      break;
 8004976:	e00c      	b.n	8004992 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4613      	mov	r3, r2
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	1a9b      	subs	r3, r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	334c      	adds	r3, #76	@ 0x4c
 8004988:	2204      	movs	r2, #4
 800498a:	701a      	strb	r2, [r3, #0]
      break;
 800498c:	e001      	b.n	8004992 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800498e:	bf00      	nop
 8004990:	e000      	b.n	8004994 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004992:	bf00      	nop
  }
}
 8004994:	bf00      	nop
 8004996:	3728      	adds	r7, #40	@ 0x28
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80049c8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d10b      	bne.n	80049ec <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d102      	bne.n	80049e4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f006 f816 	bl	800aa10 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f043 0302 	orr.w	r3, r3, #2
 80049ea:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d132      	bne.n	8004a5c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	f043 0308 	orr.w	r3, r3, #8
 80049fc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d126      	bne.n	8004a56 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	7a5b      	ldrb	r3, [r3, #9]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	d113      	bne.n	8004a38 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004a16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004a1a:	d106      	bne.n	8004a2a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2102      	movs	r1, #2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f003 f838 	bl	8007a98 <USB_InitFSLSPClkSel>
 8004a28:	e011      	b.n	8004a4e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2101      	movs	r1, #1
 8004a30:	4618      	mov	r0, r3
 8004a32:	f003 f831 	bl	8007a98 <USB_InitFSLSPClkSel>
 8004a36:	e00a      	b.n	8004a4e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	79db      	ldrb	r3, [r3, #7]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d106      	bne.n	8004a4e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004a46:	461a      	mov	r2, r3
 8004a48:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004a4c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f006 f808 	bl	800aa64 <HAL_HCD_PortEnabled_Callback>
 8004a54:	e002      	b.n	8004a5c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f006 f812 	bl	800aa80 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d103      	bne.n	8004a6e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f043 0320 	orr.w	r3, r3, #32
 8004a6c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004a74:	461a      	mov	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6013      	str	r3, [r2, #0]
}
 8004a7a:	bf00      	nop
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e12b      	b.n	8004cee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d106      	bne.n	8004ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7fc fbfc 	bl	80012a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2224      	movs	r2, #36	@ 0x24
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0201 	bic.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ad6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ae6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ae8:	f001 f8da 	bl	8005ca0 <HAL_RCC_GetPCLK1Freq>
 8004aec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	4a81      	ldr	r2, [pc, #516]	@ (8004cf8 <HAL_I2C_Init+0x274>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d807      	bhi.n	8004b08 <HAL_I2C_Init+0x84>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4a80      	ldr	r2, [pc, #512]	@ (8004cfc <HAL_I2C_Init+0x278>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	bf94      	ite	ls
 8004b00:	2301      	movls	r3, #1
 8004b02:	2300      	movhi	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	e006      	b.n	8004b16 <HAL_I2C_Init+0x92>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4a7d      	ldr	r2, [pc, #500]	@ (8004d00 <HAL_I2C_Init+0x27c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	bf94      	ite	ls
 8004b10:	2301      	movls	r3, #1
 8004b12:	2300      	movhi	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e0e7      	b.n	8004cee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	4a78      	ldr	r2, [pc, #480]	@ (8004d04 <HAL_I2C_Init+0x280>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	0c9b      	lsrs	r3, r3, #18
 8004b28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	4a6a      	ldr	r2, [pc, #424]	@ (8004cf8 <HAL_I2C_Init+0x274>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d802      	bhi.n	8004b58 <HAL_I2C_Init+0xd4>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	3301      	adds	r3, #1
 8004b56:	e009      	b.n	8004b6c <HAL_I2C_Init+0xe8>
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	4a69      	ldr	r2, [pc, #420]	@ (8004d08 <HAL_I2C_Init+0x284>)
 8004b64:	fba2 2303 	umull	r2, r3, r2, r3
 8004b68:	099b      	lsrs	r3, r3, #6
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	430b      	orrs	r3, r1
 8004b72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004b7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	495c      	ldr	r1, [pc, #368]	@ (8004cf8 <HAL_I2C_Init+0x274>)
 8004b88:	428b      	cmp	r3, r1
 8004b8a:	d819      	bhi.n	8004bc0 <HAL_I2C_Init+0x13c>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	1e59      	subs	r1, r3, #1
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b9a:	1c59      	adds	r1, r3, #1
 8004b9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004ba0:	400b      	ands	r3, r1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <HAL_I2C_Init+0x138>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	1e59      	subs	r1, r3, #1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bba:	e051      	b.n	8004c60 <HAL_I2C_Init+0x1dc>
 8004bbc:	2304      	movs	r3, #4
 8004bbe:	e04f      	b.n	8004c60 <HAL_I2C_Init+0x1dc>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d111      	bne.n	8004bec <HAL_I2C_Init+0x168>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	1e58      	subs	r0, r3, #1
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6859      	ldr	r1, [r3, #4]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	005b      	lsls	r3, r3, #1
 8004bd4:	440b      	add	r3, r1
 8004bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bda:	3301      	adds	r3, #1
 8004bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	bf0c      	ite	eq
 8004be4:	2301      	moveq	r3, #1
 8004be6:	2300      	movne	r3, #0
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	e012      	b.n	8004c12 <HAL_I2C_Init+0x18e>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	1e58      	subs	r0, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6859      	ldr	r1, [r3, #4]
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	0099      	lsls	r1, r3, #2
 8004bfc:	440b      	add	r3, r1
 8004bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c02:	3301      	adds	r3, #1
 8004c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	bf0c      	ite	eq
 8004c0c:	2301      	moveq	r3, #1
 8004c0e:	2300      	movne	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_I2C_Init+0x196>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e022      	b.n	8004c60 <HAL_I2C_Init+0x1dc>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10e      	bne.n	8004c40 <HAL_I2C_Init+0x1bc>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	1e58      	subs	r0, r3, #1
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6859      	ldr	r1, [r3, #4]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	440b      	add	r3, r1
 8004c30:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c34:	3301      	adds	r3, #1
 8004c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c3e:	e00f      	b.n	8004c60 <HAL_I2C_Init+0x1dc>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	1e58      	subs	r0, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6859      	ldr	r1, [r3, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	440b      	add	r3, r1
 8004c4e:	0099      	lsls	r1, r3, #2
 8004c50:	440b      	add	r3, r1
 8004c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c56:	3301      	adds	r3, #1
 8004c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	6809      	ldr	r1, [r1, #0]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	69da      	ldr	r2, [r3, #28]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004c8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6911      	ldr	r1, [r2, #16]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	68d2      	ldr	r2, [r2, #12]
 8004c9a:	4311      	orrs	r1, r2
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	6812      	ldr	r2, [r2, #0]
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695a      	ldr	r2, [r3, #20]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	000186a0 	.word	0x000186a0
 8004cfc:	001e847f 	.word	0x001e847f
 8004d00:	003d08ff 	.word	0x003d08ff
 8004d04:	431bde83 	.word	0x431bde83
 8004d08:	10624dd3 	.word	0x10624dd3

08004d0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b088      	sub	sp, #32
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	607a      	str	r2, [r7, #4]
 8004d16:	461a      	mov	r2, r3
 8004d18:	460b      	mov	r3, r1
 8004d1a:	817b      	strh	r3, [r7, #10]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d20:	f7fc fcfe 	bl	8001720 <HAL_GetTick>
 8004d24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b20      	cmp	r3, #32
 8004d30:	f040 80e0 	bne.w	8004ef4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	2319      	movs	r3, #25
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	4970      	ldr	r1, [pc, #448]	@ (8004f00 <HAL_I2C_Master_Transmit+0x1f4>)
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f000 f964 	bl	800500c <I2C_WaitOnFlagUntilTimeout>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e0d3      	b.n	8004ef6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_I2C_Master_Transmit+0x50>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e0cc      	b.n	8004ef6 <HAL_I2C_Master_Transmit+0x1ea>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d007      	beq.n	8004d82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f042 0201 	orr.w	r2, r2, #1
 8004d80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2221      	movs	r2, #33	@ 0x21
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2210      	movs	r2, #16
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	893a      	ldrh	r2, [r7, #8]
 8004db2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4a50      	ldr	r2, [pc, #320]	@ (8004f04 <HAL_I2C_Master_Transmit+0x1f8>)
 8004dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004dc4:	8979      	ldrh	r1, [r7, #10]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	6a3a      	ldr	r2, [r7, #32]
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 f89c 	bl	8004f08 <I2C_MasterRequestWrite>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e08d      	b.n	8004ef6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dda:	2300      	movs	r3, #0
 8004ddc:	613b      	str	r3, [r7, #16]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	695b      	ldr	r3, [r3, #20]
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	613b      	str	r3, [r7, #16]
 8004dee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004df0:	e066      	b.n	8004ec0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	6a39      	ldr	r1, [r7, #32]
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 fa22 	bl	8005240 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00d      	beq.n	8004e1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d107      	bne.n	8004e1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e06b      	b.n	8004ef6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e22:	781a      	ldrb	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d11b      	bne.n	8004e94 <HAL_I2C_Master_Transmit+0x188>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d017      	beq.n	8004e94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e68:	781a      	ldrb	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e74:	1c5a      	adds	r2, r3, #1
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	3b01      	subs	r3, #1
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	6a39      	ldr	r1, [r7, #32]
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 fa19 	bl	80052d0 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00d      	beq.n	8004ec0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d107      	bne.n	8004ebc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004eba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e01a      	b.n	8004ef6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d194      	bne.n	8004df2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	e000      	b.n	8004ef6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004ef4:	2302      	movs	r3, #2
  }
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	00100002 	.word	0x00100002
 8004f04:	ffff0000 	.word	0xffff0000

08004f08 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af02      	add	r7, sp, #8
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	607a      	str	r2, [r7, #4]
 8004f12:	603b      	str	r3, [r7, #0]
 8004f14:	460b      	mov	r3, r1
 8004f16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b08      	cmp	r3, #8
 8004f22:	d006      	beq.n	8004f32 <I2C_MasterRequestWrite+0x2a>
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d003      	beq.n	8004f32 <I2C_MasterRequestWrite+0x2a>
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f30:	d108      	bne.n	8004f44 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	e00b      	b.n	8004f5c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f48:	2b12      	cmp	r3, #18
 8004f4a:	d107      	bne.n	8004f5c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f5a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f84f 	bl	800500c <I2C_WaitOnFlagUntilTimeout>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d00d      	beq.n	8004f90 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f82:	d103      	bne.n	8004f8c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e035      	b.n	8004ffc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f98:	d108      	bne.n	8004fac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f9a:	897b      	ldrh	r3, [r7, #10]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fa8:	611a      	str	r2, [r3, #16]
 8004faa:	e01b      	b.n	8004fe4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004fac:	897b      	ldrh	r3, [r7, #10]
 8004fae:	11db      	asrs	r3, r3, #7
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	f003 0306 	and.w	r3, r3, #6
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	f063 030f 	orn	r3, r3, #15
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	490e      	ldr	r1, [pc, #56]	@ (8005004 <I2C_MasterRequestWrite+0xfc>)
 8004fca:	68f8      	ldr	r0, [r7, #12]
 8004fcc:	f000 f898 	bl	8005100 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d001      	beq.n	8004fda <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e010      	b.n	8004ffc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004fda:	897b      	ldrh	r3, [r7, #10]
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	4907      	ldr	r1, [pc, #28]	@ (8005008 <I2C_MasterRequestWrite+0x100>)
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f888 	bl	8005100 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	00010008 	.word	0x00010008
 8005008:	00010002 	.word	0x00010002

0800500c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	603b      	str	r3, [r7, #0]
 8005018:	4613      	mov	r3, r2
 800501a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800501c:	e048      	b.n	80050b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005024:	d044      	beq.n	80050b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005026:	f7fc fb7b 	bl	8001720 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d302      	bcc.n	800503c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d139      	bne.n	80050b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	0c1b      	lsrs	r3, r3, #16
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b01      	cmp	r3, #1
 8005044:	d10d      	bne.n	8005062 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	43da      	mvns	r2, r3
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4013      	ands	r3, r2
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	bf0c      	ite	eq
 8005058:	2301      	moveq	r3, #1
 800505a:	2300      	movne	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	e00c      	b.n	800507c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	43da      	mvns	r2, r3
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	4013      	ands	r3, r2
 800506e:	b29b      	uxth	r3, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	bf0c      	ite	eq
 8005074:	2301      	moveq	r3, #1
 8005076:	2300      	movne	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	461a      	mov	r2, r3
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	429a      	cmp	r2, r3
 8005080:	d116      	bne.n	80050b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2220      	movs	r2, #32
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509c:	f043 0220 	orr.w	r2, r3, #32
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e023      	b.n	80050f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	0c1b      	lsrs	r3, r3, #16
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d10d      	bne.n	80050d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	43da      	mvns	r2, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	4013      	ands	r3, r2
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	bf0c      	ite	eq
 80050cc:	2301      	moveq	r3, #1
 80050ce:	2300      	movne	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	461a      	mov	r2, r3
 80050d4:	e00c      	b.n	80050f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	43da      	mvns	r2, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4013      	ands	r3, r2
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	bf0c      	ite	eq
 80050e8:	2301      	moveq	r3, #1
 80050ea:	2300      	movne	r3, #0
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	461a      	mov	r2, r3
 80050f0:	79fb      	ldrb	r3, [r7, #7]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d093      	beq.n	800501e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800510e:	e071      	b.n	80051f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800511a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800511e:	d123      	bne.n	8005168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800512e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005138:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005154:	f043 0204 	orr.w	r2, r3, #4
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e067      	b.n	8005238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800516e:	d041      	beq.n	80051f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005170:	f7fc fad6 	bl	8001720 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	d302      	bcc.n	8005186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d136      	bne.n	80051f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	0c1b      	lsrs	r3, r3, #16
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b01      	cmp	r3, #1
 800518e:	d10c      	bne.n	80051aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	43da      	mvns	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4013      	ands	r3, r2
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	bf14      	ite	ne
 80051a2:	2301      	movne	r3, #1
 80051a4:	2300      	moveq	r3, #0
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	e00b      	b.n	80051c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	43da      	mvns	r2, r3
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	4013      	ands	r3, r2
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	bf14      	ite	ne
 80051bc:	2301      	movne	r3, #1
 80051be:	2300      	moveq	r3, #0
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d016      	beq.n	80051f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e0:	f043 0220 	orr.w	r2, r3, #32
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e021      	b.n	8005238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	0c1b      	lsrs	r3, r3, #16
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d10c      	bne.n	8005218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	43da      	mvns	r2, r3
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	4013      	ands	r3, r2
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	bf14      	ite	ne
 8005210:	2301      	movne	r3, #1
 8005212:	2300      	moveq	r3, #0
 8005214:	b2db      	uxtb	r3, r3
 8005216:	e00b      	b.n	8005230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	43da      	mvns	r2, r3
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	4013      	ands	r3, r2
 8005224:	b29b      	uxth	r3, r3
 8005226:	2b00      	cmp	r3, #0
 8005228:	bf14      	ite	ne
 800522a:	2301      	movne	r3, #1
 800522c:	2300      	moveq	r3, #0
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	f47f af6d 	bne.w	8005110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800524c:	e034      	b.n	80052b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f886 	bl	8005360 <I2C_IsAcknowledgeFailed>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e034      	b.n	80052c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005264:	d028      	beq.n	80052b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005266:	f7fc fa5b 	bl	8001720 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	429a      	cmp	r2, r3
 8005274:	d302      	bcc.n	800527c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d11d      	bne.n	80052b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005286:	2b80      	cmp	r3, #128	@ 0x80
 8005288:	d016      	beq.n	80052b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2220      	movs	r2, #32
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a4:	f043 0220 	orr.w	r2, r3, #32
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e007      	b.n	80052c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c2:	2b80      	cmp	r3, #128	@ 0x80
 80052c4:	d1c3      	bne.n	800524e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052dc:	e034      	b.n	8005348 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 f83e 	bl	8005360 <I2C_IsAcknowledgeFailed>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d001      	beq.n	80052ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e034      	b.n	8005358 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f4:	d028      	beq.n	8005348 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f6:	f7fc fa13 	bl	8001720 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	429a      	cmp	r2, r3
 8005304:	d302      	bcc.n	800530c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d11d      	bne.n	8005348 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	f003 0304 	and.w	r3, r3, #4
 8005316:	2b04      	cmp	r3, #4
 8005318:	d016      	beq.n	8005348 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2220      	movs	r2, #32
 8005324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005334:	f043 0220 	orr.w	r2, r3, #32
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e007      	b.n	8005358 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b04      	cmp	r3, #4
 8005354:	d1c3      	bne.n	80052de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005356:	2300      	movs	r3, #0
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005372:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005376:	d11b      	bne.n	80053b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005380:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800539c:	f043 0204 	orr.w	r2, r3, #4
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e000      	b.n	80053b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
	...

080053c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b086      	sub	sp, #24
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e267      	b.n	80058a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d075      	beq.n	80054ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053de:	4b88      	ldr	r3, [pc, #544]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f003 030c 	and.w	r3, r3, #12
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d00c      	beq.n	8005404 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ea:	4b85      	ldr	r3, [pc, #532]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053f2:	2b08      	cmp	r3, #8
 80053f4:	d112      	bne.n	800541c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053f6:	4b82      	ldr	r3, [pc, #520]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005402:	d10b      	bne.n	800541c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005404:	4b7e      	ldr	r3, [pc, #504]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d05b      	beq.n	80054c8 <HAL_RCC_OscConfig+0x108>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d157      	bne.n	80054c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e242      	b.n	80058a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005424:	d106      	bne.n	8005434 <HAL_RCC_OscConfig+0x74>
 8005426:	4b76      	ldr	r3, [pc, #472]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a75      	ldr	r2, [pc, #468]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 800542c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	e01d      	b.n	8005470 <HAL_RCC_OscConfig+0xb0>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800543c:	d10c      	bne.n	8005458 <HAL_RCC_OscConfig+0x98>
 800543e:	4b70      	ldr	r3, [pc, #448]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a6f      	ldr	r2, [pc, #444]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 8005444:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	4b6d      	ldr	r3, [pc, #436]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a6c      	ldr	r2, [pc, #432]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 8005450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	e00b      	b.n	8005470 <HAL_RCC_OscConfig+0xb0>
 8005458:	4b69      	ldr	r3, [pc, #420]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a68      	ldr	r2, [pc, #416]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 800545e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005462:	6013      	str	r3, [r2, #0]
 8005464:	4b66      	ldr	r3, [pc, #408]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a65      	ldr	r2, [pc, #404]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 800546a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800546e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d013      	beq.n	80054a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005478:	f7fc f952 	bl	8001720 <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005480:	f7fc f94e 	bl	8001720 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b64      	cmp	r3, #100	@ 0x64
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e207      	b.n	80058a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005492:	4b5b      	ldr	r3, [pc, #364]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0f0      	beq.n	8005480 <HAL_RCC_OscConfig+0xc0>
 800549e:	e014      	b.n	80054ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a0:	f7fc f93e 	bl	8001720 <HAL_GetTick>
 80054a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054a6:	e008      	b.n	80054ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a8:	f7fc f93a 	bl	8001720 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	2b64      	cmp	r3, #100	@ 0x64
 80054b4:	d901      	bls.n	80054ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e1f3      	b.n	80058a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ba:	4b51      	ldr	r3, [pc, #324]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1f0      	bne.n	80054a8 <HAL_RCC_OscConfig+0xe8>
 80054c6:	e000      	b.n	80054ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d063      	beq.n	800559e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054d6:	4b4a      	ldr	r3, [pc, #296]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 030c 	and.w	r3, r3, #12
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00b      	beq.n	80054fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054e2:	4b47      	ldr	r3, [pc, #284]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054ea:	2b08      	cmp	r3, #8
 80054ec:	d11c      	bne.n	8005528 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ee:	4b44      	ldr	r3, [pc, #272]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d116      	bne.n	8005528 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054fa:	4b41      	ldr	r3, [pc, #260]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d005      	beq.n	8005512 <HAL_RCC_OscConfig+0x152>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d001      	beq.n	8005512 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e1c7      	b.n	80058a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005512:	4b3b      	ldr	r3, [pc, #236]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	4937      	ldr	r1, [pc, #220]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 8005522:	4313      	orrs	r3, r2
 8005524:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005526:	e03a      	b.n	800559e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d020      	beq.n	8005572 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005530:	4b34      	ldr	r3, [pc, #208]	@ (8005604 <HAL_RCC_OscConfig+0x244>)
 8005532:	2201      	movs	r2, #1
 8005534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005536:	f7fc f8f3 	bl	8001720 <HAL_GetTick>
 800553a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800553c:	e008      	b.n	8005550 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800553e:	f7fc f8ef 	bl	8001720 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d901      	bls.n	8005550 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e1a8      	b.n	80058a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005550:	4b2b      	ldr	r3, [pc, #172]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0302 	and.w	r3, r3, #2
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0f0      	beq.n	800553e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800555c:	4b28      	ldr	r3, [pc, #160]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	00db      	lsls	r3, r3, #3
 800556a:	4925      	ldr	r1, [pc, #148]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 800556c:	4313      	orrs	r3, r2
 800556e:	600b      	str	r3, [r1, #0]
 8005570:	e015      	b.n	800559e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005572:	4b24      	ldr	r3, [pc, #144]	@ (8005604 <HAL_RCC_OscConfig+0x244>)
 8005574:	2200      	movs	r2, #0
 8005576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005578:	f7fc f8d2 	bl	8001720 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005580:	f7fc f8ce 	bl	8001720 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e187      	b.n	80058a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005592:	4b1b      	ldr	r3, [pc, #108]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f0      	bne.n	8005580 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d036      	beq.n	8005618 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d016      	beq.n	80055e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055b2:	4b15      	ldr	r3, [pc, #84]	@ (8005608 <HAL_RCC_OscConfig+0x248>)
 80055b4:	2201      	movs	r2, #1
 80055b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b8:	f7fc f8b2 	bl	8001720 <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055c0:	f7fc f8ae 	bl	8001720 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e167      	b.n	80058a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005600 <HAL_RCC_OscConfig+0x240>)
 80055d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0f0      	beq.n	80055c0 <HAL_RCC_OscConfig+0x200>
 80055de:	e01b      	b.n	8005618 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055e0:	4b09      	ldr	r3, [pc, #36]	@ (8005608 <HAL_RCC_OscConfig+0x248>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055e6:	f7fc f89b 	bl	8001720 <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055ec:	e00e      	b.n	800560c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ee:	f7fc f897 	bl	8001720 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d907      	bls.n	800560c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e150      	b.n	80058a2 <HAL_RCC_OscConfig+0x4e2>
 8005600:	40023800 	.word	0x40023800
 8005604:	42470000 	.word	0x42470000
 8005608:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800560c:	4b88      	ldr	r3, [pc, #544]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 800560e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1ea      	bne.n	80055ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0304 	and.w	r3, r3, #4
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 8097 	beq.w	8005754 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005626:	2300      	movs	r3, #0
 8005628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800562a:	4b81      	ldr	r3, [pc, #516]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 800562c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800562e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10f      	bne.n	8005656 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005636:	2300      	movs	r3, #0
 8005638:	60bb      	str	r3, [r7, #8]
 800563a:	4b7d      	ldr	r3, [pc, #500]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 800563c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563e:	4a7c      	ldr	r2, [pc, #496]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 8005640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005644:	6413      	str	r3, [r2, #64]	@ 0x40
 8005646:	4b7a      	ldr	r3, [pc, #488]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800564e:	60bb      	str	r3, [r7, #8]
 8005650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005652:	2301      	movs	r3, #1
 8005654:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005656:	4b77      	ldr	r3, [pc, #476]	@ (8005834 <HAL_RCC_OscConfig+0x474>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800565e:	2b00      	cmp	r3, #0
 8005660:	d118      	bne.n	8005694 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005662:	4b74      	ldr	r3, [pc, #464]	@ (8005834 <HAL_RCC_OscConfig+0x474>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a73      	ldr	r2, [pc, #460]	@ (8005834 <HAL_RCC_OscConfig+0x474>)
 8005668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800566c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800566e:	f7fc f857 	bl	8001720 <HAL_GetTick>
 8005672:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005674:	e008      	b.n	8005688 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005676:	f7fc f853 	bl	8001720 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b02      	cmp	r3, #2
 8005682:	d901      	bls.n	8005688 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e10c      	b.n	80058a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005688:	4b6a      	ldr	r3, [pc, #424]	@ (8005834 <HAL_RCC_OscConfig+0x474>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0f0      	beq.n	8005676 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d106      	bne.n	80056aa <HAL_RCC_OscConfig+0x2ea>
 800569c:	4b64      	ldr	r3, [pc, #400]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 800569e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a0:	4a63      	ldr	r2, [pc, #396]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 80056a2:	f043 0301 	orr.w	r3, r3, #1
 80056a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80056a8:	e01c      	b.n	80056e4 <HAL_RCC_OscConfig+0x324>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	2b05      	cmp	r3, #5
 80056b0:	d10c      	bne.n	80056cc <HAL_RCC_OscConfig+0x30c>
 80056b2:	4b5f      	ldr	r3, [pc, #380]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 80056b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b6:	4a5e      	ldr	r2, [pc, #376]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 80056b8:	f043 0304 	orr.w	r3, r3, #4
 80056bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80056be:	4b5c      	ldr	r3, [pc, #368]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c2:	4a5b      	ldr	r2, [pc, #364]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 80056c4:	f043 0301 	orr.w	r3, r3, #1
 80056c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80056ca:	e00b      	b.n	80056e4 <HAL_RCC_OscConfig+0x324>
 80056cc:	4b58      	ldr	r3, [pc, #352]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 80056ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d0:	4a57      	ldr	r2, [pc, #348]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 80056d2:	f023 0301 	bic.w	r3, r3, #1
 80056d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80056d8:	4b55      	ldr	r3, [pc, #340]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 80056da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056dc:	4a54      	ldr	r2, [pc, #336]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 80056de:	f023 0304 	bic.w	r3, r3, #4
 80056e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d015      	beq.n	8005718 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ec:	f7fc f818 	bl	8001720 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f2:	e00a      	b.n	800570a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f4:	f7fc f814 	bl	8001720 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005702:	4293      	cmp	r3, r2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e0cb      	b.n	80058a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800570a:	4b49      	ldr	r3, [pc, #292]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 800570c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d0ee      	beq.n	80056f4 <HAL_RCC_OscConfig+0x334>
 8005716:	e014      	b.n	8005742 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005718:	f7fc f802 	bl	8001720 <HAL_GetTick>
 800571c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800571e:	e00a      	b.n	8005736 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005720:	f7fb fffe 	bl	8001720 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800572e:	4293      	cmp	r3, r2
 8005730:	d901      	bls.n	8005736 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e0b5      	b.n	80058a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005736:	4b3e      	ldr	r3, [pc, #248]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 8005738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1ee      	bne.n	8005720 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005742:	7dfb      	ldrb	r3, [r7, #23]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d105      	bne.n	8005754 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005748:	4b39      	ldr	r3, [pc, #228]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 800574a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574c:	4a38      	ldr	r2, [pc, #224]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 800574e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005752:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 80a1 	beq.w	80058a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800575e:	4b34      	ldr	r3, [pc, #208]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 030c 	and.w	r3, r3, #12
 8005766:	2b08      	cmp	r3, #8
 8005768:	d05c      	beq.n	8005824 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	2b02      	cmp	r3, #2
 8005770:	d141      	bne.n	80057f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005772:	4b31      	ldr	r3, [pc, #196]	@ (8005838 <HAL_RCC_OscConfig+0x478>)
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005778:	f7fb ffd2 	bl	8001720 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005780:	f7fb ffce 	bl	8001720 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e087      	b.n	80058a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005792:	4b27      	ldr	r3, [pc, #156]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1f0      	bne.n	8005780 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	69da      	ldr	r2, [r3, #28]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ac:	019b      	lsls	r3, r3, #6
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	3b01      	subs	r3, #1
 80057b8:	041b      	lsls	r3, r3, #16
 80057ba:	431a      	orrs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c0:	061b      	lsls	r3, r3, #24
 80057c2:	491b      	ldr	r1, [pc, #108]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 80057c4:	4313      	orrs	r3, r2
 80057c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005838 <HAL_RCC_OscConfig+0x478>)
 80057ca:	2201      	movs	r2, #1
 80057cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ce:	f7fb ffa7 	bl	8001720 <HAL_GetTick>
 80057d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057d4:	e008      	b.n	80057e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057d6:	f7fb ffa3 	bl	8001720 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e05c      	b.n	80058a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e8:	4b11      	ldr	r3, [pc, #68]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0f0      	beq.n	80057d6 <HAL_RCC_OscConfig+0x416>
 80057f4:	e054      	b.n	80058a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057f6:	4b10      	ldr	r3, [pc, #64]	@ (8005838 <HAL_RCC_OscConfig+0x478>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fc:	f7fb ff90 	bl	8001720 <HAL_GetTick>
 8005800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005802:	e008      	b.n	8005816 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005804:	f7fb ff8c 	bl	8001720 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	2b02      	cmp	r3, #2
 8005810:	d901      	bls.n	8005816 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e045      	b.n	80058a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005816:	4b06      	ldr	r3, [pc, #24]	@ (8005830 <HAL_RCC_OscConfig+0x470>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1f0      	bne.n	8005804 <HAL_RCC_OscConfig+0x444>
 8005822:	e03d      	b.n	80058a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d107      	bne.n	800583c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e038      	b.n	80058a2 <HAL_RCC_OscConfig+0x4e2>
 8005830:	40023800 	.word	0x40023800
 8005834:	40007000 	.word	0x40007000
 8005838:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800583c:	4b1b      	ldr	r3, [pc, #108]	@ (80058ac <HAL_RCC_OscConfig+0x4ec>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d028      	beq.n	800589c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005854:	429a      	cmp	r2, r3
 8005856:	d121      	bne.n	800589c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005862:	429a      	cmp	r2, r3
 8005864:	d11a      	bne.n	800589c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800586c:	4013      	ands	r3, r2
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005872:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005874:	4293      	cmp	r3, r2
 8005876:	d111      	bne.n	800589c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005882:	085b      	lsrs	r3, r3, #1
 8005884:	3b01      	subs	r3, #1
 8005886:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005888:	429a      	cmp	r2, r3
 800588a:	d107      	bne.n	800589c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005896:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005898:	429a      	cmp	r2, r3
 800589a:	d001      	beq.n	80058a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e000      	b.n	80058a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3718      	adds	r7, #24
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40023800 	.word	0x40023800

080058b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e0cc      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058c4:	4b68      	ldr	r3, [pc, #416]	@ (8005a68 <HAL_RCC_ClockConfig+0x1b8>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0307 	and.w	r3, r3, #7
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d90c      	bls.n	80058ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058d2:	4b65      	ldr	r3, [pc, #404]	@ (8005a68 <HAL_RCC_ClockConfig+0x1b8>)
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	b2d2      	uxtb	r2, r2
 80058d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058da:	4b63      	ldr	r3, [pc, #396]	@ (8005a68 <HAL_RCC_ClockConfig+0x1b8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0307 	and.w	r3, r3, #7
 80058e2:	683a      	ldr	r2, [r7, #0]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d001      	beq.n	80058ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e0b8      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0302 	and.w	r3, r3, #2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d020      	beq.n	800593a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005904:	4b59      	ldr	r3, [pc, #356]	@ (8005a6c <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	4a58      	ldr	r2, [pc, #352]	@ (8005a6c <HAL_RCC_ClockConfig+0x1bc>)
 800590a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800590e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800591c:	4b53      	ldr	r3, [pc, #332]	@ (8005a6c <HAL_RCC_ClockConfig+0x1bc>)
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	4a52      	ldr	r2, [pc, #328]	@ (8005a6c <HAL_RCC_ClockConfig+0x1bc>)
 8005922:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005926:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005928:	4b50      	ldr	r3, [pc, #320]	@ (8005a6c <HAL_RCC_ClockConfig+0x1bc>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	494d      	ldr	r1, [pc, #308]	@ (8005a6c <HAL_RCC_ClockConfig+0x1bc>)
 8005936:	4313      	orrs	r3, r2
 8005938:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d044      	beq.n	80059d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d107      	bne.n	800595e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800594e:	4b47      	ldr	r3, [pc, #284]	@ (8005a6c <HAL_RCC_ClockConfig+0x1bc>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d119      	bne.n	800598e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e07f      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	2b02      	cmp	r3, #2
 8005964:	d003      	beq.n	800596e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800596a:	2b03      	cmp	r3, #3
 800596c:	d107      	bne.n	800597e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800596e:	4b3f      	ldr	r3, [pc, #252]	@ (8005a6c <HAL_RCC_ClockConfig+0x1bc>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d109      	bne.n	800598e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e06f      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800597e:	4b3b      	ldr	r3, [pc, #236]	@ (8005a6c <HAL_RCC_ClockConfig+0x1bc>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e067      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800598e:	4b37      	ldr	r3, [pc, #220]	@ (8005a6c <HAL_RCC_ClockConfig+0x1bc>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f023 0203 	bic.w	r2, r3, #3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	4934      	ldr	r1, [pc, #208]	@ (8005a6c <HAL_RCC_ClockConfig+0x1bc>)
 800599c:	4313      	orrs	r3, r2
 800599e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059a0:	f7fb febe 	bl	8001720 <HAL_GetTick>
 80059a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a6:	e00a      	b.n	80059be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059a8:	f7fb feba 	bl	8001720 <HAL_GetTick>
 80059ac:	4602      	mov	r2, r0
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e04f      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059be:	4b2b      	ldr	r3, [pc, #172]	@ (8005a6c <HAL_RCC_ClockConfig+0x1bc>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 020c 	and.w	r2, r3, #12
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d1eb      	bne.n	80059a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059d0:	4b25      	ldr	r3, [pc, #148]	@ (8005a68 <HAL_RCC_ClockConfig+0x1b8>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d20c      	bcs.n	80059f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059de:	4b22      	ldr	r3, [pc, #136]	@ (8005a68 <HAL_RCC_ClockConfig+0x1b8>)
 80059e0:	683a      	ldr	r2, [r7, #0]
 80059e2:	b2d2      	uxtb	r2, r2
 80059e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059e6:	4b20      	ldr	r3, [pc, #128]	@ (8005a68 <HAL_RCC_ClockConfig+0x1b8>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	683a      	ldr	r2, [r7, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d001      	beq.n	80059f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e032      	b.n	8005a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a04:	4b19      	ldr	r3, [pc, #100]	@ (8005a6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	4916      	ldr	r1, [pc, #88]	@ (8005a6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d009      	beq.n	8005a36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a22:	4b12      	ldr	r3, [pc, #72]	@ (8005a6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	490e      	ldr	r1, [pc, #56]	@ (8005a6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a36:	f000 f821 	bl	8005a7c <HAL_RCC_GetSysClockFreq>
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a6c <HAL_RCC_ClockConfig+0x1bc>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	091b      	lsrs	r3, r3, #4
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	490a      	ldr	r1, [pc, #40]	@ (8005a70 <HAL_RCC_ClockConfig+0x1c0>)
 8005a48:	5ccb      	ldrb	r3, [r1, r3]
 8005a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a4e:	4a09      	ldr	r2, [pc, #36]	@ (8005a74 <HAL_RCC_ClockConfig+0x1c4>)
 8005a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a52:	4b09      	ldr	r3, [pc, #36]	@ (8005a78 <HAL_RCC_ClockConfig+0x1c8>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7fb fe1e 	bl	8001698 <HAL_InitTick>

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	40023c00 	.word	0x40023c00
 8005a6c:	40023800 	.word	0x40023800
 8005a70:	0800b8dc 	.word	0x0800b8dc
 8005a74:	20000000 	.word	0x20000000
 8005a78:	20000004 	.word	0x20000004

08005a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a80:	b094      	sub	sp, #80	@ 0x50
 8005a82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a84:	2300      	movs	r3, #0
 8005a86:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a88:	2300      	movs	r3, #0
 8005a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a94:	4b79      	ldr	r3, [pc, #484]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 030c 	and.w	r3, r3, #12
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d00d      	beq.n	8005abc <HAL_RCC_GetSysClockFreq+0x40>
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	f200 80e1 	bhi.w	8005c68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d002      	beq.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x34>
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d003      	beq.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005aae:	e0db      	b.n	8005c68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ab0:	4b73      	ldr	r3, [pc, #460]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005ab4:	e0db      	b.n	8005c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ab6:	4b73      	ldr	r3, [pc, #460]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005aba:	e0d8      	b.n	8005c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005abc:	4b6f      	ldr	r3, [pc, #444]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ac4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ac6:	4b6d      	ldr	r3, [pc, #436]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d063      	beq.n	8005b9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ad2:	4b6a      	ldr	r3, [pc, #424]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	099b      	lsrs	r3, r3, #6
 8005ad8:	2200      	movs	r2, #0
 8005ada:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005adc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005aee:	4622      	mov	r2, r4
 8005af0:	462b      	mov	r3, r5
 8005af2:	f04f 0000 	mov.w	r0, #0
 8005af6:	f04f 0100 	mov.w	r1, #0
 8005afa:	0159      	lsls	r1, r3, #5
 8005afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b00:	0150      	lsls	r0, r2, #5
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	4621      	mov	r1, r4
 8005b08:	1a51      	subs	r1, r2, r1
 8005b0a:	6139      	str	r1, [r7, #16]
 8005b0c:	4629      	mov	r1, r5
 8005b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8005b12:	617b      	str	r3, [r7, #20]
 8005b14:	f04f 0200 	mov.w	r2, #0
 8005b18:	f04f 0300 	mov.w	r3, #0
 8005b1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b20:	4659      	mov	r1, fp
 8005b22:	018b      	lsls	r3, r1, #6
 8005b24:	4651      	mov	r1, sl
 8005b26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b2a:	4651      	mov	r1, sl
 8005b2c:	018a      	lsls	r2, r1, #6
 8005b2e:	4651      	mov	r1, sl
 8005b30:	ebb2 0801 	subs.w	r8, r2, r1
 8005b34:	4659      	mov	r1, fp
 8005b36:	eb63 0901 	sbc.w	r9, r3, r1
 8005b3a:	f04f 0200 	mov.w	r2, #0
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b4e:	4690      	mov	r8, r2
 8005b50:	4699      	mov	r9, r3
 8005b52:	4623      	mov	r3, r4
 8005b54:	eb18 0303 	adds.w	r3, r8, r3
 8005b58:	60bb      	str	r3, [r7, #8]
 8005b5a:	462b      	mov	r3, r5
 8005b5c:	eb49 0303 	adc.w	r3, r9, r3
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	f04f 0200 	mov.w	r2, #0
 8005b66:	f04f 0300 	mov.w	r3, #0
 8005b6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b6e:	4629      	mov	r1, r5
 8005b70:	024b      	lsls	r3, r1, #9
 8005b72:	4621      	mov	r1, r4
 8005b74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b78:	4621      	mov	r1, r4
 8005b7a:	024a      	lsls	r2, r1, #9
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	4619      	mov	r1, r3
 8005b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b82:	2200      	movs	r2, #0
 8005b84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b8c:	f7fa fb78 	bl	8000280 <__aeabi_uldivmod>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	4613      	mov	r3, r2
 8005b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b98:	e058      	b.n	8005c4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b9a:	4b38      	ldr	r3, [pc, #224]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	099b      	lsrs	r3, r3, #6
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005baa:	623b      	str	r3, [r7, #32]
 8005bac:	2300      	movs	r3, #0
 8005bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005bb4:	4642      	mov	r2, r8
 8005bb6:	464b      	mov	r3, r9
 8005bb8:	f04f 0000 	mov.w	r0, #0
 8005bbc:	f04f 0100 	mov.w	r1, #0
 8005bc0:	0159      	lsls	r1, r3, #5
 8005bc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bc6:	0150      	lsls	r0, r2, #5
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4641      	mov	r1, r8
 8005bce:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bd2:	4649      	mov	r1, r9
 8005bd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005be4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005be8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bec:	ebb2 040a 	subs.w	r4, r2, sl
 8005bf0:	eb63 050b 	sbc.w	r5, r3, fp
 8005bf4:	f04f 0200 	mov.w	r2, #0
 8005bf8:	f04f 0300 	mov.w	r3, #0
 8005bfc:	00eb      	lsls	r3, r5, #3
 8005bfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c02:	00e2      	lsls	r2, r4, #3
 8005c04:	4614      	mov	r4, r2
 8005c06:	461d      	mov	r5, r3
 8005c08:	4643      	mov	r3, r8
 8005c0a:	18e3      	adds	r3, r4, r3
 8005c0c:	603b      	str	r3, [r7, #0]
 8005c0e:	464b      	mov	r3, r9
 8005c10:	eb45 0303 	adc.w	r3, r5, r3
 8005c14:	607b      	str	r3, [r7, #4]
 8005c16:	f04f 0200 	mov.w	r2, #0
 8005c1a:	f04f 0300 	mov.w	r3, #0
 8005c1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c22:	4629      	mov	r1, r5
 8005c24:	028b      	lsls	r3, r1, #10
 8005c26:	4621      	mov	r1, r4
 8005c28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	028a      	lsls	r2, r1, #10
 8005c30:	4610      	mov	r0, r2
 8005c32:	4619      	mov	r1, r3
 8005c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c36:	2200      	movs	r2, #0
 8005c38:	61bb      	str	r3, [r7, #24]
 8005c3a:	61fa      	str	r2, [r7, #28]
 8005c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c40:	f7fa fb1e 	bl	8000280 <__aeabi_uldivmod>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4613      	mov	r3, r2
 8005c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	0c1b      	lsrs	r3, r3, #16
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	3301      	adds	r3, #1
 8005c58:	005b      	lsls	r3, r3, #1
 8005c5a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005c5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c66:	e002      	b.n	8005c6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c68:	4b05      	ldr	r3, [pc, #20]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3750      	adds	r7, #80	@ 0x50
 8005c74:	46bd      	mov	sp, r7
 8005c76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c7a:	bf00      	nop
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	00f42400 	.word	0x00f42400
 8005c84:	007a1200 	.word	0x007a1200

08005c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c8c:	4b03      	ldr	r3, [pc, #12]	@ (8005c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	20000000 	.word	0x20000000

08005ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ca4:	f7ff fff0 	bl	8005c88 <HAL_RCC_GetHCLKFreq>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	4b05      	ldr	r3, [pc, #20]	@ (8005cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	0a9b      	lsrs	r3, r3, #10
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	4903      	ldr	r1, [pc, #12]	@ (8005cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005cb6:	5ccb      	ldrb	r3, [r1, r3]
 8005cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	40023800 	.word	0x40023800
 8005cc4:	0800b8ec 	.word	0x0800b8ec

08005cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ccc:	f7ff ffdc 	bl	8005c88 <HAL_RCC_GetHCLKFreq>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	4b05      	ldr	r3, [pc, #20]	@ (8005ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	0b5b      	lsrs	r3, r3, #13
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	4903      	ldr	r1, [pc, #12]	@ (8005cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cde:	5ccb      	ldrb	r3, [r1, r3]
 8005ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	0800b8ec 	.word	0x0800b8ec

08005cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b082      	sub	sp, #8
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e041      	b.n	8005d86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d106      	bne.n	8005d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7fb fb0e 	bl	8001338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3304      	adds	r3, #4
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4610      	mov	r0, r2
 8005d30:	f000 fbfa 	bl	8006528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d101      	bne.n	8005da0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e041      	b.n	8005e24 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d106      	bne.n	8005dba <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f839 	bl	8005e2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4610      	mov	r0, r2
 8005dce:	f000 fbab 	bl	8006528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d109      	bne.n	8005e64 <HAL_TIM_PWM_Start+0x24>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	bf14      	ite	ne
 8005e5c:	2301      	movne	r3, #1
 8005e5e:	2300      	moveq	r3, #0
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	e022      	b.n	8005eaa <HAL_TIM_PWM_Start+0x6a>
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d109      	bne.n	8005e7e <HAL_TIM_PWM_Start+0x3e>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	bf14      	ite	ne
 8005e76:	2301      	movne	r3, #1
 8005e78:	2300      	moveq	r3, #0
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	e015      	b.n	8005eaa <HAL_TIM_PWM_Start+0x6a>
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	d109      	bne.n	8005e98 <HAL_TIM_PWM_Start+0x58>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	bf14      	ite	ne
 8005e90:	2301      	movne	r3, #1
 8005e92:	2300      	moveq	r3, #0
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	e008      	b.n	8005eaa <HAL_TIM_PWM_Start+0x6a>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	bf14      	ite	ne
 8005ea4:	2301      	movne	r3, #1
 8005ea6:	2300      	moveq	r3, #0
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e07c      	b.n	8005fac <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d104      	bne.n	8005ec2 <HAL_TIM_PWM_Start+0x82>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ec0:	e013      	b.n	8005eea <HAL_TIM_PWM_Start+0xaa>
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d104      	bne.n	8005ed2 <HAL_TIM_PWM_Start+0x92>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ed0:	e00b      	b.n	8005eea <HAL_TIM_PWM_Start+0xaa>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d104      	bne.n	8005ee2 <HAL_TIM_PWM_Start+0xa2>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ee0:	e003      	b.n	8005eea <HAL_TIM_PWM_Start+0xaa>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	6839      	ldr	r1, [r7, #0]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 fe0e 	bl	8006b14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a2d      	ldr	r2, [pc, #180]	@ (8005fb4 <HAL_TIM_PWM_Start+0x174>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d004      	beq.n	8005f0c <HAL_TIM_PWM_Start+0xcc>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a2c      	ldr	r2, [pc, #176]	@ (8005fb8 <HAL_TIM_PWM_Start+0x178>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIM_PWM_Start+0xd0>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e000      	b.n	8005f12 <HAL_TIM_PWM_Start+0xd2>
 8005f10:	2300      	movs	r3, #0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d007      	beq.n	8005f26 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a22      	ldr	r2, [pc, #136]	@ (8005fb4 <HAL_TIM_PWM_Start+0x174>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d022      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x136>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f38:	d01d      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x136>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a1f      	ldr	r2, [pc, #124]	@ (8005fbc <HAL_TIM_PWM_Start+0x17c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d018      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x136>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a1d      	ldr	r2, [pc, #116]	@ (8005fc0 <HAL_TIM_PWM_Start+0x180>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d013      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x136>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a1c      	ldr	r2, [pc, #112]	@ (8005fc4 <HAL_TIM_PWM_Start+0x184>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d00e      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x136>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a16      	ldr	r2, [pc, #88]	@ (8005fb8 <HAL_TIM_PWM_Start+0x178>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d009      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x136>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a18      	ldr	r2, [pc, #96]	@ (8005fc8 <HAL_TIM_PWM_Start+0x188>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d004      	beq.n	8005f76 <HAL_TIM_PWM_Start+0x136>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a16      	ldr	r2, [pc, #88]	@ (8005fcc <HAL_TIM_PWM_Start+0x18c>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d111      	bne.n	8005f9a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b06      	cmp	r3, #6
 8005f86:	d010      	beq.n	8005faa <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0201 	orr.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f98:	e007      	b.n	8005faa <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f042 0201 	orr.w	r2, r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40010000 	.word	0x40010000
 8005fb8:	40010400 	.word	0x40010400
 8005fbc:	40000400 	.word	0x40000400
 8005fc0:	40000800 	.word	0x40000800
 8005fc4:	40000c00 	.word	0x40000c00
 8005fc8:	40014000 	.word	0x40014000
 8005fcc:	40001800 	.word	0x40001800

08005fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d020      	beq.n	8006034 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01b      	beq.n	8006034 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f06f 0202 	mvn.w	r2, #2
 8006004:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2201      	movs	r2, #1
 800600a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 fa65 	bl	80064ea <HAL_TIM_IC_CaptureCallback>
 8006020:	e005      	b.n	800602e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fa57 	bl	80064d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fa68 	bl	80064fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b00      	cmp	r3, #0
 800603c:	d020      	beq.n	8006080 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f003 0304 	and.w	r3, r3, #4
 8006044:	2b00      	cmp	r3, #0
 8006046:	d01b      	beq.n	8006080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0204 	mvn.w	r2, #4
 8006050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2202      	movs	r2, #2
 8006056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fa3f 	bl	80064ea <HAL_TIM_IC_CaptureCallback>
 800606c:	e005      	b.n	800607a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fa31 	bl	80064d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fa42 	bl	80064fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f003 0308 	and.w	r3, r3, #8
 8006086:	2b00      	cmp	r3, #0
 8006088:	d020      	beq.n	80060cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f003 0308 	and.w	r3, r3, #8
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01b      	beq.n	80060cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f06f 0208 	mvn.w	r2, #8
 800609c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2204      	movs	r2, #4
 80060a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	f003 0303 	and.w	r3, r3, #3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d003      	beq.n	80060ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 fa19 	bl	80064ea <HAL_TIM_IC_CaptureCallback>
 80060b8:	e005      	b.n	80060c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fa0b 	bl	80064d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 fa1c 	bl	80064fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	f003 0310 	and.w	r3, r3, #16
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d020      	beq.n	8006118 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f003 0310 	and.w	r3, r3, #16
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d01b      	beq.n	8006118 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f06f 0210 	mvn.w	r2, #16
 80060e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2208      	movs	r2, #8
 80060ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f9f3 	bl	80064ea <HAL_TIM_IC_CaptureCallback>
 8006104:	e005      	b.n	8006112 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f9e5 	bl	80064d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f9f6 	bl	80064fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00c      	beq.n	800613c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f003 0301 	and.w	r3, r3, #1
 8006128:	2b00      	cmp	r3, #0
 800612a:	d007      	beq.n	800613c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f06f 0201 	mvn.w	r2, #1
 8006134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f9c3 	bl	80064c2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00c      	beq.n	8006160 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800614c:	2b00      	cmp	r3, #0
 800614e:	d007      	beq.n	8006160 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fd86 	bl	8006c6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00c      	beq.n	8006184 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006170:	2b00      	cmp	r3, #0
 8006172:	d007      	beq.n	8006184 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800617c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f9c7 	bl	8006512 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f003 0320 	and.w	r3, r3, #32
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00c      	beq.n	80061a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f003 0320 	and.w	r3, r3, #32
 8006194:	2b00      	cmp	r3, #0
 8006196:	d007      	beq.n	80061a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f06f 0220 	mvn.w	r2, #32
 80061a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fd58 	bl	8006c58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061a8:	bf00      	nop
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061ca:	2302      	movs	r3, #2
 80061cc:	e0ae      	b.n	800632c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b0c      	cmp	r3, #12
 80061da:	f200 809f 	bhi.w	800631c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80061de:	a201      	add	r2, pc, #4	@ (adr r2, 80061e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e4:	08006219 	.word	0x08006219
 80061e8:	0800631d 	.word	0x0800631d
 80061ec:	0800631d 	.word	0x0800631d
 80061f0:	0800631d 	.word	0x0800631d
 80061f4:	08006259 	.word	0x08006259
 80061f8:	0800631d 	.word	0x0800631d
 80061fc:	0800631d 	.word	0x0800631d
 8006200:	0800631d 	.word	0x0800631d
 8006204:	0800629b 	.word	0x0800629b
 8006208:	0800631d 	.word	0x0800631d
 800620c:	0800631d 	.word	0x0800631d
 8006210:	0800631d 	.word	0x0800631d
 8006214:	080062db 	.word	0x080062db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68b9      	ldr	r1, [r7, #8]
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fa2e 	bl	8006680 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f042 0208 	orr.w	r2, r2, #8
 8006232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	699a      	ldr	r2, [r3, #24]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0204 	bic.w	r2, r2, #4
 8006242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6999      	ldr	r1, [r3, #24]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	430a      	orrs	r2, r1
 8006254:	619a      	str	r2, [r3, #24]
      break;
 8006256:	e064      	b.n	8006322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	4618      	mov	r0, r3
 8006260:	f000 fa7e 	bl	8006760 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699a      	ldr	r2, [r3, #24]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6999      	ldr	r1, [r3, #24]
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	021a      	lsls	r2, r3, #8
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	430a      	orrs	r2, r1
 8006296:	619a      	str	r2, [r3, #24]
      break;
 8006298:	e043      	b.n	8006322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 fad3 	bl	800684c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69da      	ldr	r2, [r3, #28]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f042 0208 	orr.w	r2, r2, #8
 80062b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69da      	ldr	r2, [r3, #28]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f022 0204 	bic.w	r2, r2, #4
 80062c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69d9      	ldr	r1, [r3, #28]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	691a      	ldr	r2, [r3, #16]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	61da      	str	r2, [r3, #28]
      break;
 80062d8:	e023      	b.n	8006322 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68b9      	ldr	r1, [r7, #8]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 fb27 	bl	8006934 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	69da      	ldr	r2, [r3, #28]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69d9      	ldr	r1, [r3, #28]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	021a      	lsls	r2, r3, #8
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	61da      	str	r2, [r3, #28]
      break;
 800631a:	e002      	b.n	8006322 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	75fb      	strb	r3, [r7, #23]
      break;
 8006320:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800632a:	7dfb      	ldrb	r3, [r7, #23]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3718      	adds	r7, #24
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006348:	2b01      	cmp	r3, #1
 800634a:	d101      	bne.n	8006350 <HAL_TIM_ConfigClockSource+0x1c>
 800634c:	2302      	movs	r3, #2
 800634e:	e0b4      	b.n	80064ba <HAL_TIM_ConfigClockSource+0x186>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2202      	movs	r2, #2
 800635c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800636e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006376:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006388:	d03e      	beq.n	8006408 <HAL_TIM_ConfigClockSource+0xd4>
 800638a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800638e:	f200 8087 	bhi.w	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006396:	f000 8086 	beq.w	80064a6 <HAL_TIM_ConfigClockSource+0x172>
 800639a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800639e:	d87f      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063a0:	2b70      	cmp	r3, #112	@ 0x70
 80063a2:	d01a      	beq.n	80063da <HAL_TIM_ConfigClockSource+0xa6>
 80063a4:	2b70      	cmp	r3, #112	@ 0x70
 80063a6:	d87b      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063a8:	2b60      	cmp	r3, #96	@ 0x60
 80063aa:	d050      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x11a>
 80063ac:	2b60      	cmp	r3, #96	@ 0x60
 80063ae:	d877      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063b0:	2b50      	cmp	r3, #80	@ 0x50
 80063b2:	d03c      	beq.n	800642e <HAL_TIM_ConfigClockSource+0xfa>
 80063b4:	2b50      	cmp	r3, #80	@ 0x50
 80063b6:	d873      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063b8:	2b40      	cmp	r3, #64	@ 0x40
 80063ba:	d058      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x13a>
 80063bc:	2b40      	cmp	r3, #64	@ 0x40
 80063be:	d86f      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063c0:	2b30      	cmp	r3, #48	@ 0x30
 80063c2:	d064      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x15a>
 80063c4:	2b30      	cmp	r3, #48	@ 0x30
 80063c6:	d86b      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063c8:	2b20      	cmp	r3, #32
 80063ca:	d060      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x15a>
 80063cc:	2b20      	cmp	r3, #32
 80063ce:	d867      	bhi.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d05c      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x15a>
 80063d4:	2b10      	cmp	r3, #16
 80063d6:	d05a      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x15a>
 80063d8:	e062      	b.n	80064a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063ea:	f000 fb73 	bl	8006ad4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80063fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	609a      	str	r2, [r3, #8]
      break;
 8006406:	e04f      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006418:	f000 fb5c 	bl	8006ad4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800642a:	609a      	str	r2, [r3, #8]
      break;
 800642c:	e03c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800643a:	461a      	mov	r2, r3
 800643c:	f000 fad0 	bl	80069e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2150      	movs	r1, #80	@ 0x50
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fb29 	bl	8006a9e <TIM_ITRx_SetConfig>
      break;
 800644c:	e02c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800645a:	461a      	mov	r2, r3
 800645c:	f000 faef 	bl	8006a3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2160      	movs	r1, #96	@ 0x60
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fb19 	bl	8006a9e <TIM_ITRx_SetConfig>
      break;
 800646c:	e01c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800647a:	461a      	mov	r2, r3
 800647c:	f000 fab0 	bl	80069e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2140      	movs	r1, #64	@ 0x40
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fb09 	bl	8006a9e <TIM_ITRx_SetConfig>
      break;
 800648c:	e00c      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4619      	mov	r1, r3
 8006498:	4610      	mov	r0, r2
 800649a:	f000 fb00 	bl	8006a9e <TIM_ITRx_SetConfig>
      break;
 800649e:	e003      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	73fb      	strb	r3, [r7, #15]
      break;
 80064a4:	e000      	b.n	80064a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80064b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064de:	bf00      	nop
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
	...

08006528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a46      	ldr	r2, [pc, #280]	@ (8006654 <TIM_Base_SetConfig+0x12c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d013      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006546:	d00f      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a43      	ldr	r2, [pc, #268]	@ (8006658 <TIM_Base_SetConfig+0x130>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d00b      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a42      	ldr	r2, [pc, #264]	@ (800665c <TIM_Base_SetConfig+0x134>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d007      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a41      	ldr	r2, [pc, #260]	@ (8006660 <TIM_Base_SetConfig+0x138>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d003      	beq.n	8006568 <TIM_Base_SetConfig+0x40>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a40      	ldr	r2, [pc, #256]	@ (8006664 <TIM_Base_SetConfig+0x13c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d108      	bne.n	800657a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800656e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a35      	ldr	r2, [pc, #212]	@ (8006654 <TIM_Base_SetConfig+0x12c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d02b      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006588:	d027      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a32      	ldr	r2, [pc, #200]	@ (8006658 <TIM_Base_SetConfig+0x130>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d023      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a31      	ldr	r2, [pc, #196]	@ (800665c <TIM_Base_SetConfig+0x134>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d01f      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a30      	ldr	r2, [pc, #192]	@ (8006660 <TIM_Base_SetConfig+0x138>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d01b      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a2f      	ldr	r2, [pc, #188]	@ (8006664 <TIM_Base_SetConfig+0x13c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d017      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a2e      	ldr	r2, [pc, #184]	@ (8006668 <TIM_Base_SetConfig+0x140>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d013      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a2d      	ldr	r2, [pc, #180]	@ (800666c <TIM_Base_SetConfig+0x144>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00f      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006670 <TIM_Base_SetConfig+0x148>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d00b      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a2b      	ldr	r2, [pc, #172]	@ (8006674 <TIM_Base_SetConfig+0x14c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d007      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a2a      	ldr	r2, [pc, #168]	@ (8006678 <TIM_Base_SetConfig+0x150>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d003      	beq.n	80065da <TIM_Base_SetConfig+0xb2>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a29      	ldr	r2, [pc, #164]	@ (800667c <TIM_Base_SetConfig+0x154>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d108      	bne.n	80065ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a10      	ldr	r2, [pc, #64]	@ (8006654 <TIM_Base_SetConfig+0x12c>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d003      	beq.n	8006620 <TIM_Base_SetConfig+0xf8>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a12      	ldr	r2, [pc, #72]	@ (8006664 <TIM_Base_SetConfig+0x13c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d103      	bne.n	8006628 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	691a      	ldr	r2, [r3, #16]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b01      	cmp	r3, #1
 8006638:	d105      	bne.n	8006646 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	f023 0201 	bic.w	r2, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	611a      	str	r2, [r3, #16]
  }
}
 8006646:	bf00      	nop
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	40010000 	.word	0x40010000
 8006658:	40000400 	.word	0x40000400
 800665c:	40000800 	.word	0x40000800
 8006660:	40000c00 	.word	0x40000c00
 8006664:	40010400 	.word	0x40010400
 8006668:	40014000 	.word	0x40014000
 800666c:	40014400 	.word	0x40014400
 8006670:	40014800 	.word	0x40014800
 8006674:	40001800 	.word	0x40001800
 8006678:	40001c00 	.word	0x40001c00
 800667c:	40002000 	.word	0x40002000

08006680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a1b      	ldr	r3, [r3, #32]
 8006694:	f023 0201 	bic.w	r2, r3, #1
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0303 	bic.w	r3, r3, #3
 80066b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f023 0302 	bic.w	r3, r3, #2
 80066c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a20      	ldr	r2, [pc, #128]	@ (8006758 <TIM_OC1_SetConfig+0xd8>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d003      	beq.n	80066e4 <TIM_OC1_SetConfig+0x64>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a1f      	ldr	r2, [pc, #124]	@ (800675c <TIM_OC1_SetConfig+0xdc>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d10c      	bne.n	80066fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	f023 0308 	bic.w	r3, r3, #8
 80066ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	f023 0304 	bic.w	r3, r3, #4
 80066fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a15      	ldr	r2, [pc, #84]	@ (8006758 <TIM_OC1_SetConfig+0xd8>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d003      	beq.n	800670e <TIM_OC1_SetConfig+0x8e>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a14      	ldr	r2, [pc, #80]	@ (800675c <TIM_OC1_SetConfig+0xdc>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d111      	bne.n	8006732 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800671c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4313      	orrs	r3, r2
 8006726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	4313      	orrs	r3, r2
 8006730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	621a      	str	r2, [r3, #32]
}
 800674c:	bf00      	nop
 800674e:	371c      	adds	r7, #28
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	40010000 	.word	0x40010000
 800675c:	40010400 	.word	0x40010400

08006760 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	f023 0210 	bic.w	r2, r3, #16
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800678e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	021b      	lsls	r3, r3, #8
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f023 0320 	bic.w	r3, r3, #32
 80067aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a22      	ldr	r2, [pc, #136]	@ (8006844 <TIM_OC2_SetConfig+0xe4>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d003      	beq.n	80067c8 <TIM_OC2_SetConfig+0x68>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a21      	ldr	r2, [pc, #132]	@ (8006848 <TIM_OC2_SetConfig+0xe8>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d10d      	bne.n	80067e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	4313      	orrs	r3, r2
 80067da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a17      	ldr	r2, [pc, #92]	@ (8006844 <TIM_OC2_SetConfig+0xe4>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d003      	beq.n	80067f4 <TIM_OC2_SetConfig+0x94>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a16      	ldr	r2, [pc, #88]	@ (8006848 <TIM_OC2_SetConfig+0xe8>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d113      	bne.n	800681c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	4313      	orrs	r3, r2
 800680e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	693a      	ldr	r2, [r7, #16]
 8006820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	685a      	ldr	r2, [r3, #4]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	621a      	str	r2, [r3, #32]
}
 8006836:	bf00      	nop
 8006838:	371c      	adds	r7, #28
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	40010000 	.word	0x40010000
 8006848:	40010400 	.word	0x40010400

0800684c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800687a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f023 0303 	bic.w	r3, r3, #3
 8006882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	021b      	lsls	r3, r3, #8
 800689c:	697a      	ldr	r2, [r7, #20]
 800689e:	4313      	orrs	r3, r2
 80068a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a21      	ldr	r2, [pc, #132]	@ (800692c <TIM_OC3_SetConfig+0xe0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d003      	beq.n	80068b2 <TIM_OC3_SetConfig+0x66>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a20      	ldr	r2, [pc, #128]	@ (8006930 <TIM_OC3_SetConfig+0xe4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d10d      	bne.n	80068ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	021b      	lsls	r3, r3, #8
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a16      	ldr	r2, [pc, #88]	@ (800692c <TIM_OC3_SetConfig+0xe0>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d003      	beq.n	80068de <TIM_OC3_SetConfig+0x92>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a15      	ldr	r2, [pc, #84]	@ (8006930 <TIM_OC3_SetConfig+0xe4>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d113      	bne.n	8006906 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	011b      	lsls	r3, r3, #4
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	699b      	ldr	r3, [r3, #24]
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	693a      	ldr	r2, [r7, #16]
 8006902:	4313      	orrs	r3, r2
 8006904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68fa      	ldr	r2, [r7, #12]
 8006910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685a      	ldr	r2, [r3, #4]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	621a      	str	r2, [r3, #32]
}
 8006920:	bf00      	nop
 8006922:	371c      	adds	r7, #28
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr
 800692c:	40010000 	.word	0x40010000
 8006930:	40010400 	.word	0x40010400

08006934 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a1b      	ldr	r3, [r3, #32]
 8006948:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800696a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	021b      	lsls	r3, r3, #8
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	4313      	orrs	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800697e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	031b      	lsls	r3, r3, #12
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	4313      	orrs	r3, r2
 800698a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a12      	ldr	r2, [pc, #72]	@ (80069d8 <TIM_OC4_SetConfig+0xa4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d003      	beq.n	800699c <TIM_OC4_SetConfig+0x68>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a11      	ldr	r2, [pc, #68]	@ (80069dc <TIM_OC4_SetConfig+0xa8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d109      	bne.n	80069b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80069a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	019b      	lsls	r3, r3, #6
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	685a      	ldr	r2, [r3, #4]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	621a      	str	r2, [r3, #32]
}
 80069ca:	bf00      	nop
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	40010000 	.word	0x40010000
 80069dc:	40010400 	.word	0x40010400

080069e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	f023 0201 	bic.w	r2, r3, #1
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	699b      	ldr	r3, [r3, #24]
 8006a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	011b      	lsls	r3, r3, #4
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f023 030a 	bic.w	r3, r3, #10
 8006a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a1e:	697a      	ldr	r2, [r7, #20]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	621a      	str	r2, [r3, #32]
}
 8006a32:	bf00      	nop
 8006a34:	371c      	adds	r7, #28
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b087      	sub	sp, #28
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	f023 0210 	bic.w	r2, r3, #16
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	031b      	lsls	r3, r3, #12
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	697a      	ldr	r2, [r7, #20]
 8006a90:	621a      	str	r2, [r3, #32]
}
 8006a92:	bf00      	nop
 8006a94:	371c      	adds	r7, #28
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr

08006a9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b085      	sub	sp, #20
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
 8006aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ab6:	683a      	ldr	r2, [r7, #0]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f043 0307 	orr.w	r3, r3, #7
 8006ac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	609a      	str	r2, [r3, #8]
}
 8006ac8:	bf00      	nop
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	607a      	str	r2, [r7, #4]
 8006ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006aee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	021a      	lsls	r2, r3, #8
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	431a      	orrs	r2, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	609a      	str	r2, [r3, #8]
}
 8006b08:	bf00      	nop
 8006b0a:	371c      	adds	r7, #28
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f003 031f 	and.w	r3, r3, #31
 8006b26:	2201      	movs	r2, #1
 8006b28:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6a1a      	ldr	r2, [r3, #32]
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	43db      	mvns	r3, r3
 8006b36:	401a      	ands	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6a1a      	ldr	r2, [r3, #32]
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f003 031f 	and.w	r3, r3, #31
 8006b46:	6879      	ldr	r1, [r7, #4]
 8006b48:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4c:	431a      	orrs	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	621a      	str	r2, [r3, #32]
}
 8006b52:	bf00      	nop
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
	...

08006b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d101      	bne.n	8006b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b74:	2302      	movs	r3, #2
 8006b76:	e05a      	b.n	8006c2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a21      	ldr	r2, [pc, #132]	@ (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d022      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bc4:	d01d      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a1d      	ldr	r2, [pc, #116]	@ (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d018      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d013      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a1a      	ldr	r2, [pc, #104]	@ (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00e      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a18      	ldr	r2, [pc, #96]	@ (8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d009      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a17      	ldr	r2, [pc, #92]	@ (8006c50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d004      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a15      	ldr	r2, [pc, #84]	@ (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d10c      	bne.n	8006c1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40010000 	.word	0x40010000
 8006c40:	40000400 	.word	0x40000400
 8006c44:	40000800 	.word	0x40000800
 8006c48:	40000c00 	.word	0x40000c00
 8006c4c:	40010400 	.word	0x40010400
 8006c50:	40014000 	.word	0x40014000
 8006c54:	40001800 	.word	0x40001800

08006c58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e042      	b.n	8006d18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d106      	bne.n	8006cac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7fa fba4 	bl	80013f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2224      	movs	r2, #36	@ 0x24
 8006cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f973 	bl	8006fb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	691a      	ldr	r2, [r3, #16]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006cd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	695a      	ldr	r2, [r3, #20]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ce8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006cf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08a      	sub	sp, #40	@ 0x28
 8006d24:	af02      	add	r7, sp, #8
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d175      	bne.n	8006e2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <HAL_UART_Transmit+0x2c>
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e06e      	b.n	8006e2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2221      	movs	r2, #33	@ 0x21
 8006d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d5e:	f7fa fcdf 	bl	8001720 <HAL_GetTick>
 8006d62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	88fa      	ldrh	r2, [r7, #6]
 8006d68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	88fa      	ldrh	r2, [r7, #6]
 8006d6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d78:	d108      	bne.n	8006d8c <HAL_UART_Transmit+0x6c>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d104      	bne.n	8006d8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d82:	2300      	movs	r3, #0
 8006d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	61bb      	str	r3, [r7, #24]
 8006d8a:	e003      	b.n	8006d94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d90:	2300      	movs	r3, #0
 8006d92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d94:	e02e      	b.n	8006df4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2180      	movs	r1, #128	@ 0x80
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 f848 	bl	8006e36 <UART_WaitOnFlagUntilTimeout>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d005      	beq.n	8006db8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2220      	movs	r2, #32
 8006db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e03a      	b.n	8006e2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10b      	bne.n	8006dd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	3302      	adds	r3, #2
 8006dd2:	61bb      	str	r3, [r7, #24]
 8006dd4:	e007      	b.n	8006de6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	781a      	ldrb	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	3301      	adds	r3, #1
 8006de4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	3b01      	subs	r3, #1
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1cb      	bne.n	8006d96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2200      	movs	r2, #0
 8006e06:	2140      	movs	r1, #64	@ 0x40
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 f814 	bl	8006e36 <UART_WaitOnFlagUntilTimeout>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d005      	beq.n	8006e20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2220      	movs	r2, #32
 8006e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e006      	b.n	8006e2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	e000      	b.n	8006e2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006e2c:	2302      	movs	r3, #2
  }
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3720      	adds	r7, #32
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b086      	sub	sp, #24
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	60f8      	str	r0, [r7, #12]
 8006e3e:	60b9      	str	r1, [r7, #8]
 8006e40:	603b      	str	r3, [r7, #0]
 8006e42:	4613      	mov	r3, r2
 8006e44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e46:	e03b      	b.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4e:	d037      	beq.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e50:	f7fa fc66 	bl	8001720 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	6a3a      	ldr	r2, [r7, #32]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d302      	bcc.n	8006e66 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e03a      	b.n	8006ee0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d023      	beq.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b80      	cmp	r3, #128	@ 0x80
 8006e7c:	d020      	beq.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b40      	cmp	r3, #64	@ 0x40
 8006e82:	d01d      	beq.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0308 	and.w	r3, r3, #8
 8006e8e:	2b08      	cmp	r3, #8
 8006e90:	d116      	bne.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006e92:	2300      	movs	r3, #0
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	617b      	str	r3, [r7, #20]
 8006ea6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 f81d 	bl	8006ee8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2208      	movs	r2, #8
 8006eb2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e00f      	b.n	8006ee0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	4013      	ands	r3, r2
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	bf0c      	ite	eq
 8006ed0:	2301      	moveq	r3, #1
 8006ed2:	2300      	movne	r3, #0
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	79fb      	ldrb	r3, [r7, #7]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d0b4      	beq.n	8006e48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b095      	sub	sp, #84	@ 0x54
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	330c      	adds	r3, #12
 8006ef6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006efa:	e853 3f00 	ldrex	r3, [r3]
 8006efe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	330c      	adds	r3, #12
 8006f0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f10:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f18:	e841 2300 	strex	r3, r2, [r1]
 8006f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e5      	bne.n	8006ef0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3314      	adds	r3, #20
 8006f2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	e853 3f00 	ldrex	r3, [r3]
 8006f32:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	f023 0301 	bic.w	r3, r3, #1
 8006f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3314      	adds	r3, #20
 8006f42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f4c:	e841 2300 	strex	r3, r2, [r1]
 8006f50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e5      	bne.n	8006f24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d119      	bne.n	8006f94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	330c      	adds	r3, #12
 8006f66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	e853 3f00 	ldrex	r3, [r3]
 8006f6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f023 0310 	bic.w	r3, r3, #16
 8006f76:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	330c      	adds	r3, #12
 8006f7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f80:	61ba      	str	r2, [r7, #24]
 8006f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f84:	6979      	ldr	r1, [r7, #20]
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	e841 2300 	strex	r3, r2, [r1]
 8006f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1e5      	bne.n	8006f60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2220      	movs	r2, #32
 8006f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006fa2:	bf00      	nop
 8006fa4:	3754      	adds	r7, #84	@ 0x54
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
	...

08006fb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fb4:	b0c0      	sub	sp, #256	@ 0x100
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fcc:	68d9      	ldr	r1, [r3, #12]
 8006fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	ea40 0301 	orr.w	r3, r0, r1
 8006fd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007008:	f021 010c 	bic.w	r1, r1, #12
 800700c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007016:	430b      	orrs	r3, r1
 8007018:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800701a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800702a:	6999      	ldr	r1, [r3, #24]
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	ea40 0301 	orr.w	r3, r0, r1
 8007036:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4b8f      	ldr	r3, [pc, #572]	@ (800727c <UART_SetConfig+0x2cc>)
 8007040:	429a      	cmp	r2, r3
 8007042:	d005      	beq.n	8007050 <UART_SetConfig+0xa0>
 8007044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	4b8d      	ldr	r3, [pc, #564]	@ (8007280 <UART_SetConfig+0x2d0>)
 800704c:	429a      	cmp	r2, r3
 800704e:	d104      	bne.n	800705a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007050:	f7fe fe3a 	bl	8005cc8 <HAL_RCC_GetPCLK2Freq>
 8007054:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007058:	e003      	b.n	8007062 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800705a:	f7fe fe21 	bl	8005ca0 <HAL_RCC_GetPCLK1Freq>
 800705e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800706c:	f040 810c 	bne.w	8007288 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007074:	2200      	movs	r2, #0
 8007076:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800707a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800707e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007082:	4622      	mov	r2, r4
 8007084:	462b      	mov	r3, r5
 8007086:	1891      	adds	r1, r2, r2
 8007088:	65b9      	str	r1, [r7, #88]	@ 0x58
 800708a:	415b      	adcs	r3, r3
 800708c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800708e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007092:	4621      	mov	r1, r4
 8007094:	eb12 0801 	adds.w	r8, r2, r1
 8007098:	4629      	mov	r1, r5
 800709a:	eb43 0901 	adc.w	r9, r3, r1
 800709e:	f04f 0200 	mov.w	r2, #0
 80070a2:	f04f 0300 	mov.w	r3, #0
 80070a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070b2:	4690      	mov	r8, r2
 80070b4:	4699      	mov	r9, r3
 80070b6:	4623      	mov	r3, r4
 80070b8:	eb18 0303 	adds.w	r3, r8, r3
 80070bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80070c0:	462b      	mov	r3, r5
 80070c2:	eb49 0303 	adc.w	r3, r9, r3
 80070c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80070ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80070d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80070da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80070de:	460b      	mov	r3, r1
 80070e0:	18db      	adds	r3, r3, r3
 80070e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80070e4:	4613      	mov	r3, r2
 80070e6:	eb42 0303 	adc.w	r3, r2, r3
 80070ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80070ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80070f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80070f4:	f7f9 f8c4 	bl	8000280 <__aeabi_uldivmod>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4b61      	ldr	r3, [pc, #388]	@ (8007284 <UART_SetConfig+0x2d4>)
 80070fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007102:	095b      	lsrs	r3, r3, #5
 8007104:	011c      	lsls	r4, r3, #4
 8007106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800710a:	2200      	movs	r2, #0
 800710c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007110:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007114:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007118:	4642      	mov	r2, r8
 800711a:	464b      	mov	r3, r9
 800711c:	1891      	adds	r1, r2, r2
 800711e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007120:	415b      	adcs	r3, r3
 8007122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007124:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007128:	4641      	mov	r1, r8
 800712a:	eb12 0a01 	adds.w	sl, r2, r1
 800712e:	4649      	mov	r1, r9
 8007130:	eb43 0b01 	adc.w	fp, r3, r1
 8007134:	f04f 0200 	mov.w	r2, #0
 8007138:	f04f 0300 	mov.w	r3, #0
 800713c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007140:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007144:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007148:	4692      	mov	sl, r2
 800714a:	469b      	mov	fp, r3
 800714c:	4643      	mov	r3, r8
 800714e:	eb1a 0303 	adds.w	r3, sl, r3
 8007152:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007156:	464b      	mov	r3, r9
 8007158:	eb4b 0303 	adc.w	r3, fp, r3
 800715c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800716c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007170:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007174:	460b      	mov	r3, r1
 8007176:	18db      	adds	r3, r3, r3
 8007178:	643b      	str	r3, [r7, #64]	@ 0x40
 800717a:	4613      	mov	r3, r2
 800717c:	eb42 0303 	adc.w	r3, r2, r3
 8007180:	647b      	str	r3, [r7, #68]	@ 0x44
 8007182:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007186:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800718a:	f7f9 f879 	bl	8000280 <__aeabi_uldivmod>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	4611      	mov	r1, r2
 8007194:	4b3b      	ldr	r3, [pc, #236]	@ (8007284 <UART_SetConfig+0x2d4>)
 8007196:	fba3 2301 	umull	r2, r3, r3, r1
 800719a:	095b      	lsrs	r3, r3, #5
 800719c:	2264      	movs	r2, #100	@ 0x64
 800719e:	fb02 f303 	mul.w	r3, r2, r3
 80071a2:	1acb      	subs	r3, r1, r3
 80071a4:	00db      	lsls	r3, r3, #3
 80071a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80071aa:	4b36      	ldr	r3, [pc, #216]	@ (8007284 <UART_SetConfig+0x2d4>)
 80071ac:	fba3 2302 	umull	r2, r3, r3, r2
 80071b0:	095b      	lsrs	r3, r3, #5
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80071b8:	441c      	add	r4, r3
 80071ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071be:	2200      	movs	r2, #0
 80071c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80071c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80071cc:	4642      	mov	r2, r8
 80071ce:	464b      	mov	r3, r9
 80071d0:	1891      	adds	r1, r2, r2
 80071d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80071d4:	415b      	adcs	r3, r3
 80071d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80071dc:	4641      	mov	r1, r8
 80071de:	1851      	adds	r1, r2, r1
 80071e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80071e2:	4649      	mov	r1, r9
 80071e4:	414b      	adcs	r3, r1
 80071e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071e8:	f04f 0200 	mov.w	r2, #0
 80071ec:	f04f 0300 	mov.w	r3, #0
 80071f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80071f4:	4659      	mov	r1, fp
 80071f6:	00cb      	lsls	r3, r1, #3
 80071f8:	4651      	mov	r1, sl
 80071fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071fe:	4651      	mov	r1, sl
 8007200:	00ca      	lsls	r2, r1, #3
 8007202:	4610      	mov	r0, r2
 8007204:	4619      	mov	r1, r3
 8007206:	4603      	mov	r3, r0
 8007208:	4642      	mov	r2, r8
 800720a:	189b      	adds	r3, r3, r2
 800720c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007210:	464b      	mov	r3, r9
 8007212:	460a      	mov	r2, r1
 8007214:	eb42 0303 	adc.w	r3, r2, r3
 8007218:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007228:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800722c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007230:	460b      	mov	r3, r1
 8007232:	18db      	adds	r3, r3, r3
 8007234:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007236:	4613      	mov	r3, r2
 8007238:	eb42 0303 	adc.w	r3, r2, r3
 800723c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800723e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007242:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007246:	f7f9 f81b 	bl	8000280 <__aeabi_uldivmod>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	4b0d      	ldr	r3, [pc, #52]	@ (8007284 <UART_SetConfig+0x2d4>)
 8007250:	fba3 1302 	umull	r1, r3, r3, r2
 8007254:	095b      	lsrs	r3, r3, #5
 8007256:	2164      	movs	r1, #100	@ 0x64
 8007258:	fb01 f303 	mul.w	r3, r1, r3
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	00db      	lsls	r3, r3, #3
 8007260:	3332      	adds	r3, #50	@ 0x32
 8007262:	4a08      	ldr	r2, [pc, #32]	@ (8007284 <UART_SetConfig+0x2d4>)
 8007264:	fba2 2303 	umull	r2, r3, r2, r3
 8007268:	095b      	lsrs	r3, r3, #5
 800726a:	f003 0207 	and.w	r2, r3, #7
 800726e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4422      	add	r2, r4
 8007276:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007278:	e106      	b.n	8007488 <UART_SetConfig+0x4d8>
 800727a:	bf00      	nop
 800727c:	40011000 	.word	0x40011000
 8007280:	40011400 	.word	0x40011400
 8007284:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800728c:	2200      	movs	r2, #0
 800728e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007292:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007296:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800729a:	4642      	mov	r2, r8
 800729c:	464b      	mov	r3, r9
 800729e:	1891      	adds	r1, r2, r2
 80072a0:	6239      	str	r1, [r7, #32]
 80072a2:	415b      	adcs	r3, r3
 80072a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80072a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072aa:	4641      	mov	r1, r8
 80072ac:	1854      	adds	r4, r2, r1
 80072ae:	4649      	mov	r1, r9
 80072b0:	eb43 0501 	adc.w	r5, r3, r1
 80072b4:	f04f 0200 	mov.w	r2, #0
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	00eb      	lsls	r3, r5, #3
 80072be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072c2:	00e2      	lsls	r2, r4, #3
 80072c4:	4614      	mov	r4, r2
 80072c6:	461d      	mov	r5, r3
 80072c8:	4643      	mov	r3, r8
 80072ca:	18e3      	adds	r3, r4, r3
 80072cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80072d0:	464b      	mov	r3, r9
 80072d2:	eb45 0303 	adc.w	r3, r5, r3
 80072d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80072da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80072e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80072ea:	f04f 0200 	mov.w	r2, #0
 80072ee:	f04f 0300 	mov.w	r3, #0
 80072f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80072f6:	4629      	mov	r1, r5
 80072f8:	008b      	lsls	r3, r1, #2
 80072fa:	4621      	mov	r1, r4
 80072fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007300:	4621      	mov	r1, r4
 8007302:	008a      	lsls	r2, r1, #2
 8007304:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007308:	f7f8 ffba 	bl	8000280 <__aeabi_uldivmod>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	4b60      	ldr	r3, [pc, #384]	@ (8007494 <UART_SetConfig+0x4e4>)
 8007312:	fba3 2302 	umull	r2, r3, r3, r2
 8007316:	095b      	lsrs	r3, r3, #5
 8007318:	011c      	lsls	r4, r3, #4
 800731a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800731e:	2200      	movs	r2, #0
 8007320:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007324:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007328:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800732c:	4642      	mov	r2, r8
 800732e:	464b      	mov	r3, r9
 8007330:	1891      	adds	r1, r2, r2
 8007332:	61b9      	str	r1, [r7, #24]
 8007334:	415b      	adcs	r3, r3
 8007336:	61fb      	str	r3, [r7, #28]
 8007338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800733c:	4641      	mov	r1, r8
 800733e:	1851      	adds	r1, r2, r1
 8007340:	6139      	str	r1, [r7, #16]
 8007342:	4649      	mov	r1, r9
 8007344:	414b      	adcs	r3, r1
 8007346:	617b      	str	r3, [r7, #20]
 8007348:	f04f 0200 	mov.w	r2, #0
 800734c:	f04f 0300 	mov.w	r3, #0
 8007350:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007354:	4659      	mov	r1, fp
 8007356:	00cb      	lsls	r3, r1, #3
 8007358:	4651      	mov	r1, sl
 800735a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800735e:	4651      	mov	r1, sl
 8007360:	00ca      	lsls	r2, r1, #3
 8007362:	4610      	mov	r0, r2
 8007364:	4619      	mov	r1, r3
 8007366:	4603      	mov	r3, r0
 8007368:	4642      	mov	r2, r8
 800736a:	189b      	adds	r3, r3, r2
 800736c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007370:	464b      	mov	r3, r9
 8007372:	460a      	mov	r2, r1
 8007374:	eb42 0303 	adc.w	r3, r2, r3
 8007378:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800737c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007386:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	f04f 0300 	mov.w	r3, #0
 8007390:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007394:	4649      	mov	r1, r9
 8007396:	008b      	lsls	r3, r1, #2
 8007398:	4641      	mov	r1, r8
 800739a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800739e:	4641      	mov	r1, r8
 80073a0:	008a      	lsls	r2, r1, #2
 80073a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80073a6:	f7f8 ff6b 	bl	8000280 <__aeabi_uldivmod>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	4611      	mov	r1, r2
 80073b0:	4b38      	ldr	r3, [pc, #224]	@ (8007494 <UART_SetConfig+0x4e4>)
 80073b2:	fba3 2301 	umull	r2, r3, r3, r1
 80073b6:	095b      	lsrs	r3, r3, #5
 80073b8:	2264      	movs	r2, #100	@ 0x64
 80073ba:	fb02 f303 	mul.w	r3, r2, r3
 80073be:	1acb      	subs	r3, r1, r3
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	3332      	adds	r3, #50	@ 0x32
 80073c4:	4a33      	ldr	r2, [pc, #204]	@ (8007494 <UART_SetConfig+0x4e4>)
 80073c6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80073d0:	441c      	add	r4, r3
 80073d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073d6:	2200      	movs	r2, #0
 80073d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80073da:	677a      	str	r2, [r7, #116]	@ 0x74
 80073dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80073e0:	4642      	mov	r2, r8
 80073e2:	464b      	mov	r3, r9
 80073e4:	1891      	adds	r1, r2, r2
 80073e6:	60b9      	str	r1, [r7, #8]
 80073e8:	415b      	adcs	r3, r3
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073f0:	4641      	mov	r1, r8
 80073f2:	1851      	adds	r1, r2, r1
 80073f4:	6039      	str	r1, [r7, #0]
 80073f6:	4649      	mov	r1, r9
 80073f8:	414b      	adcs	r3, r1
 80073fa:	607b      	str	r3, [r7, #4]
 80073fc:	f04f 0200 	mov.w	r2, #0
 8007400:	f04f 0300 	mov.w	r3, #0
 8007404:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007408:	4659      	mov	r1, fp
 800740a:	00cb      	lsls	r3, r1, #3
 800740c:	4651      	mov	r1, sl
 800740e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007412:	4651      	mov	r1, sl
 8007414:	00ca      	lsls	r2, r1, #3
 8007416:	4610      	mov	r0, r2
 8007418:	4619      	mov	r1, r3
 800741a:	4603      	mov	r3, r0
 800741c:	4642      	mov	r2, r8
 800741e:	189b      	adds	r3, r3, r2
 8007420:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007422:	464b      	mov	r3, r9
 8007424:	460a      	mov	r2, r1
 8007426:	eb42 0303 	adc.w	r3, r2, r3
 800742a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800742c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	663b      	str	r3, [r7, #96]	@ 0x60
 8007436:	667a      	str	r2, [r7, #100]	@ 0x64
 8007438:	f04f 0200 	mov.w	r2, #0
 800743c:	f04f 0300 	mov.w	r3, #0
 8007440:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007444:	4649      	mov	r1, r9
 8007446:	008b      	lsls	r3, r1, #2
 8007448:	4641      	mov	r1, r8
 800744a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800744e:	4641      	mov	r1, r8
 8007450:	008a      	lsls	r2, r1, #2
 8007452:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007456:	f7f8 ff13 	bl	8000280 <__aeabi_uldivmod>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4b0d      	ldr	r3, [pc, #52]	@ (8007494 <UART_SetConfig+0x4e4>)
 8007460:	fba3 1302 	umull	r1, r3, r3, r2
 8007464:	095b      	lsrs	r3, r3, #5
 8007466:	2164      	movs	r1, #100	@ 0x64
 8007468:	fb01 f303 	mul.w	r3, r1, r3
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	011b      	lsls	r3, r3, #4
 8007470:	3332      	adds	r3, #50	@ 0x32
 8007472:	4a08      	ldr	r2, [pc, #32]	@ (8007494 <UART_SetConfig+0x4e4>)
 8007474:	fba2 2303 	umull	r2, r3, r2, r3
 8007478:	095b      	lsrs	r3, r3, #5
 800747a:	f003 020f 	and.w	r2, r3, #15
 800747e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4422      	add	r2, r4
 8007486:	609a      	str	r2, [r3, #8]
}
 8007488:	bf00      	nop
 800748a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800748e:	46bd      	mov	sp, r7
 8007490:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007494:	51eb851f 	.word	0x51eb851f

08007498 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007498:	b084      	sub	sp, #16
 800749a:	b580      	push	{r7, lr}
 800749c:	b084      	sub	sp, #16
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	f107 001c 	add.w	r0, r7, #28
 80074a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80074aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d123      	bne.n	80074fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80074c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80074da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d105      	bne.n	80074ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f9dc 	bl	80078ac <USB_CoreReset>
 80074f4:	4603      	mov	r3, r0
 80074f6:	73fb      	strb	r3, [r7, #15]
 80074f8:	e01b      	b.n	8007532 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f9d0 	bl	80078ac <USB_CoreReset>
 800750c:	4603      	mov	r3, r0
 800750e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007510:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007514:	2b00      	cmp	r3, #0
 8007516:	d106      	bne.n	8007526 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	639a      	str	r2, [r3, #56]	@ 0x38
 8007524:	e005      	b.n	8007532 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800752a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007532:	7fbb      	ldrb	r3, [r7, #30]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d10b      	bne.n	8007550 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f043 0206 	orr.w	r2, r3, #6
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	f043 0220 	orr.w	r2, r3, #32
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007550:	7bfb      	ldrb	r3, [r7, #15]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3710      	adds	r7, #16
 8007556:	46bd      	mov	sp, r7
 8007558:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800755c:	b004      	add	sp, #16
 800755e:	4770      	bx	lr

08007560 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f043 0201 	orr.w	r2, r3, #1
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007582:	b480      	push	{r7}
 8007584:	b083      	sub	sp, #12
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f023 0201 	bic.w	r2, r3, #1
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80075b0:	2300      	movs	r3, #0
 80075b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d115      	bne.n	80075f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80075d2:	200a      	movs	r0, #10
 80075d4:	f7fa f8b0 	bl	8001738 <HAL_Delay>
      ms += 10U;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	330a      	adds	r3, #10
 80075dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f956 	bl	8007890 <USB_GetMode>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d01e      	beq.n	8007628 <USB_SetCurrentMode+0x84>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80075ee:	d9f0      	bls.n	80075d2 <USB_SetCurrentMode+0x2e>
 80075f0:	e01a      	b.n	8007628 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80075f2:	78fb      	ldrb	r3, [r7, #3]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d115      	bne.n	8007624 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007604:	200a      	movs	r0, #10
 8007606:	f7fa f897 	bl	8001738 <HAL_Delay>
      ms += 10U;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	330a      	adds	r3, #10
 800760e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f93d 	bl	8007890 <USB_GetMode>
 8007616:	4603      	mov	r3, r0
 8007618:	2b00      	cmp	r3, #0
 800761a:	d005      	beq.n	8007628 <USB_SetCurrentMode+0x84>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007620:	d9f0      	bls.n	8007604 <USB_SetCurrentMode+0x60>
 8007622:	e001      	b.n	8007628 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e005      	b.n	8007634 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2bc8      	cmp	r3, #200	@ 0xc8
 800762c:	d101      	bne.n	8007632 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800763c:	b480      	push	{r7}
 800763e:	b085      	sub	sp, #20
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007646:	2300      	movs	r3, #0
 8007648:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	3301      	adds	r3, #1
 800764e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007656:	d901      	bls.n	800765c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e01b      	b.n	8007694 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	daf2      	bge.n	800764a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	019b      	lsls	r3, r3, #6
 800766c:	f043 0220 	orr.w	r2, r3, #32
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3301      	adds	r3, #1
 8007678:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007680:	d901      	bls.n	8007686 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e006      	b.n	8007694 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	f003 0320 	and.w	r3, r3, #32
 800768e:	2b20      	cmp	r3, #32
 8007690:	d0f0      	beq.n	8007674 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007692:	2300      	movs	r3, #0
}
 8007694:	4618      	mov	r0, r3
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	3301      	adds	r3, #1
 80076b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076b8:	d901      	bls.n	80076be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e018      	b.n	80076f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	daf2      	bge.n	80076ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2210      	movs	r2, #16
 80076ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	3301      	adds	r3, #1
 80076d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076dc:	d901      	bls.n	80076e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80076de:	2303      	movs	r3, #3
 80076e0:	e006      	b.n	80076f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	691b      	ldr	r3, [r3, #16]
 80076e6:	f003 0310 	and.w	r3, r3, #16
 80076ea:	2b10      	cmp	r3, #16
 80076ec:	d0f0      	beq.n	80076d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3714      	adds	r7, #20
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b089      	sub	sp, #36	@ 0x24
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	4611      	mov	r1, r2
 8007708:	461a      	mov	r2, r3
 800770a:	460b      	mov	r3, r1
 800770c:	71fb      	strb	r3, [r7, #7]
 800770e:	4613      	mov	r3, r2
 8007710:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800771a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800771e:	2b00      	cmp	r3, #0
 8007720:	d123      	bne.n	800776a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007722:	88bb      	ldrh	r3, [r7, #4]
 8007724:	3303      	adds	r3, #3
 8007726:	089b      	lsrs	r3, r3, #2
 8007728:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800772a:	2300      	movs	r3, #0
 800772c:	61bb      	str	r3, [r7, #24]
 800772e:	e018      	b.n	8007762 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007730:	79fb      	ldrb	r3, [r7, #7]
 8007732:	031a      	lsls	r2, r3, #12
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	4413      	add	r3, r2
 8007738:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800773c:	461a      	mov	r2, r3
 800773e:	69fb      	ldr	r3, [r7, #28]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	3301      	adds	r3, #1
 8007748:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	3301      	adds	r3, #1
 800774e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	3301      	adds	r3, #1
 8007754:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	3301      	adds	r3, #1
 800775a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	3301      	adds	r3, #1
 8007760:	61bb      	str	r3, [r7, #24]
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	429a      	cmp	r2, r3
 8007768:	d3e2      	bcc.n	8007730 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3724      	adds	r7, #36	@ 0x24
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007778:	b480      	push	{r7}
 800777a:	b08b      	sub	sp, #44	@ 0x2c
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	4613      	mov	r3, r2
 8007784:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800778e:	88fb      	ldrh	r3, [r7, #6]
 8007790:	089b      	lsrs	r3, r3, #2
 8007792:	b29b      	uxth	r3, r3
 8007794:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007796:	88fb      	ldrh	r3, [r7, #6]
 8007798:	f003 0303 	and.w	r3, r3, #3
 800779c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800779e:	2300      	movs	r3, #0
 80077a0:	623b      	str	r3, [r7, #32]
 80077a2:	e014      	b.n	80077ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80077b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b2:	3301      	adds	r3, #1
 80077b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80077b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b8:	3301      	adds	r3, #1
 80077ba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80077bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077be:	3301      	adds	r3, #1
 80077c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80077c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c4:	3301      	adds	r3, #1
 80077c6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	3301      	adds	r3, #1
 80077cc:	623b      	str	r3, [r7, #32]
 80077ce:	6a3a      	ldr	r2, [r7, #32]
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d3e6      	bcc.n	80077a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80077d6:	8bfb      	ldrh	r3, [r7, #30]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d01e      	beq.n	800781a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80077dc:	2300      	movs	r3, #0
 80077de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80077e6:	461a      	mov	r2, r3
 80077e8:	f107 0310 	add.w	r3, r7, #16
 80077ec:	6812      	ldr	r2, [r2, #0]
 80077ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	fa22 f303 	lsr.w	r3, r2, r3
 80077fc:	b2da      	uxtb	r2, r3
 80077fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007800:	701a      	strb	r2, [r3, #0]
      i++;
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	3301      	adds	r3, #1
 8007806:	623b      	str	r3, [r7, #32]
      pDest++;
 8007808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780a:	3301      	adds	r3, #1
 800780c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800780e:	8bfb      	ldrh	r3, [r7, #30]
 8007810:	3b01      	subs	r3, #1
 8007812:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007814:	8bfb      	ldrh	r3, [r7, #30]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d1ea      	bne.n	80077f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800781a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800781c:	4618      	mov	r0, r3
 800781e:	372c      	adds	r7, #44	@ 0x2c
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	695b      	ldr	r3, [r3, #20]
 8007834:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	4013      	ands	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007840:	68fb      	ldr	r3, [r7, #12]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800784e:	b480      	push	{r7}
 8007850:	b085      	sub	sp, #20
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	460b      	mov	r3, r1
 8007858:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800785e:	78fb      	ldrb	r3, [r7, #3]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	4413      	add	r3, r2
 8007866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800786e:	78fb      	ldrb	r3, [r7, #3]
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	4413      	add	r3, r2
 8007876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	4013      	ands	r3, r2
 8007880:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007882:	68bb      	ldr	r3, [r7, #8]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	f003 0301 	and.w	r3, r3, #1
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	3301      	adds	r3, #1
 80078bc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078c4:	d901      	bls.n	80078ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e01b      	b.n	8007902 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	daf2      	bge.n	80078b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	f043 0201 	orr.w	r2, r3, #1
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	3301      	adds	r3, #1
 80078e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078ee:	d901      	bls.n	80078f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e006      	b.n	8007902 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d0f0      	beq.n	80078e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr
	...

08007910 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007910:	b084      	sub	sp, #16
 8007912:	b580      	push	{r7, lr}
 8007914:	b086      	sub	sp, #24
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800791e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007930:	461a      	mov	r2, r3
 8007932:	2300      	movs	r3, #0
 8007934:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007946:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007952:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	68db      	ldr	r3, [r3, #12]
 800795e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007962:	2b00      	cmp	r3, #0
 8007964:	d119      	bne.n	800799a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007966:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800796a:	2b01      	cmp	r3, #1
 800796c:	d10a      	bne.n	8007984 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800797c:	f043 0304 	orr.w	r3, r3, #4
 8007980:	6013      	str	r3, [r2, #0]
 8007982:	e014      	b.n	80079ae <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007992:	f023 0304 	bic.w	r3, r3, #4
 8007996:	6013      	str	r3, [r2, #0]
 8007998:	e009      	b.n	80079ae <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80079a8:	f023 0304 	bic.w	r3, r3, #4
 80079ac:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80079ae:	2110      	movs	r1, #16
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f7ff fe43 	bl	800763c <USB_FlushTxFifo>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d001      	beq.n	80079c0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f7ff fe6d 	bl	80076a0 <USB_FlushRxFifo>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d001      	beq.n	80079d0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80079d0:	2300      	movs	r3, #0
 80079d2:	613b      	str	r3, [r7, #16]
 80079d4:	e015      	b.n	8007a02 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	015a      	lsls	r2, r3, #5
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4413      	add	r3, r2
 80079de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079e2:	461a      	mov	r2, r3
 80079e4:	f04f 33ff 	mov.w	r3, #4294967295
 80079e8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	015a      	lsls	r2, r3, #5
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	4413      	add	r3, r2
 80079f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079f6:	461a      	mov	r2, r3
 80079f8:	2300      	movs	r3, #0
 80079fa:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	3301      	adds	r3, #1
 8007a00:	613b      	str	r3, [r7, #16]
 8007a02:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007a06:	461a      	mov	r2, r3
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d3e3      	bcc.n	80079d6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f04f 32ff 	mov.w	r2, #4294967295
 8007a1a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	4a18      	ldr	r2, [pc, #96]	@ (8007a80 <USB_HostInit+0x170>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d10b      	bne.n	8007a3c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a2a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a15      	ldr	r2, [pc, #84]	@ (8007a84 <USB_HostInit+0x174>)
 8007a30:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a14      	ldr	r2, [pc, #80]	@ (8007a88 <USB_HostInit+0x178>)
 8007a36:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007a3a:	e009      	b.n	8007a50 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2280      	movs	r2, #128	@ 0x80
 8007a40:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a11      	ldr	r2, [pc, #68]	@ (8007a8c <USB_HostInit+0x17c>)
 8007a46:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a11      	ldr	r2, [pc, #68]	@ (8007a90 <USB_HostInit+0x180>)
 8007a4c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d105      	bne.n	8007a64 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	699b      	ldr	r3, [r3, #24]
 8007a5c:	f043 0210 	orr.w	r2, r3, #16
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	699a      	ldr	r2, [r3, #24]
 8007a68:	4b0a      	ldr	r3, [pc, #40]	@ (8007a94 <USB_HostInit+0x184>)
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3718      	adds	r7, #24
 8007a76:	46bd      	mov	sp, r7
 8007a78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007a7c:	b004      	add	sp, #16
 8007a7e:	4770      	bx	lr
 8007a80:	40040000 	.word	0x40040000
 8007a84:	01000200 	.word	0x01000200
 8007a88:	00e00300 	.word	0x00e00300
 8007a8c:	00600080 	.word	0x00600080
 8007a90:	004000e0 	.word	0x004000e0
 8007a94:	a3200008 	.word	0xa3200008

08007a98 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007ab6:	f023 0303 	bic.w	r3, r3, #3
 8007aba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	78fb      	ldrb	r3, [r7, #3]
 8007ac6:	f003 0303 	and.w	r3, r3, #3
 8007aca:	68f9      	ldr	r1, [r7, #12]
 8007acc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007ad4:	78fb      	ldrb	r3, [r7, #3]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d107      	bne.n	8007aea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007ae6:	6053      	str	r3, [r2, #4]
 8007ae8:	e00c      	b.n	8007b04 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007aea:	78fb      	ldrb	r3, [r7, #3]
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d107      	bne.n	8007b00 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007af6:	461a      	mov	r2, r3
 8007af8:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007afc:	6053      	str	r3, [r2, #4]
 8007afe:	e001      	b.n	8007b04 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e000      	b.n	8007b06 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3714      	adds	r7, #20
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b084      	sub	sp, #16
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007b32:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	68fa      	ldr	r2, [r7, #12]
 8007b38:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b40:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007b42:	2064      	movs	r0, #100	@ 0x64
 8007b44:	f7f9 fdf8 	bl	8001738 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007b50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b54:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007b56:	200a      	movs	r0, #10
 8007b58:	f7f9 fdee 	bl	8001738 <HAL_Delay>

  return HAL_OK;
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b085      	sub	sp, #20
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	460b      	mov	r3, r1
 8007b70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007b76:	2300      	movs	r3, #0
 8007b78:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007b8a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d109      	bne.n	8007baa <USB_DriveVbus+0x44>
 8007b96:	78fb      	ldrb	r3, [r7, #3]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d106      	bne.n	8007baa <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	68fa      	ldr	r2, [r7, #12]
 8007ba0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007ba4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007ba8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bb4:	d109      	bne.n	8007bca <USB_DriveVbus+0x64>
 8007bb6:	78fb      	ldrb	r3, [r7, #3]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d106      	bne.n	8007bca <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007bc4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bc8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007be4:	2300      	movs	r3, #0
 8007be6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	0c5b      	lsrs	r3, r3, #17
 8007bf6:	f003 0303 	and.w	r3, r3, #3
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b085      	sub	sp, #20
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	b29b      	uxth	r3, r3
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3714      	adds	r7, #20
 8007c20:	46bd      	mov	sp, r7
 8007c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c26:	4770      	bx	lr

08007c28 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	4608      	mov	r0, r1
 8007c32:	4611      	mov	r1, r2
 8007c34:	461a      	mov	r2, r3
 8007c36:	4603      	mov	r3, r0
 8007c38:	70fb      	strb	r3, [r7, #3]
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	70bb      	strb	r3, [r7, #2]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007c4a:	78fb      	ldrb	r3, [r7, #3]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c56:	461a      	mov	r2, r3
 8007c58:	f04f 33ff 	mov.w	r3, #4294967295
 8007c5c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007c5e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d87c      	bhi.n	8007d60 <USB_HC_Init+0x138>
 8007c66:	a201      	add	r2, pc, #4	@ (adr r2, 8007c6c <USB_HC_Init+0x44>)
 8007c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6c:	08007c7d 	.word	0x08007c7d
 8007c70:	08007d23 	.word	0x08007d23
 8007c74:	08007c7d 	.word	0x08007c7d
 8007c78:	08007ce5 	.word	0x08007ce5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c88:	461a      	mov	r2, r3
 8007c8a:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007c8e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007c90:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	da10      	bge.n	8007cba <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007c98:	78fb      	ldrb	r3, [r7, #3]
 8007c9a:	015a      	lsls	r2, r3, #5
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	78fa      	ldrb	r2, [r7, #3]
 8007ca8:	0151      	lsls	r1, r2, #5
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	440a      	add	r2, r1
 8007cae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cb6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007cb8:	e055      	b.n	8007d66 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a6f      	ldr	r2, [pc, #444]	@ (8007e7c <USB_HC_Init+0x254>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d151      	bne.n	8007d66 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007cc2:	78fb      	ldrb	r3, [r7, #3]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	78fa      	ldrb	r2, [r7, #3]
 8007cd2:	0151      	lsls	r1, r2, #5
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	440a      	add	r2, r1
 8007cd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cdc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007ce0:	60d3      	str	r3, [r2, #12]
      break;
 8007ce2:	e040      	b.n	8007d66 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	015a      	lsls	r2, r3, #5
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007cf6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007cf8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	da34      	bge.n	8007d6a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007d00:	78fb      	ldrb	r3, [r7, #3]
 8007d02:	015a      	lsls	r2, r3, #5
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	4413      	add	r3, r2
 8007d08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	78fa      	ldrb	r2, [r7, #3]
 8007d10:	0151      	lsls	r1, r2, #5
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	440a      	add	r2, r1
 8007d16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d1e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007d20:	e023      	b.n	8007d6a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007d22:	78fb      	ldrb	r3, [r7, #3]
 8007d24:	015a      	lsls	r2, r3, #5
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	4413      	add	r3, r2
 8007d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f240 2325 	movw	r3, #549	@ 0x225
 8007d34:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007d36:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	da17      	bge.n	8007d6e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	78fa      	ldrb	r2, [r7, #3]
 8007d4e:	0151      	lsls	r1, r2, #5
 8007d50:	693a      	ldr	r2, [r7, #16]
 8007d52:	440a      	add	r2, r1
 8007d54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d58:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007d5c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007d5e:	e006      	b.n	8007d6e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	77fb      	strb	r3, [r7, #31]
      break;
 8007d64:	e004      	b.n	8007d70 <USB_HC_Init+0x148>
      break;
 8007d66:	bf00      	nop
 8007d68:	e002      	b.n	8007d70 <USB_HC_Init+0x148>
      break;
 8007d6a:	bf00      	nop
 8007d6c:	e000      	b.n	8007d70 <USB_HC_Init+0x148>
      break;
 8007d6e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007d70:	78fb      	ldrb	r3, [r7, #3]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	2300      	movs	r3, #0
 8007d80:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007d82:	78fb      	ldrb	r3, [r7, #3]
 8007d84:	015a      	lsls	r2, r3, #5
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	4413      	add	r3, r2
 8007d8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d8e:	68db      	ldr	r3, [r3, #12]
 8007d90:	78fa      	ldrb	r2, [r7, #3]
 8007d92:	0151      	lsls	r1, r2, #5
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	440a      	add	r2, r1
 8007d98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d9c:	f043 0302 	orr.w	r3, r3, #2
 8007da0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007da8:	699a      	ldr	r2, [r3, #24]
 8007daa:	78fb      	ldrb	r3, [r7, #3]
 8007dac:	f003 030f 	and.w	r3, r3, #15
 8007db0:	2101      	movs	r1, #1
 8007db2:	fa01 f303 	lsl.w	r3, r1, r3
 8007db6:	6939      	ldr	r1, [r7, #16]
 8007db8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007dcc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	da03      	bge.n	8007ddc <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007dd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dd8:	61bb      	str	r3, [r7, #24]
 8007dda:	e001      	b.n	8007de0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7ff fef9 	bl	8007bd8 <USB_GetHostSpeed>
 8007de6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007de8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d106      	bne.n	8007dfe <USB_HC_Init+0x1d6>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d003      	beq.n	8007dfe <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007df6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007dfa:	617b      	str	r3, [r7, #20]
 8007dfc:	e001      	b.n	8007e02 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007e02:	787b      	ldrb	r3, [r7, #1]
 8007e04:	059b      	lsls	r3, r3, #22
 8007e06:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007e0a:	78bb      	ldrb	r3, [r7, #2]
 8007e0c:	02db      	lsls	r3, r3, #11
 8007e0e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007e12:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007e14:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007e18:	049b      	lsls	r3, r3, #18
 8007e1a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007e1e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007e20:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007e22:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007e26:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	431a      	orrs	r2, r3
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007e30:	78fa      	ldrb	r2, [r7, #3]
 8007e32:	0151      	lsls	r1, r2, #5
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	440a      	add	r2, r1
 8007e38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007e3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007e40:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007e42:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007e46:	2b03      	cmp	r3, #3
 8007e48:	d003      	beq.n	8007e52 <USB_HC_Init+0x22a>
 8007e4a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d10f      	bne.n	8007e72 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007e52:	78fb      	ldrb	r3, [r7, #3]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	78fa      	ldrb	r2, [r7, #3]
 8007e62:	0151      	lsls	r1, r2, #5
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	440a      	add	r2, r1
 8007e68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e70:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007e72:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3720      	adds	r7, #32
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	40040000 	.word	0x40040000

08007e80 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b08c      	sub	sp, #48	@ 0x30
 8007e84:	af02      	add	r7, sp, #8
 8007e86:	60f8      	str	r0, [r7, #12]
 8007e88:	60b9      	str	r1, [r7, #8]
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	785b      	ldrb	r3, [r3, #1]
 8007e96:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007e98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007e9c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	4a5d      	ldr	r2, [pc, #372]	@ (8008018 <USB_HC_StartXfer+0x198>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d12f      	bne.n	8007f06 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007ea6:	79fb      	ldrb	r3, [r7, #7]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d11c      	bne.n	8007ee6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	7c9b      	ldrb	r3, [r3, #18]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d003      	beq.n	8007ebc <USB_HC_StartXfer+0x3c>
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	7c9b      	ldrb	r3, [r3, #18]
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d124      	bne.n	8007f06 <USB_HC_StartXfer+0x86>
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	799b      	ldrb	r3, [r3, #6]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d120      	bne.n	8007f06 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	6a3b      	ldr	r3, [r7, #32]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	69fa      	ldr	r2, [r7, #28]
 8007ed4:	0151      	lsls	r1, r2, #5
 8007ed6:	6a3a      	ldr	r2, [r7, #32]
 8007ed8:	440a      	add	r2, r1
 8007eda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ee2:	60d3      	str	r3, [r2, #12]
 8007ee4:	e00f      	b.n	8007f06 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	791b      	ldrb	r3, [r3, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10b      	bne.n	8007f06 <USB_HC_StartXfer+0x86>
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	795b      	ldrb	r3, [r3, #5]
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d107      	bne.n	8007f06 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	785b      	ldrb	r3, [r3, #1]
 8007efa:	4619      	mov	r1, r3
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f000 fb6b 	bl	80085d8 <USB_DoPing>
        return HAL_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	e232      	b.n	800836c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	799b      	ldrb	r3, [r3, #6]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d158      	bne.n	8007fc0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	78db      	ldrb	r3, [r3, #3]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d007      	beq.n	8007f2a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007f1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007f1c:	68ba      	ldr	r2, [r7, #8]
 8007f1e:	8a92      	ldrh	r2, [r2, #20]
 8007f20:	fb03 f202 	mul.w	r2, r3, r2
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	61da      	str	r2, [r3, #28]
 8007f28:	e07c      	b.n	8008024 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	7c9b      	ldrb	r3, [r3, #18]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d130      	bne.n	8007f94 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	6a1b      	ldr	r3, [r3, #32]
 8007f36:	2bbc      	cmp	r3, #188	@ 0xbc
 8007f38:	d918      	bls.n	8007f6c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	8a9b      	ldrh	r3, [r3, #20]
 8007f3e:	461a      	mov	r2, r3
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	69da      	ldr	r2, [r3, #28]
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d003      	beq.n	8007f5c <USB_HC_StartXfer+0xdc>
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d103      	bne.n	8007f64 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2202      	movs	r2, #2
 8007f60:	60da      	str	r2, [r3, #12]
 8007f62:	e05f      	b.n	8008024 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2201      	movs	r2, #1
 8007f68:	60da      	str	r2, [r3, #12]
 8007f6a:	e05b      	b.n	8008024 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	6a1a      	ldr	r2, [r3, #32]
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d007      	beq.n	8007f8c <USB_HC_StartXfer+0x10c>
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d003      	beq.n	8007f8c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	2204      	movs	r2, #4
 8007f88:	60da      	str	r2, [r3, #12]
 8007f8a:	e04b      	b.n	8008024 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2203      	movs	r2, #3
 8007f90:	60da      	str	r2, [r3, #12]
 8007f92:	e047      	b.n	8008024 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007f94:	79fb      	ldrb	r3, [r7, #7]
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d10d      	bne.n	8007fb6 <USB_HC_StartXfer+0x136>
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	6a1b      	ldr	r3, [r3, #32]
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	8a92      	ldrh	r2, [r2, #20]
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d907      	bls.n	8007fb6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007fa6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	8a92      	ldrh	r2, [r2, #20]
 8007fac:	fb03 f202 	mul.w	r2, r3, r2
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	61da      	str	r2, [r3, #28]
 8007fb4:	e036      	b.n	8008024 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	6a1a      	ldr	r2, [r3, #32]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	61da      	str	r2, [r3, #28]
 8007fbe:	e031      	b.n	8008024 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	6a1b      	ldr	r3, [r3, #32]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d018      	beq.n	8007ffa <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	6a1b      	ldr	r3, [r3, #32]
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	8a92      	ldrh	r2, [r2, #20]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	3b01      	subs	r3, #1
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	8a92      	ldrh	r2, [r2, #20]
 8007fd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007fdc:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007fde:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007fe0:	8b7b      	ldrh	r3, [r7, #26]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d90b      	bls.n	8007ffe <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007fe6:	8b7b      	ldrh	r3, [r7, #26]
 8007fe8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007fea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	8a92      	ldrh	r2, [r2, #20]
 8007ff0:	fb03 f202 	mul.w	r2, r3, r2
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	61da      	str	r2, [r3, #28]
 8007ff8:	e001      	b.n	8007ffe <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	78db      	ldrb	r3, [r3, #3]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00a      	beq.n	800801c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008006:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	8a92      	ldrh	r2, [r2, #20]
 800800c:	fb03 f202 	mul.w	r2, r3, r2
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	61da      	str	r2, [r3, #28]
 8008014:	e006      	b.n	8008024 <USB_HC_StartXfer+0x1a4>
 8008016:	bf00      	nop
 8008018:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	6a1a      	ldr	r2, [r3, #32]
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	69db      	ldr	r3, [r3, #28]
 8008028:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800802c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800802e:	04d9      	lsls	r1, r3, #19
 8008030:	4ba3      	ldr	r3, [pc, #652]	@ (80082c0 <USB_HC_StartXfer+0x440>)
 8008032:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008034:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	7d9b      	ldrb	r3, [r3, #22]
 800803a:	075b      	lsls	r3, r3, #29
 800803c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008040:	69f9      	ldr	r1, [r7, #28]
 8008042:	0148      	lsls	r0, r1, #5
 8008044:	6a39      	ldr	r1, [r7, #32]
 8008046:	4401      	add	r1, r0
 8008048:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800804c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800804e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008050:	79fb      	ldrb	r3, [r7, #7]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d009      	beq.n	800806a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	6999      	ldr	r1, [r3, #24]
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	015a      	lsls	r2, r3, #5
 800805e:	6a3b      	ldr	r3, [r7, #32]
 8008060:	4413      	add	r3, r2
 8008062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008066:	460a      	mov	r2, r1
 8008068:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f003 0301 	and.w	r3, r3, #1
 8008076:	2b00      	cmp	r3, #0
 8008078:	bf0c      	ite	eq
 800807a:	2301      	moveq	r3, #1
 800807c:	2300      	movne	r3, #0
 800807e:	b2db      	uxtb	r3, r3
 8008080:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	4413      	add	r3, r2
 800808a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69fa      	ldr	r2, [r7, #28]
 8008092:	0151      	lsls	r1, r2, #5
 8008094:	6a3a      	ldr	r2, [r7, #32]
 8008096:	440a      	add	r2, r1
 8008098:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800809c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80080a0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	015a      	lsls	r2, r3, #5
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	4413      	add	r3, r2
 80080aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	7e7b      	ldrb	r3, [r7, #25]
 80080b2:	075b      	lsls	r3, r3, #29
 80080b4:	69f9      	ldr	r1, [r7, #28]
 80080b6:	0148      	lsls	r0, r1, #5
 80080b8:	6a39      	ldr	r1, [r7, #32]
 80080ba:	4401      	add	r1, r0
 80080bc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80080c0:	4313      	orrs	r3, r2
 80080c2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	799b      	ldrb	r3, [r3, #6]
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	f040 80c3 	bne.w	8008254 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	7c5b      	ldrb	r3, [r3, #17]
 80080d2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80080d8:	4313      	orrs	r3, r2
 80080da:	69fa      	ldr	r2, [r7, #28]
 80080dc:	0151      	lsls	r1, r2, #5
 80080de:	6a3a      	ldr	r2, [r7, #32]
 80080e0:	440a      	add	r2, r1
 80080e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80080e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80080ea:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	6a3b      	ldr	r3, [r7, #32]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	69fa      	ldr	r2, [r7, #28]
 80080fc:	0151      	lsls	r1, r2, #5
 80080fe:	6a3a      	ldr	r2, [r7, #32]
 8008100:	440a      	add	r2, r1
 8008102:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008106:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800810a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800810c:	68bb      	ldr	r3, [r7, #8]
 800810e:	79db      	ldrb	r3, [r3, #7]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d123      	bne.n	800815c <USB_HC_StartXfer+0x2dc>
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	78db      	ldrb	r3, [r3, #3]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d11f      	bne.n	800815c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	015a      	lsls	r2, r3, #5
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	4413      	add	r3, r2
 8008124:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	69fa      	ldr	r2, [r7, #28]
 800812c:	0151      	lsls	r1, r2, #5
 800812e:	6a3a      	ldr	r2, [r7, #32]
 8008130:	440a      	add	r2, r1
 8008132:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008136:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800813a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	015a      	lsls	r2, r3, #5
 8008140:	6a3b      	ldr	r3, [r7, #32]
 8008142:	4413      	add	r3, r2
 8008144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	69fa      	ldr	r2, [r7, #28]
 800814c:	0151      	lsls	r1, r2, #5
 800814e:	6a3a      	ldr	r2, [r7, #32]
 8008150:	440a      	add	r2, r1
 8008152:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800815a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	7c9b      	ldrb	r3, [r3, #18]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d003      	beq.n	800816c <USB_HC_StartXfer+0x2ec>
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	7c9b      	ldrb	r3, [r3, #18]
 8008168:	2b03      	cmp	r3, #3
 800816a:	d117      	bne.n	800819c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008170:	2b01      	cmp	r3, #1
 8008172:	d113      	bne.n	800819c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	78db      	ldrb	r3, [r3, #3]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d10f      	bne.n	800819c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	015a      	lsls	r2, r3, #5
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	4413      	add	r3, r2
 8008184:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	69fa      	ldr	r2, [r7, #28]
 800818c:	0151      	lsls	r1, r2, #5
 800818e:	6a3a      	ldr	r2, [r7, #32]
 8008190:	440a      	add	r2, r1
 8008192:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008196:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800819a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	7c9b      	ldrb	r3, [r3, #18]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d162      	bne.n	800826a <USB_HC_StartXfer+0x3ea>
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	78db      	ldrb	r3, [r3, #3]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d15e      	bne.n	800826a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	3b01      	subs	r3, #1
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d858      	bhi.n	8008268 <USB_HC_StartXfer+0x3e8>
 80081b6:	a201      	add	r2, pc, #4	@ (adr r2, 80081bc <USB_HC_StartXfer+0x33c>)
 80081b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081bc:	080081cd 	.word	0x080081cd
 80081c0:	080081ef 	.word	0x080081ef
 80081c4:	08008211 	.word	0x08008211
 80081c8:	08008233 	.word	0x08008233
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	015a      	lsls	r2, r3, #5
 80081d0:	6a3b      	ldr	r3, [r7, #32]
 80081d2:	4413      	add	r3, r2
 80081d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	69fa      	ldr	r2, [r7, #28]
 80081dc:	0151      	lsls	r1, r2, #5
 80081de:	6a3a      	ldr	r2, [r7, #32]
 80081e0:	440a      	add	r2, r1
 80081e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80081ea:	6053      	str	r3, [r2, #4]
          break;
 80081ec:	e03d      	b.n	800826a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80081ee:	69fb      	ldr	r3, [r7, #28]
 80081f0:	015a      	lsls	r2, r3, #5
 80081f2:	6a3b      	ldr	r3, [r7, #32]
 80081f4:	4413      	add	r3, r2
 80081f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	69fa      	ldr	r2, [r7, #28]
 80081fe:	0151      	lsls	r1, r2, #5
 8008200:	6a3a      	ldr	r2, [r7, #32]
 8008202:	440a      	add	r2, r1
 8008204:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008208:	f043 030e 	orr.w	r3, r3, #14
 800820c:	6053      	str	r3, [r2, #4]
          break;
 800820e:	e02c      	b.n	800826a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	015a      	lsls	r2, r3, #5
 8008214:	6a3b      	ldr	r3, [r7, #32]
 8008216:	4413      	add	r3, r2
 8008218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	69fa      	ldr	r2, [r7, #28]
 8008220:	0151      	lsls	r1, r2, #5
 8008222:	6a3a      	ldr	r2, [r7, #32]
 8008224:	440a      	add	r2, r1
 8008226:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800822a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800822e:	6053      	str	r3, [r2, #4]
          break;
 8008230:	e01b      	b.n	800826a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	4413      	add	r3, r2
 800823a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	69fa      	ldr	r2, [r7, #28]
 8008242:	0151      	lsls	r1, r2, #5
 8008244:	6a3a      	ldr	r2, [r7, #32]
 8008246:	440a      	add	r2, r1
 8008248:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800824c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008250:	6053      	str	r3, [r2, #4]
          break;
 8008252:	e00a      	b.n	800826a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008254:	69fb      	ldr	r3, [r7, #28]
 8008256:	015a      	lsls	r2, r3, #5
 8008258:	6a3b      	ldr	r3, [r7, #32]
 800825a:	4413      	add	r3, r2
 800825c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008260:	461a      	mov	r2, r3
 8008262:	2300      	movs	r3, #0
 8008264:	6053      	str	r3, [r2, #4]
 8008266:	e000      	b.n	800826a <USB_HC_StartXfer+0x3ea>
          break;
 8008268:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	015a      	lsls	r2, r3, #5
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	4413      	add	r3, r2
 8008272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008280:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	78db      	ldrb	r3, [r3, #3]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d004      	beq.n	8008294 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008290:	613b      	str	r3, [r7, #16]
 8008292:	e003      	b.n	800829c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800829a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80082a2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	6a3b      	ldr	r3, [r7, #32]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082b0:	461a      	mov	r2, r3
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d003      	beq.n	80082c4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	e055      	b.n	800836c <USB_HC_StartXfer+0x4ec>
 80082c0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	78db      	ldrb	r3, [r3, #3]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d14e      	bne.n	800836a <USB_HC_StartXfer+0x4ea>
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	6a1b      	ldr	r3, [r3, #32]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d04a      	beq.n	800836a <USB_HC_StartXfer+0x4ea>
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	79db      	ldrb	r3, [r3, #7]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d146      	bne.n	800836a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	7c9b      	ldrb	r3, [r3, #18]
 80082e0:	2b03      	cmp	r3, #3
 80082e2:	d831      	bhi.n	8008348 <USB_HC_StartXfer+0x4c8>
 80082e4:	a201      	add	r2, pc, #4	@ (adr r2, 80082ec <USB_HC_StartXfer+0x46c>)
 80082e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ea:	bf00      	nop
 80082ec:	080082fd 	.word	0x080082fd
 80082f0:	08008321 	.word	0x08008321
 80082f4:	080082fd 	.word	0x080082fd
 80082f8:	08008321 	.word	0x08008321
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	3303      	adds	r3, #3
 8008302:	089b      	lsrs	r3, r3, #2
 8008304:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008306:	8afa      	ldrh	r2, [r7, #22]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800830c:	b29b      	uxth	r3, r3
 800830e:	429a      	cmp	r2, r3
 8008310:	d91c      	bls.n	800834c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	f043 0220 	orr.w	r2, r3, #32
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	619a      	str	r2, [r3, #24]
        }
        break;
 800831e:	e015      	b.n	800834c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	6a1b      	ldr	r3, [r3, #32]
 8008324:	3303      	adds	r3, #3
 8008326:	089b      	lsrs	r3, r3, #2
 8008328:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800832a:	8afa      	ldrh	r2, [r7, #22]
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	b29b      	uxth	r3, r3
 8008336:	429a      	cmp	r2, r3
 8008338:	d90a      	bls.n	8008350 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	619a      	str	r2, [r3, #24]
        }
        break;
 8008346:	e003      	b.n	8008350 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008348:	bf00      	nop
 800834a:	e002      	b.n	8008352 <USB_HC_StartXfer+0x4d2>
        break;
 800834c:	bf00      	nop
 800834e:	e000      	b.n	8008352 <USB_HC_StartXfer+0x4d2>
        break;
 8008350:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	6999      	ldr	r1, [r3, #24]
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	785a      	ldrb	r2, [r3, #1]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	b29b      	uxth	r3, r3
 8008360:	2000      	movs	r0, #0
 8008362:	9000      	str	r0, [sp, #0]
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f7ff f9c9 	bl	80076fc <USB_WritePacket>
  }

  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3728      	adds	r7, #40	@ 0x28
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008374:	b480      	push	{r7}
 8008376:	b085      	sub	sp, #20
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	b29b      	uxth	r3, r3
}
 800838a:	4618      	mov	r0, r3
 800838c:	3714      	adds	r7, #20
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008396:	b480      	push	{r7}
 8008398:	b089      	sub	sp, #36	@ 0x24
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
 800839e:	460b      	mov	r3, r1
 80083a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80083a6:	78fb      	ldrb	r3, [r7, #3]
 80083a8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	0c9b      	lsrs	r3, r3, #18
 80083be:	f003 0303 	and.w	r3, r3, #3
 80083c2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	015a      	lsls	r2, r3, #5
 80083c8:	69fb      	ldr	r3, [r7, #28]
 80083ca:	4413      	add	r3, r2
 80083cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	0fdb      	lsrs	r3, r3, #31
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	015a      	lsls	r2, r3, #5
 80083de:	69fb      	ldr	r3, [r7, #28]
 80083e0:	4413      	add	r3, r2
 80083e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	0fdb      	lsrs	r3, r3, #31
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	f003 0320 	and.w	r3, r3, #32
 80083f8:	2b20      	cmp	r3, #32
 80083fa:	d10d      	bne.n	8008418 <USB_HC_Halt+0x82>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d10a      	bne.n	8008418 <USB_HC_Halt+0x82>
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d005      	beq.n	8008414 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	2b01      	cmp	r3, #1
 800840c:	d002      	beq.n	8008414 <USB_HC_Halt+0x7e>
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	2b03      	cmp	r3, #3
 8008412:	d101      	bne.n	8008418 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	e0d8      	b.n	80085ca <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d002      	beq.n	8008424 <USB_HC_Halt+0x8e>
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2b02      	cmp	r3, #2
 8008422:	d173      	bne.n	800850c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	4413      	add	r3, r2
 800842c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	69ba      	ldr	r2, [r7, #24]
 8008434:	0151      	lsls	r1, r2, #5
 8008436:	69fa      	ldr	r2, [r7, #28]
 8008438:	440a      	add	r2, r1
 800843a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800843e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008442:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f003 0320 	and.w	r3, r3, #32
 800844c:	2b00      	cmp	r3, #0
 800844e:	d14a      	bne.n	80084e6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008454:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008458:	2b00      	cmp	r3, #0
 800845a:	d133      	bne.n	80084c4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	4413      	add	r3, r2
 8008464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	69ba      	ldr	r2, [r7, #24]
 800846c:	0151      	lsls	r1, r2, #5
 800846e:	69fa      	ldr	r2, [r7, #28]
 8008470:	440a      	add	r2, r1
 8008472:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008476:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800847a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	4413      	add	r3, r2
 8008484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	69ba      	ldr	r2, [r7, #24]
 800848c:	0151      	lsls	r1, r2, #5
 800848e:	69fa      	ldr	r2, [r7, #28]
 8008490:	440a      	add	r2, r1
 8008492:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008496:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800849a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	3301      	adds	r3, #1
 80084a0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80084a8:	d82e      	bhi.n	8008508 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80084aa:	69bb      	ldr	r3, [r7, #24]
 80084ac:	015a      	lsls	r2, r3, #5
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	4413      	add	r3, r2
 80084b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80084bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80084c0:	d0ec      	beq.n	800849c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084c2:	e081      	b.n	80085c8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084c4:	69bb      	ldr	r3, [r7, #24]
 80084c6:	015a      	lsls	r2, r3, #5
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	4413      	add	r3, r2
 80084cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	69ba      	ldr	r2, [r7, #24]
 80084d4:	0151      	lsls	r1, r2, #5
 80084d6:	69fa      	ldr	r2, [r7, #28]
 80084d8:	440a      	add	r2, r1
 80084da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80084de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80084e2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80084e4:	e070      	b.n	80085c8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	69ba      	ldr	r2, [r7, #24]
 80084f6:	0151      	lsls	r1, r2, #5
 80084f8:	69fa      	ldr	r2, [r7, #28]
 80084fa:	440a      	add	r2, r1
 80084fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008500:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008504:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008506:	e05f      	b.n	80085c8 <USB_HC_Halt+0x232>
            break;
 8008508:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800850a:	e05d      	b.n	80085c8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	4413      	add	r3, r2
 8008514:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	69ba      	ldr	r2, [r7, #24]
 800851c:	0151      	lsls	r1, r2, #5
 800851e:	69fa      	ldr	r2, [r7, #28]
 8008520:	440a      	add	r2, r1
 8008522:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008526:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800852a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d133      	bne.n	80085a4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	015a      	lsls	r2, r3, #5
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	4413      	add	r3, r2
 8008544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	69ba      	ldr	r2, [r7, #24]
 800854c:	0151      	lsls	r1, r2, #5
 800854e:	69fa      	ldr	r2, [r7, #28]
 8008550:	440a      	add	r2, r1
 8008552:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008556:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800855a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	4413      	add	r3, r2
 8008564:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	69ba      	ldr	r2, [r7, #24]
 800856c:	0151      	lsls	r1, r2, #5
 800856e:	69fa      	ldr	r2, [r7, #28]
 8008570:	440a      	add	r2, r1
 8008572:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008576:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800857a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	3301      	adds	r3, #1
 8008580:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008588:	d81d      	bhi.n	80085c6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	4413      	add	r3, r2
 8008592:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800859c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085a0:	d0ec      	beq.n	800857c <USB_HC_Halt+0x1e6>
 80085a2:	e011      	b.n	80085c8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	015a      	lsls	r2, r3, #5
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	4413      	add	r3, r2
 80085ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	69ba      	ldr	r2, [r7, #24]
 80085b4:	0151      	lsls	r1, r2, #5
 80085b6:	69fa      	ldr	r2, [r7, #28]
 80085b8:	440a      	add	r2, r1
 80085ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085c2:	6013      	str	r3, [r2, #0]
 80085c4:	e000      	b.n	80085c8 <USB_HC_Halt+0x232>
          break;
 80085c6:	bf00      	nop
    }
  }

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3724      	adds	r7, #36	@ 0x24
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
	...

080085d8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80085d8:	b480      	push	{r7}
 80085da:	b087      	sub	sp, #28
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	460b      	mov	r3, r1
 80085e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80085e8:	78fb      	ldrb	r3, [r7, #3]
 80085ea:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80085ec:	2301      	movs	r3, #1
 80085ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	04da      	lsls	r2, r3, #19
 80085f4:	4b15      	ldr	r3, [pc, #84]	@ (800864c <USB_DoPing+0x74>)
 80085f6:	4013      	ands	r3, r2
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	0151      	lsls	r1, r2, #5
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	440a      	add	r2, r1
 8008600:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008604:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008608:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	015a      	lsls	r2, r3, #5
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	4413      	add	r3, r2
 8008612:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008620:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008628:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	015a      	lsls	r2, r3, #5
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	4413      	add	r3, r2
 8008632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008636:	461a      	mov	r2, r3
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	371c      	adds	r7, #28
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	1ff80000 	.word	0x1ff80000

08008650 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b088      	sub	sp, #32
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008658:	2300      	movs	r3, #0
 800865a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008660:	2300      	movs	r3, #0
 8008662:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f7fe ff8c 	bl	8007582 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800866a:	2110      	movs	r1, #16
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f7fe ffe5 	bl	800763c <USB_FlushTxFifo>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d001      	beq.n	800867c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f7ff f80f 	bl	80076a0 <USB_FlushRxFifo>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800868c:	2300      	movs	r3, #0
 800868e:	61bb      	str	r3, [r7, #24]
 8008690:	e01f      	b.n	80086d2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	015a      	lsls	r2, r3, #5
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	4413      	add	r3, r2
 800869a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80086a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80086b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80086b8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	015a      	lsls	r2, r3, #5
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	4413      	add	r3, r2
 80086c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086c6:	461a      	mov	r2, r3
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	3301      	adds	r3, #1
 80086d0:	61bb      	str	r3, [r7, #24]
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	2b0f      	cmp	r3, #15
 80086d6:	d9dc      	bls.n	8008692 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80086d8:	2300      	movs	r3, #0
 80086da:	61bb      	str	r3, [r7, #24]
 80086dc:	e034      	b.n	8008748 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	015a      	lsls	r2, r3, #5
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80086f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80086fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008704:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	4413      	add	r3, r2
 800870e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008712:	461a      	mov	r2, r3
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	3301      	adds	r3, #1
 800871c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008724:	d80c      	bhi.n	8008740 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	4413      	add	r3, r2
 800872e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008738:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800873c:	d0ec      	beq.n	8008718 <USB_StopHost+0xc8>
 800873e:	e000      	b.n	8008742 <USB_StopHost+0xf2>
        break;
 8008740:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	3301      	adds	r3, #1
 8008746:	61bb      	str	r3, [r7, #24]
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	2b0f      	cmp	r3, #15
 800874c:	d9c7      	bls.n	80086de <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008754:	461a      	mov	r2, r3
 8008756:	f04f 33ff 	mov.w	r3, #4294967295
 800875a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f04f 32ff 	mov.w	r2, #4294967295
 8008762:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7fe fefb 	bl	8007560 <USB_EnableGlobalInt>

  return ret;
 800876a:	7ffb      	ldrb	r3, [r7, #31]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3720      	adds	r7, #32
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008774:	b590      	push	{r4, r7, lr}
 8008776:	b089      	sub	sp, #36	@ 0x24
 8008778:	af04      	add	r7, sp, #16
 800877a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800877c:	2301      	movs	r3, #1
 800877e:	2202      	movs	r2, #2
 8008780:	2102      	movs	r1, #2
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 fc85 	bl	8009092 <USBH_FindInterface>
 8008788:	4603      	mov	r3, r0
 800878a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	2bff      	cmp	r3, #255	@ 0xff
 8008790:	d002      	beq.n	8008798 <USBH_CDC_InterfaceInit+0x24>
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d901      	bls.n	800879c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008798:	2302      	movs	r3, #2
 800879a:	e13d      	b.n	8008a18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	4619      	mov	r1, r3
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fc5a 	bl	800905a <USBH_SelectInterface>
 80087a6:	4603      	mov	r3, r0
 80087a8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d001      	beq.n	80087b4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80087b0:	2302      	movs	r3, #2
 80087b2:	e131      	b.n	8008a18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80087ba:	2050      	movs	r0, #80	@ 0x50
 80087bc:	f002 fb64 	bl	800ae88 <malloc>
 80087c0:	4603      	mov	r3, r0
 80087c2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80087ca:	69db      	ldr	r3, [r3, #28]
 80087cc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d101      	bne.n	80087d8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80087d4:	2302      	movs	r3, #2
 80087d6:	e11f      	b.n	8008a18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80087d8:	2250      	movs	r2, #80	@ 0x50
 80087da:	2100      	movs	r1, #0
 80087dc:	68b8      	ldr	r0, [r7, #8]
 80087de:	f002 fc31 	bl	800b044 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	211a      	movs	r1, #26
 80087e8:	fb01 f303 	mul.w	r3, r1, r3
 80087ec:	4413      	add	r3, r2
 80087ee:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	b25b      	sxtb	r3, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	da15      	bge.n	8008826 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	211a      	movs	r1, #26
 8008800:	fb01 f303 	mul.w	r3, r1, r3
 8008804:	4413      	add	r3, r2
 8008806:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800880a:	781a      	ldrb	r2, [r3, #0]
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008810:	7bfb      	ldrb	r3, [r7, #15]
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	211a      	movs	r1, #26
 8008816:	fb01 f303 	mul.w	r3, r1, r3
 800881a:	4413      	add	r3, r2
 800881c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008820:	881a      	ldrh	r2, [r3, #0]
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	785b      	ldrb	r3, [r3, #1]
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f001 ffbe 	bl	800a7ae <USBH_AllocPipe>
 8008832:	4603      	mov	r3, r0
 8008834:	461a      	mov	r2, r3
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	7819      	ldrb	r1, [r3, #0]
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	7858      	ldrb	r0, [r3, #1]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	8952      	ldrh	r2, [r2, #10]
 8008852:	9202      	str	r2, [sp, #8]
 8008854:	2203      	movs	r2, #3
 8008856:	9201      	str	r2, [sp, #4]
 8008858:	9300      	str	r3, [sp, #0]
 800885a:	4623      	mov	r3, r4
 800885c:	4602      	mov	r2, r0
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f001 ff76 	bl	800a750 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	2200      	movs	r2, #0
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f002 fa85 	bl	800ad7c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008872:	2300      	movs	r3, #0
 8008874:	2200      	movs	r2, #0
 8008876:	210a      	movs	r1, #10
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 fc0a 	bl	8009092 <USBH_FindInterface>
 800887e:	4603      	mov	r3, r0
 8008880:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008882:	7bfb      	ldrb	r3, [r7, #15]
 8008884:	2bff      	cmp	r3, #255	@ 0xff
 8008886:	d002      	beq.n	800888e <USBH_CDC_InterfaceInit+0x11a>
 8008888:	7bfb      	ldrb	r3, [r7, #15]
 800888a:	2b01      	cmp	r3, #1
 800888c:	d901      	bls.n	8008892 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800888e:	2302      	movs	r3, #2
 8008890:	e0c2      	b.n	8008a18 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	211a      	movs	r1, #26
 8008898:	fb01 f303 	mul.w	r3, r1, r3
 800889c:	4413      	add	r3, r2
 800889e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	b25b      	sxtb	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	da16      	bge.n	80088d8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	211a      	movs	r1, #26
 80088b0:	fb01 f303 	mul.w	r3, r1, r3
 80088b4:	4413      	add	r3, r2
 80088b6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80088ba:	781a      	ldrb	r2, [r3, #0]
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80088c0:	7bfb      	ldrb	r3, [r7, #15]
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	211a      	movs	r1, #26
 80088c6:	fb01 f303 	mul.w	r3, r1, r3
 80088ca:	4413      	add	r3, r2
 80088cc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80088d0:	881a      	ldrh	r2, [r3, #0]
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	835a      	strh	r2, [r3, #26]
 80088d6:	e015      	b.n	8008904 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80088d8:	7bfb      	ldrb	r3, [r7, #15]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	211a      	movs	r1, #26
 80088de:	fb01 f303 	mul.w	r3, r1, r3
 80088e2:	4413      	add	r3, r2
 80088e4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80088e8:	781a      	ldrb	r2, [r3, #0]
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
 80088f0:	687a      	ldr	r2, [r7, #4]
 80088f2:	211a      	movs	r1, #26
 80088f4:	fb01 f303 	mul.w	r3, r1, r3
 80088f8:	4413      	add	r3, r2
 80088fa:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80088fe:	881a      	ldrh	r2, [r3, #0]
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	211a      	movs	r1, #26
 800890a:	fb01 f303 	mul.w	r3, r1, r3
 800890e:	4413      	add	r3, r2
 8008910:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	b25b      	sxtb	r3, r3
 8008918:	2b00      	cmp	r3, #0
 800891a:	da16      	bge.n	800894a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800891c:	7bfb      	ldrb	r3, [r7, #15]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	211a      	movs	r1, #26
 8008922:	fb01 f303 	mul.w	r3, r1, r3
 8008926:	4413      	add	r3, r2
 8008928:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800892c:	781a      	ldrb	r2, [r3, #0]
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008932:	7bfb      	ldrb	r3, [r7, #15]
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	211a      	movs	r1, #26
 8008938:	fb01 f303 	mul.w	r3, r1, r3
 800893c:	4413      	add	r3, r2
 800893e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008942:	881a      	ldrh	r2, [r3, #0]
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	835a      	strh	r2, [r3, #26]
 8008948:	e015      	b.n	8008976 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	211a      	movs	r1, #26
 8008950:	fb01 f303 	mul.w	r3, r1, r3
 8008954:	4413      	add	r3, r2
 8008956:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800895a:	781a      	ldrb	r2, [r3, #0]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008960:	7bfb      	ldrb	r3, [r7, #15]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	211a      	movs	r1, #26
 8008966:	fb01 f303 	mul.w	r3, r1, r3
 800896a:	4413      	add	r3, r2
 800896c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008970:	881a      	ldrh	r2, [r3, #0]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	7b9b      	ldrb	r3, [r3, #14]
 800897a:	4619      	mov	r1, r3
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f001 ff16 	bl	800a7ae <USBH_AllocPipe>
 8008982:	4603      	mov	r3, r0
 8008984:	461a      	mov	r2, r3
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	7bdb      	ldrb	r3, [r3, #15]
 800898e:	4619      	mov	r1, r3
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f001 ff0c 	bl	800a7ae <USBH_AllocPipe>
 8008996:	4603      	mov	r3, r0
 8008998:	461a      	mov	r2, r3
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	7b59      	ldrb	r1, [r3, #13]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	7b98      	ldrb	r0, [r3, #14]
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	8b12      	ldrh	r2, [r2, #24]
 80089b6:	9202      	str	r2, [sp, #8]
 80089b8:	2202      	movs	r2, #2
 80089ba:	9201      	str	r2, [sp, #4]
 80089bc:	9300      	str	r3, [sp, #0]
 80089be:	4623      	mov	r3, r4
 80089c0:	4602      	mov	r2, r0
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f001 fec4 	bl	800a750 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	7b19      	ldrb	r1, [r3, #12]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	7bd8      	ldrb	r0, [r3, #15]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80089dc:	68ba      	ldr	r2, [r7, #8]
 80089de:	8b52      	ldrh	r2, [r2, #26]
 80089e0:	9202      	str	r2, [sp, #8]
 80089e2:	2202      	movs	r2, #2
 80089e4:	9201      	str	r2, [sp, #4]
 80089e6:	9300      	str	r3, [sp, #0]
 80089e8:	4623      	mov	r3, r4
 80089ea:	4602      	mov	r2, r0
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f001 feaf 	bl	800a750 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	7b5b      	ldrb	r3, [r3, #13]
 80089fe:	2200      	movs	r2, #0
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f002 f9ba 	bl	800ad7c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	7b1b      	ldrb	r3, [r3, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f002 f9b3 	bl	800ad7c <USBH_LL_SetToggle>

  return USBH_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3714      	adds	r7, #20
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd90      	pop	{r4, r7, pc}

08008a20 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a2e:	69db      	ldr	r3, [r3, #28]
 8008a30:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d00e      	beq.n	8008a58 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	781b      	ldrb	r3, [r3, #0]
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f001 fea4 	bl	800a78e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f001 fecf 	bl	800a7f0 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	7b1b      	ldrb	r3, [r3, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00e      	beq.n	8008a7e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	7b1b      	ldrb	r3, [r3, #12]
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f001 fe91 	bl	800a78e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	7b1b      	ldrb	r3, [r3, #12]
 8008a70:	4619      	mov	r1, r3
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f001 febc 	bl	800a7f0 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	7b5b      	ldrb	r3, [r3, #13]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00e      	beq.n	8008aa4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	7b5b      	ldrb	r3, [r3, #13]
 8008a8a:	4619      	mov	r1, r3
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f001 fe7e 	bl	800a78e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	7b5b      	ldrb	r3, [r3, #13]
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f001 fea9 	bl	800a7f0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008aaa:	69db      	ldr	r3, [r3, #28]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00b      	beq.n	8008ac8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ab6:	69db      	ldr	r3, [r3, #28]
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f002 f9ed 	bl	800ae98 <free>
    phost->pActiveClass->pData = 0U;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	3340      	adds	r3, #64	@ 0x40
 8008ae8:	4619      	mov	r1, r3
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f8b1 	bl	8008c52 <GetLineCoding>
 8008af0:	4603      	mov	r3, r0
 8008af2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008af4:	7afb      	ldrb	r3, [r7, #11]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d105      	bne.n	8008b06 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b00:	2102      	movs	r1, #2
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008b06:	7afb      	ldrb	r3, [r7, #11]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b26:	69db      	ldr	r3, [r3, #28]
 8008b28:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008b30:	2b04      	cmp	r3, #4
 8008b32:	d877      	bhi.n	8008c24 <USBH_CDC_Process+0x114>
 8008b34:	a201      	add	r2, pc, #4	@ (adr r2, 8008b3c <USBH_CDC_Process+0x2c>)
 8008b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3a:	bf00      	nop
 8008b3c:	08008b51 	.word	0x08008b51
 8008b40:	08008b57 	.word	0x08008b57
 8008b44:	08008b87 	.word	0x08008b87
 8008b48:	08008bfb 	.word	0x08008bfb
 8008b4c:	08008c09 	.word	0x08008c09
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	73fb      	strb	r3, [r7, #15]
      break;
 8008b54:	e06d      	b.n	8008c32 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 f897 	bl	8008c90 <SetLineCoding>
 8008b62:	4603      	mov	r3, r0
 8008b64:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008b66:	7bbb      	ldrb	r3, [r7, #14]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d104      	bne.n	8008b76 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008b74:	e058      	b.n	8008c28 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d055      	beq.n	8008c28 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	2204      	movs	r2, #4
 8008b80:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008b84:	e050      	b.n	8008c28 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	3340      	adds	r3, #64	@ 0x40
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f860 	bl	8008c52 <GetLineCoding>
 8008b92:	4603      	mov	r3, r0
 8008b94:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008b96:	7bbb      	ldrb	r3, [r7, #14]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d126      	bne.n	8008bea <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bae:	791b      	ldrb	r3, [r3, #4]
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d13b      	bne.n	8008c2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bbe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d133      	bne.n	8008c2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bce:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d12b      	bne.n	8008c2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bdc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d124      	bne.n	8008c2c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f958 	bl	8008e98 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008be8:	e020      	b.n	8008c2c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d01d      	beq.n	8008c2c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2204      	movs	r2, #4
 8008bf4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008bf8:	e018      	b.n	8008c2c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f867 	bl	8008cce <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f8da 	bl	8008dba <CDC_ProcessReception>
      break;
 8008c06:	e014      	b.n	8008c32 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008c08:	2100      	movs	r1, #0
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f001 f81a 	bl	8009c44 <USBH_ClrFeature>
 8008c10:	4603      	mov	r3, r0
 8008c12:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d10a      	bne.n	8008c30 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008c22:	e005      	b.n	8008c30 <USBH_CDC_Process+0x120>

    default:
      break;
 8008c24:	bf00      	nop
 8008c26:	e004      	b.n	8008c32 <USBH_CDC_Process+0x122>
      break;
 8008c28:	bf00      	nop
 8008c2a:	e002      	b.n	8008c32 <USBH_CDC_Process+0x122>
      break;
 8008c2c:	bf00      	nop
 8008c2e:	e000      	b.n	8008c32 <USBH_CDC_Process+0x122>
      break;
 8008c30:	bf00      	nop

  }

  return status;
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr

08008c52 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b082      	sub	sp, #8
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	22a1      	movs	r2, #161	@ 0xa1
 8008c60:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2221      	movs	r2, #33	@ 0x21
 8008c66:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2207      	movs	r2, #7
 8008c78:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	2207      	movs	r2, #7
 8008c7e:	4619      	mov	r1, r3
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f001 fb14 	bl	800a2ae <USBH_CtlReq>
 8008c86:	4603      	mov	r3, r0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2221      	movs	r2, #33	@ 0x21
 8008c9e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2220      	movs	r2, #32
 8008ca4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2207      	movs	r2, #7
 8008cb6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	2207      	movs	r2, #7
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f001 faf5 	bl	800a2ae <USBH_CtlReq>
 8008cc4:	4603      	mov	r3, r0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3708      	adds	r7, #8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b086      	sub	sp, #24
 8008cd2:	af02      	add	r7, sp, #8
 8008cd4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cdc:	69db      	ldr	r3, [r3, #28]
 8008cde:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d002      	beq.n	8008cf4 <CDC_ProcessTransmission+0x26>
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d023      	beq.n	8008d3a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008cf2:	e05e      	b.n	8008db2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	8b12      	ldrh	r2, [r2, #24]
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d90b      	bls.n	8008d18 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	69d9      	ldr	r1, [r3, #28]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	8b1a      	ldrh	r2, [r3, #24]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	7b5b      	ldrb	r3, [r3, #13]
 8008d0c:	2001      	movs	r0, #1
 8008d0e:	9000      	str	r0, [sp, #0]
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f001 fcda 	bl	800a6ca <USBH_BulkSendData>
 8008d16:	e00b      	b.n	8008d30 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	7b5b      	ldrb	r3, [r3, #13]
 8008d26:	2001      	movs	r0, #1
 8008d28:	9000      	str	r0, [sp, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f001 fccd 	bl	800a6ca <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	2202      	movs	r2, #2
 8008d34:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008d38:	e03b      	b.n	8008db2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	7b5b      	ldrb	r3, [r3, #13]
 8008d3e:	4619      	mov	r1, r3
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f001 fff1 	bl	800ad28 <USBH_LL_GetURBState>
 8008d46:	4603      	mov	r3, r0
 8008d48:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008d4a:	7afb      	ldrb	r3, [r7, #11]
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d128      	bne.n	8008da2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	8b12      	ldrh	r2, [r2, #24]
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d90e      	bls.n	8008d7a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	8b12      	ldrh	r2, [r2, #24]
 8008d64:	1a9a      	subs	r2, r3, r2
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	69db      	ldr	r3, [r3, #28]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	8b12      	ldrh	r2, [r2, #24]
 8008d72:	441a      	add	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	61da      	str	r2, [r3, #28]
 8008d78:	e002      	b.n	8008d80 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d004      	beq.n	8008d92 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008d90:	e00e      	b.n	8008db0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	2200      	movs	r2, #0
 8008d96:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f868 	bl	8008e70 <USBH_CDC_TransmitCallback>
      break;
 8008da0:	e006      	b.n	8008db0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008da2:	7afb      	ldrb	r3, [r7, #11]
 8008da4:	2b02      	cmp	r3, #2
 8008da6:	d103      	bne.n	8008db0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008db0:	bf00      	nop
  }
}
 8008db2:	bf00      	nop
 8008db4:	3710      	adds	r7, #16
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}

08008dba <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b086      	sub	sp, #24
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	d002      	beq.n	8008de0 <CDC_ProcessReception+0x26>
 8008dda:	2b04      	cmp	r3, #4
 8008ddc:	d00e      	beq.n	8008dfc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008dde:	e043      	b.n	8008e68 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	6a19      	ldr	r1, [r3, #32]
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	8b5a      	ldrh	r2, [r3, #26]
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	7b1b      	ldrb	r3, [r3, #12]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f001 fc91 	bl	800a714 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2204      	movs	r2, #4
 8008df6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008dfa:	e035      	b.n	8008e68 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	7b1b      	ldrb	r3, [r3, #12]
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f001 ff90 	bl	800ad28 <USBH_LL_GetURBState>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008e0c:	7cfb      	ldrb	r3, [r7, #19]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d129      	bne.n	8008e66 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	7b1b      	ldrb	r3, [r3, #12]
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f001 fef3 	bl	800ac04 <USBH_LL_GetLastXferSize>
 8008e1e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d016      	beq.n	8008e58 <CDC_ProcessReception+0x9e>
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	8b5b      	ldrh	r3, [r3, #26]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d910      	bls.n	8008e58 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	1ad2      	subs	r2, r2, r3
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	6a1a      	ldr	r2, [r3, #32]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	441a      	add	r2, r3
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	2203      	movs	r2, #3
 8008e52:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008e56:	e006      	b.n	8008e66 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f80f 	bl	8008e84 <USBH_CDC_ReceiveCallback>
      break;
 8008e66:	bf00      	nop
  }
}
 8008e68:	bf00      	nop
 8008e6a:	3718      	adds	r7, #24
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}

08008e70 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008e8c:	bf00      	nop
 8008e8e:	370c      	adds	r7, #12
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr

08008e98 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d101      	bne.n	8008ec4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	e029      	b.n	8008f18 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	79fa      	ldrb	r2, [r7, #7]
 8008ec8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f000 f81f 	bl	8008f20 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d003      	beq.n	8008f10 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f001 fdc3 	bl	800aa9c <USBH_LL_Init>

  return USBH_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	60fb      	str	r3, [r7, #12]
 8008f30:	e009      	b.n	8008f46 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	33e0      	adds	r3, #224	@ 0xe0
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4413      	add	r3, r2
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	3301      	adds	r3, #1
 8008f44:	60fb      	str	r3, [r7, #12]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2b0f      	cmp	r3, #15
 8008f4a:	d9f2      	bls.n	8008f32 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	60fb      	str	r3, [r7, #12]
 8008f50:	e009      	b.n	8008f66 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	3301      	adds	r3, #1
 8008f64:	60fb      	str	r3, [r7, #12]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f6c:	d3f1      	bcc.n	8008f52 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2240      	movs	r2, #64	@ 0x40
 8008f92:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	331c      	adds	r3, #28
 8008fbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f002 f83d 	bl	800b044 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008fd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008fd4:	2100      	movs	r1, #0
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f002 f834 	bl	800b044 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008fe2:	2212      	movs	r2, #18
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f002 f82c 	bl	800b044 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008ff2:	223e      	movs	r2, #62	@ 0x3e
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f002 f824 	bl	800b044 <memset>

  return USBH_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}

08009006 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009006:	b480      	push	{r7}
 8009008:	b085      	sub	sp, #20
 800900a:	af00      	add	r7, sp, #0
 800900c:	6078      	str	r0, [r7, #4]
 800900e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d016      	beq.n	8009048 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10e      	bne.n	8009042 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800902a:	1c59      	adds	r1, r3, #1
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	33de      	adds	r3, #222	@ 0xde
 8009036:	6839      	ldr	r1, [r7, #0]
 8009038:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800903c:	2300      	movs	r3, #0
 800903e:	73fb      	strb	r3, [r7, #15]
 8009040:	e004      	b.n	800904c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009042:	2302      	movs	r3, #2
 8009044:	73fb      	strb	r3, [r7, #15]
 8009046:	e001      	b.n	800904c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009048:	2302      	movs	r3, #2
 800904a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800904c:	7bfb      	ldrb	r3, [r7, #15]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3714      	adds	r7, #20
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800905a:	b480      	push	{r7}
 800905c:	b085      	sub	sp, #20
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
 8009062:	460b      	mov	r3, r1
 8009064:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009066:	2300      	movs	r3, #0
 8009068:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009070:	78fa      	ldrb	r2, [r7, #3]
 8009072:	429a      	cmp	r2, r3
 8009074:	d204      	bcs.n	8009080 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	78fa      	ldrb	r2, [r7, #3]
 800907a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800907e:	e001      	b.n	8009084 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009080:	2302      	movs	r3, #2
 8009082:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009084:	7bfb      	ldrb	r3, [r7, #15]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr

08009092 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009092:	b480      	push	{r7}
 8009094:	b087      	sub	sp, #28
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	4608      	mov	r0, r1
 800909c:	4611      	mov	r1, r2
 800909e:	461a      	mov	r2, r3
 80090a0:	4603      	mov	r3, r0
 80090a2:	70fb      	strb	r3, [r7, #3]
 80090a4:	460b      	mov	r3, r1
 80090a6:	70bb      	strb	r3, [r7, #2]
 80090a8:	4613      	mov	r3, r2
 80090aa:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80090ac:	2300      	movs	r3, #0
 80090ae:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80090b0:	2300      	movs	r3, #0
 80090b2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80090ba:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80090bc:	e025      	b.n	800910a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80090be:	7dfb      	ldrb	r3, [r7, #23]
 80090c0:	221a      	movs	r2, #26
 80090c2:	fb02 f303 	mul.w	r3, r2, r3
 80090c6:	3308      	adds	r3, #8
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	4413      	add	r3, r2
 80090cc:	3302      	adds	r3, #2
 80090ce:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	795b      	ldrb	r3, [r3, #5]
 80090d4:	78fa      	ldrb	r2, [r7, #3]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d002      	beq.n	80090e0 <USBH_FindInterface+0x4e>
 80090da:	78fb      	ldrb	r3, [r7, #3]
 80090dc:	2bff      	cmp	r3, #255	@ 0xff
 80090de:	d111      	bne.n	8009104 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80090e4:	78ba      	ldrb	r2, [r7, #2]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d002      	beq.n	80090f0 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80090ea:	78bb      	ldrb	r3, [r7, #2]
 80090ec:	2bff      	cmp	r3, #255	@ 0xff
 80090ee:	d109      	bne.n	8009104 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80090f4:	787a      	ldrb	r2, [r7, #1]
 80090f6:	429a      	cmp	r2, r3
 80090f8:	d002      	beq.n	8009100 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80090fa:	787b      	ldrb	r3, [r7, #1]
 80090fc:	2bff      	cmp	r3, #255	@ 0xff
 80090fe:	d101      	bne.n	8009104 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009100:	7dfb      	ldrb	r3, [r7, #23]
 8009102:	e006      	b.n	8009112 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009104:	7dfb      	ldrb	r3, [r7, #23]
 8009106:	3301      	adds	r3, #1
 8009108:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800910a:	7dfb      	ldrb	r3, [r7, #23]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d9d6      	bls.n	80090be <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009110:	23ff      	movs	r3, #255	@ 0xff
}
 8009112:	4618      	mov	r0, r3
 8009114:	371c      	adds	r7, #28
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b082      	sub	sp, #8
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f001 fcf4 	bl	800ab14 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800912c:	2101      	movs	r1, #1
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f001 fe0d 	bl	800ad4e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b088      	sub	sp, #32
 8009144:	af04      	add	r7, sp, #16
 8009146:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009148:	2302      	movs	r3, #2
 800914a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800914c:	2300      	movs	r3, #0
 800914e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009156:	b2db      	uxtb	r3, r3
 8009158:	2b01      	cmp	r3, #1
 800915a:	d102      	bne.n	8009162 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2203      	movs	r2, #3
 8009160:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	b2db      	uxtb	r3, r3
 8009168:	2b0b      	cmp	r3, #11
 800916a:	f200 81bb 	bhi.w	80094e4 <USBH_Process+0x3a4>
 800916e:	a201      	add	r2, pc, #4	@ (adr r2, 8009174 <USBH_Process+0x34>)
 8009170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009174:	080091a5 	.word	0x080091a5
 8009178:	080091d7 	.word	0x080091d7
 800917c:	0800923f 	.word	0x0800923f
 8009180:	0800947f 	.word	0x0800947f
 8009184:	080094e5 	.word	0x080094e5
 8009188:	080092df 	.word	0x080092df
 800918c:	08009425 	.word	0x08009425
 8009190:	08009315 	.word	0x08009315
 8009194:	08009335 	.word	0x08009335
 8009198:	08009353 	.word	0x08009353
 800919c:	08009397 	.word	0x08009397
 80091a0:	08009467 	.word	0x08009467
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 819b 	beq.w	80094e8 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2201      	movs	r2, #1
 80091b6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80091b8:	20c8      	movs	r0, #200	@ 0xc8
 80091ba:	f001 fe12 	bl	800ade2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f001 fd05 	bl	800abce <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80091d4:	e188      	b.n	80094e8 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d107      	bne.n	80091f0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2202      	movs	r2, #2
 80091ec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80091ee:	e18a      	b.n	8009506 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80091f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80091fa:	d914      	bls.n	8009226 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009202:	3301      	adds	r3, #1
 8009204:	b2da      	uxtb	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009212:	2b03      	cmp	r3, #3
 8009214:	d903      	bls.n	800921e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	220d      	movs	r2, #13
 800921a:	701a      	strb	r2, [r3, #0]
      break;
 800921c:	e173      	b.n	8009506 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	701a      	strb	r2, [r3, #0]
      break;
 8009224:	e16f      	b.n	8009506 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800922c:	f103 020a 	add.w	r2, r3, #10
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009236:	200a      	movs	r0, #10
 8009238:	f001 fdd3 	bl	800ade2 <USBH_Delay>
      break;
 800923c:	e163      	b.n	8009506 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009244:	2b00      	cmp	r3, #0
 8009246:	d005      	beq.n	8009254 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800924e:	2104      	movs	r1, #4
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009254:	2064      	movs	r0, #100	@ 0x64
 8009256:	f001 fdc4 	bl	800ade2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f001 fc90 	bl	800ab80 <USBH_LL_GetSpeed>
 8009260:	4603      	mov	r3, r0
 8009262:	461a      	mov	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2205      	movs	r2, #5
 800926e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009270:	2100      	movs	r1, #0
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f001 fa9b 	bl	800a7ae <USBH_AllocPipe>
 8009278:	4603      	mov	r3, r0
 800927a:	461a      	mov	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009280:	2180      	movs	r1, #128	@ 0x80
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f001 fa93 	bl	800a7ae <USBH_AllocPipe>
 8009288:	4603      	mov	r3, r0
 800928a:	461a      	mov	r2, r3
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	7919      	ldrb	r1, [r3, #4]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80092a4:	9202      	str	r2, [sp, #8]
 80092a6:	2200      	movs	r2, #0
 80092a8:	9201      	str	r2, [sp, #4]
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	4603      	mov	r3, r0
 80092ae:	2280      	movs	r2, #128	@ 0x80
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f001 fa4d 	bl	800a750 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	7959      	ldrb	r1, [r3, #5]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80092ca:	9202      	str	r2, [sp, #8]
 80092cc:	2200      	movs	r2, #0
 80092ce:	9201      	str	r2, [sp, #4]
 80092d0:	9300      	str	r3, [sp, #0]
 80092d2:	4603      	mov	r3, r0
 80092d4:	2200      	movs	r2, #0
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f001 fa3a 	bl	800a750 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80092dc:	e113      	b.n	8009506 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f916 	bl	8009510 <USBH_HandleEnum>
 80092e4:	4603      	mov	r3, r0
 80092e6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80092e8:	7bbb      	ldrb	r3, [r7, #14]
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f040 80fd 	bne.w	80094ec <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2200      	movs	r2, #0
 80092f6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009300:	2b01      	cmp	r3, #1
 8009302:	d103      	bne.n	800930c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2208      	movs	r2, #8
 8009308:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800930a:	e0ef      	b.n	80094ec <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2207      	movs	r2, #7
 8009310:	701a      	strb	r2, [r3, #0]
      break;
 8009312:	e0eb      	b.n	80094ec <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800931a:	2b00      	cmp	r3, #0
 800931c:	f000 80e8 	beq.w	80094f0 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009326:	2101      	movs	r1, #1
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2208      	movs	r2, #8
 8009330:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009332:	e0dd      	b.n	80094f0 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fc3a 	bl	8009bb6 <USBH_SetCfg>
 8009342:	4603      	mov	r3, r0
 8009344:	2b00      	cmp	r3, #0
 8009346:	f040 80d5 	bne.w	80094f4 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2209      	movs	r2, #9
 800934e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009350:	e0d0      	b.n	80094f4 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009358:	f003 0320 	and.w	r3, r3, #32
 800935c:	2b00      	cmp	r3, #0
 800935e:	d016      	beq.n	800938e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009360:	2101      	movs	r1, #1
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fc4a 	bl	8009bfc <USBH_SetFeature>
 8009368:	4603      	mov	r3, r0
 800936a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800936c:	7bbb      	ldrb	r3, [r7, #14]
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b00      	cmp	r3, #0
 8009372:	d103      	bne.n	800937c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	220a      	movs	r2, #10
 8009378:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800937a:	e0bd      	b.n	80094f8 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800937c:	7bbb      	ldrb	r3, [r7, #14]
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b03      	cmp	r3, #3
 8009382:	f040 80b9 	bne.w	80094f8 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	220a      	movs	r2, #10
 800938a:	701a      	strb	r2, [r3, #0]
      break;
 800938c:	e0b4      	b.n	80094f8 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	220a      	movs	r2, #10
 8009392:	701a      	strb	r2, [r3, #0]
      break;
 8009394:	e0b0      	b.n	80094f8 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800939c:	2b00      	cmp	r3, #0
 800939e:	f000 80ad 	beq.w	80094fc <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80093aa:	2300      	movs	r3, #0
 80093ac:	73fb      	strb	r3, [r7, #15]
 80093ae:	e016      	b.n	80093de <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80093b0:	7bfa      	ldrb	r2, [r7, #15]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	32de      	adds	r2, #222	@ 0xde
 80093b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ba:	791a      	ldrb	r2, [r3, #4]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d108      	bne.n	80093d8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80093c6:	7bfa      	ldrb	r2, [r7, #15]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	32de      	adds	r2, #222	@ 0xde
 80093cc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80093d6:	e005      	b.n	80093e4 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80093d8:	7bfb      	ldrb	r3, [r7, #15]
 80093da:	3301      	adds	r3, #1
 80093dc:	73fb      	strb	r3, [r7, #15]
 80093de:	7bfb      	ldrb	r3, [r7, #15]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d0e5      	beq.n	80093b0 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d016      	beq.n	800941c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	4798      	blx	r3
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d109      	bne.n	8009414 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2206      	movs	r2, #6
 8009404:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800940c:	2103      	movs	r1, #3
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009412:	e073      	b.n	80094fc <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	220d      	movs	r2, #13
 8009418:	701a      	strb	r2, [r3, #0]
      break;
 800941a:	e06f      	b.n	80094fc <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	220d      	movs	r2, #13
 8009420:	701a      	strb	r2, [r3, #0]
      break;
 8009422:	e06b      	b.n	80094fc <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800942a:	2b00      	cmp	r3, #0
 800942c:	d017      	beq.n	800945e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	4798      	blx	r3
 800943a:	4603      	mov	r3, r0
 800943c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b00      	cmp	r3, #0
 8009444:	d103      	bne.n	800944e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	220b      	movs	r2, #11
 800944a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800944c:	e058      	b.n	8009500 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800944e:	7bbb      	ldrb	r3, [r7, #14]
 8009450:	b2db      	uxtb	r3, r3
 8009452:	2b02      	cmp	r3, #2
 8009454:	d154      	bne.n	8009500 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	220d      	movs	r2, #13
 800945a:	701a      	strb	r2, [r3, #0]
      break;
 800945c:	e050      	b.n	8009500 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	220d      	movs	r2, #13
 8009462:	701a      	strb	r2, [r3, #0]
      break;
 8009464:	e04c      	b.n	8009500 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800946c:	2b00      	cmp	r3, #0
 800946e:	d049      	beq.n	8009504 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009476:	695b      	ldr	r3, [r3, #20]
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	4798      	blx	r3
      }
      break;
 800947c:	e042      	b.n	8009504 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7ff fd4a 	bl	8008f20 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009492:	2b00      	cmp	r3, #0
 8009494:	d009      	beq.n	80094aa <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d005      	beq.n	80094c0 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80094ba:	2105      	movs	r1, #5
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d107      	bne.n	80094dc <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f7ff fe22 	bl	800911e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80094da:	e014      	b.n	8009506 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f001 fb19 	bl	800ab14 <USBH_LL_Start>
      break;
 80094e2:	e010      	b.n	8009506 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80094e4:	bf00      	nop
 80094e6:	e00e      	b.n	8009506 <USBH_Process+0x3c6>
      break;
 80094e8:	bf00      	nop
 80094ea:	e00c      	b.n	8009506 <USBH_Process+0x3c6>
      break;
 80094ec:	bf00      	nop
 80094ee:	e00a      	b.n	8009506 <USBH_Process+0x3c6>
    break;
 80094f0:	bf00      	nop
 80094f2:	e008      	b.n	8009506 <USBH_Process+0x3c6>
      break;
 80094f4:	bf00      	nop
 80094f6:	e006      	b.n	8009506 <USBH_Process+0x3c6>
      break;
 80094f8:	bf00      	nop
 80094fa:	e004      	b.n	8009506 <USBH_Process+0x3c6>
      break;
 80094fc:	bf00      	nop
 80094fe:	e002      	b.n	8009506 <USBH_Process+0x3c6>
      break;
 8009500:	bf00      	nop
 8009502:	e000      	b.n	8009506 <USBH_Process+0x3c6>
      break;
 8009504:	bf00      	nop
  }
  return USBH_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b088      	sub	sp, #32
 8009514:	af04      	add	r7, sp, #16
 8009516:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009518:	2301      	movs	r3, #1
 800951a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800951c:	2301      	movs	r3, #1
 800951e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	785b      	ldrb	r3, [r3, #1]
 8009524:	2b07      	cmp	r3, #7
 8009526:	f200 81bd 	bhi.w	80098a4 <USBH_HandleEnum+0x394>
 800952a:	a201      	add	r2, pc, #4	@ (adr r2, 8009530 <USBH_HandleEnum+0x20>)
 800952c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009530:	08009551 	.word	0x08009551
 8009534:	0800960b 	.word	0x0800960b
 8009538:	08009675 	.word	0x08009675
 800953c:	080096ff 	.word	0x080096ff
 8009540:	08009769 	.word	0x08009769
 8009544:	080097d9 	.word	0x080097d9
 8009548:	0800981f 	.word	0x0800981f
 800954c:	08009865 	.word	0x08009865
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009550:	2108      	movs	r1, #8
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 fa4c 	bl	80099f0 <USBH_Get_DevDesc>
 8009558:	4603      	mov	r3, r0
 800955a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800955c:	7bbb      	ldrb	r3, [r7, #14]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d12e      	bne.n	80095c0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2201      	movs	r2, #1
 8009570:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	7919      	ldrb	r1, [r3, #4]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009586:	9202      	str	r2, [sp, #8]
 8009588:	2200      	movs	r2, #0
 800958a:	9201      	str	r2, [sp, #4]
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	4603      	mov	r3, r0
 8009590:	2280      	movs	r2, #128	@ 0x80
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f001 f8dc 	bl	800a750 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	7959      	ldrb	r1, [r3, #5]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80095ac:	9202      	str	r2, [sp, #8]
 80095ae:	2200      	movs	r2, #0
 80095b0:	9201      	str	r2, [sp, #4]
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	4603      	mov	r3, r0
 80095b6:	2200      	movs	r2, #0
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f001 f8c9 	bl	800a750 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80095be:	e173      	b.n	80098a8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	f040 8170 	bne.w	80098a8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80095ce:	3301      	adds	r3, #1
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80095de:	2b03      	cmp	r3, #3
 80095e0:	d903      	bls.n	80095ea <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	220d      	movs	r2, #13
 80095e6:	701a      	strb	r2, [r3, #0]
      break;
 80095e8:	e15e      	b.n	80098a8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	795b      	ldrb	r3, [r3, #5]
 80095ee:	4619      	mov	r1, r3
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f001 f8fd 	bl	800a7f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	791b      	ldrb	r3, [r3, #4]
 80095fa:	4619      	mov	r1, r3
 80095fc:	6878      	ldr	r0, [r7, #4]
 80095fe:	f001 f8f7 	bl	800a7f0 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	701a      	strb	r2, [r3, #0]
      break;
 8009608:	e14e      	b.n	80098a8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800960a:	2112      	movs	r1, #18
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 f9ef 	bl	80099f0 <USBH_Get_DevDesc>
 8009612:	4603      	mov	r3, r0
 8009614:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009616:	7bbb      	ldrb	r3, [r7, #14]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d103      	bne.n	8009624 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2202      	movs	r2, #2
 8009620:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009622:	e143      	b.n	80098ac <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009624:	7bbb      	ldrb	r3, [r7, #14]
 8009626:	2b03      	cmp	r3, #3
 8009628:	f040 8140 	bne.w	80098ac <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009632:	3301      	adds	r3, #1
 8009634:	b2da      	uxtb	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009642:	2b03      	cmp	r3, #3
 8009644:	d903      	bls.n	800964e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	220d      	movs	r2, #13
 800964a:	701a      	strb	r2, [r3, #0]
      break;
 800964c:	e12e      	b.n	80098ac <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	795b      	ldrb	r3, [r3, #5]
 8009652:	4619      	mov	r1, r3
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f001 f8cb 	bl	800a7f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	791b      	ldrb	r3, [r3, #4]
 800965e:	4619      	mov	r1, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f001 f8c5 	bl	800a7f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	701a      	strb	r2, [r3, #0]
      break;
 8009672:	e11b      	b.n	80098ac <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009674:	2101      	movs	r1, #1
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 fa79 	bl	8009b6e <USBH_SetAddress>
 800967c:	4603      	mov	r3, r0
 800967e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009680:	7bbb      	ldrb	r3, [r7, #14]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d130      	bne.n	80096e8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009686:	2002      	movs	r0, #2
 8009688:	f001 fbab 	bl	800ade2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2203      	movs	r2, #3
 8009698:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	7919      	ldrb	r1, [r3, #4]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80096ae:	9202      	str	r2, [sp, #8]
 80096b0:	2200      	movs	r2, #0
 80096b2:	9201      	str	r2, [sp, #4]
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	4603      	mov	r3, r0
 80096b8:	2280      	movs	r2, #128	@ 0x80
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f001 f848 	bl	800a750 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	7959      	ldrb	r1, [r3, #5]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80096d0:	687a      	ldr	r2, [r7, #4]
 80096d2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80096d4:	9202      	str	r2, [sp, #8]
 80096d6:	2200      	movs	r2, #0
 80096d8:	9201      	str	r2, [sp, #4]
 80096da:	9300      	str	r3, [sp, #0]
 80096dc:	4603      	mov	r3, r0
 80096de:	2200      	movs	r2, #0
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f001 f835 	bl	800a750 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80096e6:	e0e3      	b.n	80098b0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096e8:	7bbb      	ldrb	r3, [r7, #14]
 80096ea:	2b03      	cmp	r3, #3
 80096ec:	f040 80e0 	bne.w	80098b0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	220d      	movs	r2, #13
 80096f4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	705a      	strb	r2, [r3, #1]
      break;
 80096fc:	e0d8      	b.n	80098b0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80096fe:	2109      	movs	r1, #9
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 f9a1 	bl	8009a48 <USBH_Get_CfgDesc>
 8009706:	4603      	mov	r3, r0
 8009708:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800970a:	7bbb      	ldrb	r3, [r7, #14]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d103      	bne.n	8009718 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2204      	movs	r2, #4
 8009714:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009716:	e0cd      	b.n	80098b4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009718:	7bbb      	ldrb	r3, [r7, #14]
 800971a:	2b03      	cmp	r3, #3
 800971c:	f040 80ca 	bne.w	80098b4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009726:	3301      	adds	r3, #1
 8009728:	b2da      	uxtb	r2, r3
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009736:	2b03      	cmp	r3, #3
 8009738:	d903      	bls.n	8009742 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	220d      	movs	r2, #13
 800973e:	701a      	strb	r2, [r3, #0]
      break;
 8009740:	e0b8      	b.n	80098b4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	795b      	ldrb	r3, [r3, #5]
 8009746:	4619      	mov	r1, r3
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f001 f851 	bl	800a7f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	791b      	ldrb	r3, [r3, #4]
 8009752:	4619      	mov	r1, r3
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f001 f84b 	bl	800a7f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	701a      	strb	r2, [r3, #0]
      break;
 8009766:	e0a5      	b.n	80098b4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f969 	bl	8009a48 <USBH_Get_CfgDesc>
 8009776:	4603      	mov	r3, r0
 8009778:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800977a:	7bbb      	ldrb	r3, [r7, #14]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d103      	bne.n	8009788 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2205      	movs	r2, #5
 8009784:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009786:	e097      	b.n	80098b8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009788:	7bbb      	ldrb	r3, [r7, #14]
 800978a:	2b03      	cmp	r3, #3
 800978c:	f040 8094 	bne.w	80098b8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009796:	3301      	adds	r3, #1
 8009798:	b2da      	uxtb	r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80097a6:	2b03      	cmp	r3, #3
 80097a8:	d903      	bls.n	80097b2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	220d      	movs	r2, #13
 80097ae:	701a      	strb	r2, [r3, #0]
      break;
 80097b0:	e082      	b.n	80098b8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	795b      	ldrb	r3, [r3, #5]
 80097b6:	4619      	mov	r1, r3
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f001 f819 	bl	800a7f0 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	791b      	ldrb	r3, [r3, #4]
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f001 f813 	bl	800a7f0 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	701a      	strb	r2, [r3, #0]
      break;
 80097d6:	e06f      	b.n	80098b8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d019      	beq.n	8009816 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80097ee:	23ff      	movs	r3, #255	@ 0xff
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f953 	bl	8009a9c <USBH_Get_StringDesc>
 80097f6:	4603      	mov	r3, r0
 80097f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80097fa:	7bbb      	ldrb	r3, [r7, #14]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d103      	bne.n	8009808 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2206      	movs	r2, #6
 8009804:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009806:	e059      	b.n	80098bc <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009808:	7bbb      	ldrb	r3, [r7, #14]
 800980a:	2b03      	cmp	r3, #3
 800980c:	d156      	bne.n	80098bc <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2206      	movs	r2, #6
 8009812:	705a      	strb	r2, [r3, #1]
      break;
 8009814:	e052      	b.n	80098bc <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2206      	movs	r2, #6
 800981a:	705a      	strb	r2, [r3, #1]
      break;
 800981c:	e04e      	b.n	80098bc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009824:	2b00      	cmp	r3, #0
 8009826:	d019      	beq.n	800985c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009834:	23ff      	movs	r3, #255	@ 0xff
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f930 	bl	8009a9c <USBH_Get_StringDesc>
 800983c:	4603      	mov	r3, r0
 800983e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009840:	7bbb      	ldrb	r3, [r7, #14]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d103      	bne.n	800984e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2207      	movs	r2, #7
 800984a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800984c:	e038      	b.n	80098c0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800984e:	7bbb      	ldrb	r3, [r7, #14]
 8009850:	2b03      	cmp	r3, #3
 8009852:	d135      	bne.n	80098c0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2207      	movs	r2, #7
 8009858:	705a      	strb	r2, [r3, #1]
      break;
 800985a:	e031      	b.n	80098c0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2207      	movs	r2, #7
 8009860:	705a      	strb	r2, [r3, #1]
      break;
 8009862:	e02d      	b.n	80098c0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800986a:	2b00      	cmp	r3, #0
 800986c:	d017      	beq.n	800989e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800987a:	23ff      	movs	r3, #255	@ 0xff
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f90d 	bl	8009a9c <USBH_Get_StringDesc>
 8009882:	4603      	mov	r3, r0
 8009884:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009886:	7bbb      	ldrb	r3, [r7, #14]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d102      	bne.n	8009892 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800988c:	2300      	movs	r3, #0
 800988e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009890:	e018      	b.n	80098c4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009892:	7bbb      	ldrb	r3, [r7, #14]
 8009894:	2b03      	cmp	r3, #3
 8009896:	d115      	bne.n	80098c4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	73fb      	strb	r3, [r7, #15]
      break;
 800989c:	e012      	b.n	80098c4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	73fb      	strb	r3, [r7, #15]
      break;
 80098a2:	e00f      	b.n	80098c4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80098a4:	bf00      	nop
 80098a6:	e00e      	b.n	80098c6 <USBH_HandleEnum+0x3b6>
      break;
 80098a8:	bf00      	nop
 80098aa:	e00c      	b.n	80098c6 <USBH_HandleEnum+0x3b6>
      break;
 80098ac:	bf00      	nop
 80098ae:	e00a      	b.n	80098c6 <USBH_HandleEnum+0x3b6>
      break;
 80098b0:	bf00      	nop
 80098b2:	e008      	b.n	80098c6 <USBH_HandleEnum+0x3b6>
      break;
 80098b4:	bf00      	nop
 80098b6:	e006      	b.n	80098c6 <USBH_HandleEnum+0x3b6>
      break;
 80098b8:	bf00      	nop
 80098ba:	e004      	b.n	80098c6 <USBH_HandleEnum+0x3b6>
      break;
 80098bc:	bf00      	nop
 80098be:	e002      	b.n	80098c6 <USBH_HandleEnum+0x3b6>
      break;
 80098c0:	bf00      	nop
 80098c2:	e000      	b.n	80098c6 <USBH_HandleEnum+0x3b6>
      break;
 80098c4:	bf00      	nop
  }
  return Status;
 80098c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b083      	sub	sp, #12
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80098e2:	bf00      	nop
 80098e4:	370c      	adds	r7, #12
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b082      	sub	sp, #8
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 f804 	bl	8009912 <USBH_HandleSof>
}
 800990a:	bf00      	nop
 800990c:	3708      	adds	r7, #8
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b082      	sub	sp, #8
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	b2db      	uxtb	r3, r3
 8009920:	2b0b      	cmp	r3, #11
 8009922:	d10a      	bne.n	800993a <USBH_HandleSof+0x28>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800992a:	2b00      	cmp	r3, #0
 800992c:	d005      	beq.n	800993a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	4798      	blx	r3
  }
}
 800993a:	bf00      	nop
 800993c:	3708      	adds	r7, #8
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009942:	b480      	push	{r7}
 8009944:	b083      	sub	sp, #12
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2201      	movs	r2, #1
 800994e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009952:	bf00      	nop
}
 8009954:	370c      	adds	r7, #12
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr

0800995e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800995e:	b480      	push	{r7}
 8009960:	b083      	sub	sp, #12
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800996e:	bf00      	nop
}
 8009970:	370c      	adds	r7, #12
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800997a:	b480      	push	{r7}
 800997c:	b083      	sub	sp, #12
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2201      	movs	r2, #1
 8009986:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b082      	sub	sp, #8
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2201      	movs	r2, #1
 80099b4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f001 f8be 	bl	800ab4a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	791b      	ldrb	r3, [r3, #4]
 80099d2:	4619      	mov	r1, r3
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 ff0b 	bl	800a7f0 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	795b      	ldrb	r3, [r3, #5]
 80099de:	4619      	mov	r1, r3
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 ff05 	bl	800a7f0 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3708      	adds	r7, #8
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af02      	add	r7, sp, #8
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	460b      	mov	r3, r1
 80099fa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80099fc:	887b      	ldrh	r3, [r7, #2]
 80099fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a02:	d901      	bls.n	8009a08 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e01b      	b.n	8009a40 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009a0e:	887b      	ldrh	r3, [r7, #2]
 8009a10:	9300      	str	r3, [sp, #0]
 8009a12:	4613      	mov	r3, r2
 8009a14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a18:	2100      	movs	r1, #0
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f872 	bl	8009b04 <USBH_GetDescriptor>
 8009a20:	4603      	mov	r3, r0
 8009a22:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d109      	bne.n	8009a3e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009a30:	887a      	ldrh	r2, [r7, #2]
 8009a32:	4619      	mov	r1, r3
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f929 	bl	8009c8c <USBH_ParseDevDesc>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3710      	adds	r7, #16
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af02      	add	r7, sp, #8
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	460b      	mov	r3, r1
 8009a52:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	331c      	adds	r3, #28
 8009a58:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009a5a:	887b      	ldrh	r3, [r7, #2]
 8009a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a60:	d901      	bls.n	8009a66 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009a62:	2303      	movs	r3, #3
 8009a64:	e016      	b.n	8009a94 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009a66:	887b      	ldrh	r3, [r7, #2]
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a70:	2100      	movs	r1, #0
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f846 	bl	8009b04 <USBH_GetDescriptor>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d107      	bne.n	8009a92 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009a82:	887b      	ldrh	r3, [r7, #2]
 8009a84:	461a      	mov	r2, r3
 8009a86:	68b9      	ldr	r1, [r7, #8]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f9af 	bl	8009dec <USBH_ParseCfgDesc>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b088      	sub	sp, #32
 8009aa0:	af02      	add	r7, sp, #8
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	607a      	str	r2, [r7, #4]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	72fb      	strb	r3, [r7, #11]
 8009aac:	4613      	mov	r3, r2
 8009aae:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009ab0:	893b      	ldrh	r3, [r7, #8]
 8009ab2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ab6:	d802      	bhi.n	8009abe <USBH_Get_StringDesc+0x22>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e01c      	b.n	8009afc <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009ac2:	7afb      	ldrb	r3, [r7, #11]
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009aca:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009ad2:	893b      	ldrh	r3, [r7, #8]
 8009ad4:	9300      	str	r3, [sp, #0]
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	2100      	movs	r1, #0
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f000 f812 	bl	8009b04 <USBH_GetDescriptor>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009ae4:	7dfb      	ldrb	r3, [r7, #23]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d107      	bne.n	8009afa <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009af0:	893a      	ldrh	r2, [r7, #8]
 8009af2:	6879      	ldr	r1, [r7, #4]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f000 fb8d 	bl	800a214 <USBH_ParseStringDesc>
  }

  return status;
 8009afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3718      	adds	r7, #24
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	607b      	str	r3, [r7, #4]
 8009b0e:	460b      	mov	r3, r1
 8009b10:	72fb      	strb	r3, [r7, #11]
 8009b12:	4613      	mov	r3, r2
 8009b14:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	789b      	ldrb	r3, [r3, #2]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d11c      	bne.n	8009b58 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009b1e:	7afb      	ldrb	r3, [r7, #11]
 8009b20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009b24:	b2da      	uxtb	r2, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2206      	movs	r2, #6
 8009b2e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	893a      	ldrh	r2, [r7, #8]
 8009b34:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009b36:	893b      	ldrh	r3, [r7, #8]
 8009b38:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009b3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b40:	d104      	bne.n	8009b4c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f240 4209 	movw	r2, #1033	@ 0x409
 8009b48:	829a      	strh	r2, [r3, #20]
 8009b4a:	e002      	b.n	8009b52 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	8b3a      	ldrh	r2, [r7, #24]
 8009b56:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009b58:	8b3b      	ldrh	r3, [r7, #24]
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	6879      	ldr	r1, [r7, #4]
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	f000 fba5 	bl	800a2ae <USBH_CtlReq>
 8009b64:	4603      	mov	r3, r0
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3710      	adds	r7, #16
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b082      	sub	sp, #8
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	460b      	mov	r3, r1
 8009b78:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	789b      	ldrb	r3, [r3, #2]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d10f      	bne.n	8009ba2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2205      	movs	r2, #5
 8009b8c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009b8e:	78fb      	ldrb	r3, [r7, #3]
 8009b90:	b29a      	uxth	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 fb81 	bl	800a2ae <USBH_CtlReq>
 8009bac:	4603      	mov	r3, r0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b082      	sub	sp, #8
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	789b      	ldrb	r3, [r3, #2]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d10e      	bne.n	8009be8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2209      	movs	r2, #9
 8009bd4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	887a      	ldrh	r2, [r7, #2]
 8009bda:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009be8:	2200      	movs	r2, #0
 8009bea:	2100      	movs	r1, #0
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 fb5e 	bl	800a2ae <USBH_CtlReq>
 8009bf2:	4603      	mov	r3, r0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	460b      	mov	r3, r1
 8009c06:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	789b      	ldrb	r3, [r3, #2]
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d10f      	bne.n	8009c30 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2203      	movs	r2, #3
 8009c1a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009c1c:	78fb      	ldrb	r3, [r7, #3]
 8009c1e:	b29a      	uxth	r2, r3
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009c30:	2200      	movs	r2, #0
 8009c32:	2100      	movs	r1, #0
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 fb3a 	bl	800a2ae <USBH_CtlReq>
 8009c3a:	4603      	mov	r3, r0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	789b      	ldrb	r3, [r3, #2]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d10f      	bne.n	8009c78 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2202      	movs	r2, #2
 8009c5c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2201      	movs	r2, #1
 8009c62:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009c6a:	78fb      	ldrb	r3, [r7, #3]
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009c78:	2200      	movs	r2, #0
 8009c7a:	2100      	movs	r1, #0
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fb16 	bl	800a2ae <USBH_CtlReq>
 8009c82:	4603      	mov	r3, r0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b087      	sub	sp, #28
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	4613      	mov	r3, r2
 8009c98:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009ca0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d101      	bne.n	8009cb0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009cac:	2302      	movs	r3, #2
 8009cae:	e094      	b.n	8009dda <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	781a      	ldrb	r2, [r3, #0]
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	785a      	ldrb	r2, [r3, #1]
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	3302      	adds	r3, #2
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	3303      	adds	r3, #3
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	021b      	lsls	r3, r3, #8
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	791a      	ldrb	r2, [r3, #4]
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	795a      	ldrb	r2, [r3, #5]
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	799a      	ldrb	r2, [r3, #6]
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	79da      	ldrb	r2, [r3, #7]
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d004      	beq.n	8009d0e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d11b      	bne.n	8009d46 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	79db      	ldrb	r3, [r3, #7]
 8009d12:	2b20      	cmp	r3, #32
 8009d14:	dc0f      	bgt.n	8009d36 <USBH_ParseDevDesc+0xaa>
 8009d16:	2b08      	cmp	r3, #8
 8009d18:	db0f      	blt.n	8009d3a <USBH_ParseDevDesc+0xae>
 8009d1a:	3b08      	subs	r3, #8
 8009d1c:	4a32      	ldr	r2, [pc, #200]	@ (8009de8 <USBH_ParseDevDesc+0x15c>)
 8009d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d22:	f003 0301 	and.w	r3, r3, #1
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	bf14      	ite	ne
 8009d2a:	2301      	movne	r3, #1
 8009d2c:	2300      	moveq	r3, #0
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d106      	bne.n	8009d42 <USBH_ParseDevDesc+0xb6>
 8009d34:	e001      	b.n	8009d3a <USBH_ParseDevDesc+0xae>
 8009d36:	2b40      	cmp	r3, #64	@ 0x40
 8009d38:	d003      	beq.n	8009d42 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	2208      	movs	r2, #8
 8009d3e:	71da      	strb	r2, [r3, #7]
        break;
 8009d40:	e000      	b.n	8009d44 <USBH_ParseDevDesc+0xb8>
        break;
 8009d42:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009d44:	e00e      	b.n	8009d64 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d4c:	2b02      	cmp	r3, #2
 8009d4e:	d107      	bne.n	8009d60 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	79db      	ldrb	r3, [r3, #7]
 8009d54:	2b08      	cmp	r3, #8
 8009d56:	d005      	beq.n	8009d64 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	2208      	movs	r2, #8
 8009d5c:	71da      	strb	r2, [r3, #7]
 8009d5e:	e001      	b.n	8009d64 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009d60:	2303      	movs	r3, #3
 8009d62:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009d64:	88fb      	ldrh	r3, [r7, #6]
 8009d66:	2b08      	cmp	r3, #8
 8009d68:	d936      	bls.n	8009dd8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	3308      	adds	r3, #8
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	461a      	mov	r2, r3
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	3309      	adds	r3, #9
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	021b      	lsls	r3, r3, #8
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	b29a      	uxth	r2, r3
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	330a      	adds	r3, #10
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	330b      	adds	r3, #11
 8009d90:	781b      	ldrb	r3, [r3, #0]
 8009d92:	021b      	lsls	r3, r3, #8
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	4313      	orrs	r3, r2
 8009d98:	b29a      	uxth	r2, r3
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	330c      	adds	r3, #12
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	461a      	mov	r2, r3
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	330d      	adds	r3, #13
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	021b      	lsls	r3, r3, #8
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	4313      	orrs	r3, r2
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	7b9a      	ldrb	r2, [r3, #14]
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	7bda      	ldrb	r2, [r3, #15]
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	7c1a      	ldrb	r2, [r3, #16]
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	7c5a      	ldrb	r2, [r3, #17]
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	371c      	adds	r7, #28
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	01000101 	.word	0x01000101

08009dec <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b08c      	sub	sp, #48	@ 0x30
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	4613      	mov	r3, r2
 8009df8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009e00:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009e02:	2300      	movs	r3, #0
 8009e04:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d101      	bne.n	8009e1e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009e1a:	2302      	movs	r3, #2
 8009e1c:	e0da      	b.n	8009fd4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	781a      	ldrb	r2, [r3, #0]
 8009e26:	6a3b      	ldr	r3, [r7, #32]
 8009e28:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	785a      	ldrb	r2, [r3, #1]
 8009e2e:	6a3b      	ldr	r3, [r7, #32]
 8009e30:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	3302      	adds	r3, #2
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	461a      	mov	r2, r3
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	3303      	adds	r3, #3
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	021b      	lsls	r3, r3, #8
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	4313      	orrs	r3, r2
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e4c:	bf28      	it	cs
 8009e4e:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009e52:	b29a      	uxth	r2, r3
 8009e54:	6a3b      	ldr	r3, [r7, #32]
 8009e56:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	791a      	ldrb	r2, [r3, #4]
 8009e5c:	6a3b      	ldr	r3, [r7, #32]
 8009e5e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	795a      	ldrb	r2, [r3, #5]
 8009e64:	6a3b      	ldr	r3, [r7, #32]
 8009e66:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	799a      	ldrb	r2, [r3, #6]
 8009e6c:	6a3b      	ldr	r3, [r7, #32]
 8009e6e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	79da      	ldrb	r2, [r3, #7]
 8009e74:	6a3b      	ldr	r3, [r7, #32]
 8009e76:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	7a1a      	ldrb	r2, [r3, #8]
 8009e7c:	6a3b      	ldr	r3, [r7, #32]
 8009e7e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009e80:	6a3b      	ldr	r3, [r7, #32]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	2b09      	cmp	r3, #9
 8009e86:	d002      	beq.n	8009e8e <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009e88:	6a3b      	ldr	r3, [r7, #32]
 8009e8a:	2209      	movs	r2, #9
 8009e8c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009e8e:	88fb      	ldrh	r3, [r7, #6]
 8009e90:	2b09      	cmp	r3, #9
 8009e92:	f240 809d 	bls.w	8009fd0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009e96:	2309      	movs	r3, #9
 8009e98:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009e9e:	e081      	b.n	8009fa4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009ea0:	f107 0316 	add.w	r3, r7, #22
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ea8:	f000 f9e7 	bl	800a27a <USBH_GetNextDesc>
 8009eac:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb0:	785b      	ldrb	r3, [r3, #1]
 8009eb2:	2b04      	cmp	r3, #4
 8009eb4:	d176      	bne.n	8009fa4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	2b09      	cmp	r3, #9
 8009ebc:	d002      	beq.n	8009ec4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec0:	2209      	movs	r2, #9
 8009ec2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ec8:	221a      	movs	r2, #26
 8009eca:	fb02 f303 	mul.w	r3, r2, r3
 8009ece:	3308      	adds	r3, #8
 8009ed0:	6a3a      	ldr	r2, [r7, #32]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	3302      	adds	r3, #2
 8009ed6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009ed8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009eda:	69f8      	ldr	r0, [r7, #28]
 8009edc:	f000 f87e 	bl	8009fdc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009eea:	e043      	b.n	8009f74 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009eec:	f107 0316 	add.w	r3, r7, #22
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ef4:	f000 f9c1 	bl	800a27a <USBH_GetNextDesc>
 8009ef8:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efc:	785b      	ldrb	r3, [r3, #1]
 8009efe:	2b05      	cmp	r3, #5
 8009f00:	d138      	bne.n	8009f74 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	795b      	ldrb	r3, [r3, #5]
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d113      	bne.n	8009f32 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d003      	beq.n	8009f1a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	799b      	ldrb	r3, [r3, #6]
 8009f16:	2b03      	cmp	r3, #3
 8009f18:	d10b      	bne.n	8009f32 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	79db      	ldrb	r3, [r3, #7]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10b      	bne.n	8009f3a <USBH_ParseCfgDesc+0x14e>
 8009f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	2b09      	cmp	r3, #9
 8009f28:	d007      	beq.n	8009f3a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f2c:	2209      	movs	r2, #9
 8009f2e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009f30:	e003      	b.n	8009f3a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f34:	2207      	movs	r2, #7
 8009f36:	701a      	strb	r2, [r3, #0]
 8009f38:	e000      	b.n	8009f3c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009f3a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f40:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009f44:	3201      	adds	r2, #1
 8009f46:	00d2      	lsls	r2, r2, #3
 8009f48:	211a      	movs	r1, #26
 8009f4a:	fb01 f303 	mul.w	r3, r1, r3
 8009f4e:	4413      	add	r3, r2
 8009f50:	3308      	adds	r3, #8
 8009f52:	6a3a      	ldr	r2, [r7, #32]
 8009f54:	4413      	add	r3, r2
 8009f56:	3304      	adds	r3, #4
 8009f58:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009f5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f5c:	69b9      	ldr	r1, [r7, #24]
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f000 f870 	bl	800a044 <USBH_ParseEPDesc>
 8009f64:	4603      	mov	r3, r0
 8009f66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009f6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009f6e:	3301      	adds	r3, #1
 8009f70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	791b      	ldrb	r3, [r3, #4]
 8009f78:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009f7c:	429a      	cmp	r2, r3
 8009f7e:	d204      	bcs.n	8009f8a <USBH_ParseCfgDesc+0x19e>
 8009f80:	6a3b      	ldr	r3, [r7, #32]
 8009f82:	885a      	ldrh	r2, [r3, #2]
 8009f84:	8afb      	ldrh	r3, [r7, #22]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d8b0      	bhi.n	8009eec <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	791b      	ldrb	r3, [r3, #4]
 8009f8e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d201      	bcs.n	8009f9a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009f96:	2303      	movs	r3, #3
 8009f98:	e01c      	b.n	8009fd4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009f9a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d805      	bhi.n	8009fb8 <USBH_ParseCfgDesc+0x1cc>
 8009fac:	6a3b      	ldr	r3, [r7, #32]
 8009fae:	885a      	ldrh	r2, [r3, #2]
 8009fb0:	8afb      	ldrh	r3, [r7, #22]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	f63f af74 	bhi.w	8009ea0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009fb8:	6a3b      	ldr	r3, [r7, #32]
 8009fba:	791b      	ldrb	r3, [r3, #4]
 8009fbc:	2b02      	cmp	r3, #2
 8009fbe:	bf28      	it	cs
 8009fc0:	2302      	movcs	r3, #2
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d201      	bcs.n	8009fd0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009fcc:	2303      	movs	r3, #3
 8009fce:	e001      	b.n	8009fd4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009fd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3730      	adds	r7, #48	@ 0x30
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	781a      	ldrb	r2, [r3, #0]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	785a      	ldrb	r2, [r3, #1]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	789a      	ldrb	r2, [r3, #2]
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	78da      	ldrb	r2, [r3, #3]
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	3304      	adds	r3, #4
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	2b02      	cmp	r3, #2
 800a00e:	bf28      	it	cs
 800a010:	2302      	movcs	r3, #2
 800a012:	b2da      	uxtb	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	795a      	ldrb	r2, [r3, #5]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	799a      	ldrb	r2, [r3, #6]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	79da      	ldrb	r2, [r3, #7]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	7a1a      	ldrb	r2, [r3, #8]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	721a      	strb	r2, [r3, #8]
}
 800a038:	bf00      	nop
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a044:	b480      	push	{r7}
 800a046:	b087      	sub	sp, #28
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a050:	2300      	movs	r3, #0
 800a052:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	781a      	ldrb	r2, [r3, #0]
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	785a      	ldrb	r2, [r3, #1]
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	789a      	ldrb	r2, [r3, #2]
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	78da      	ldrb	r2, [r3, #3]
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	3304      	adds	r3, #4
 800a078:	781b      	ldrb	r3, [r3, #0]
 800a07a:	461a      	mov	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	3305      	adds	r3, #5
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	021b      	lsls	r3, r3, #8
 800a084:	b29b      	uxth	r3, r3
 800a086:	4313      	orrs	r3, r2
 800a088:	b29a      	uxth	r2, r3
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	799a      	ldrb	r2, [r3, #6]
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	889b      	ldrh	r3, [r3, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d009      	beq.n	800a0b2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a0a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a0a6:	d804      	bhi.n	800a0b2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a0ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0b0:	d901      	bls.n	800a0b6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d136      	bne.n	800a12e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	78db      	ldrb	r3, [r3, #3]
 800a0c4:	f003 0303 	and.w	r3, r3, #3
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d108      	bne.n	800a0de <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	889b      	ldrh	r3, [r3, #4]
 800a0d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0d4:	f240 8097 	bls.w	800a206 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	75fb      	strb	r3, [r7, #23]
 800a0dc:	e093      	b.n	800a206 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	78db      	ldrb	r3, [r3, #3]
 800a0e2:	f003 0303 	and.w	r3, r3, #3
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d107      	bne.n	800a0fa <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	889b      	ldrh	r3, [r3, #4]
 800a0ee:	2b40      	cmp	r3, #64	@ 0x40
 800a0f0:	f240 8089 	bls.w	800a206 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a0f4:	2303      	movs	r3, #3
 800a0f6:	75fb      	strb	r3, [r7, #23]
 800a0f8:	e085      	b.n	800a206 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	78db      	ldrb	r3, [r3, #3]
 800a0fe:	f003 0303 	and.w	r3, r3, #3
 800a102:	2b01      	cmp	r3, #1
 800a104:	d005      	beq.n	800a112 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	78db      	ldrb	r3, [r3, #3]
 800a10a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a10e:	2b03      	cmp	r3, #3
 800a110:	d10a      	bne.n	800a128 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	799b      	ldrb	r3, [r3, #6]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <USBH_ParseEPDesc+0xde>
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	799b      	ldrb	r3, [r3, #6]
 800a11e:	2b10      	cmp	r3, #16
 800a120:	d970      	bls.n	800a204 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a122:	2303      	movs	r3, #3
 800a124:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a126:	e06d      	b.n	800a204 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a128:	2303      	movs	r3, #3
 800a12a:	75fb      	strb	r3, [r7, #23]
 800a12c:	e06b      	b.n	800a206 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a134:	2b01      	cmp	r3, #1
 800a136:	d13c      	bne.n	800a1b2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	78db      	ldrb	r3, [r3, #3]
 800a13c:	f003 0303 	and.w	r3, r3, #3
 800a140:	2b02      	cmp	r3, #2
 800a142:	d005      	beq.n	800a150 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	78db      	ldrb	r3, [r3, #3]
 800a148:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d106      	bne.n	800a15e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	889b      	ldrh	r3, [r3, #4]
 800a154:	2b40      	cmp	r3, #64	@ 0x40
 800a156:	d956      	bls.n	800a206 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a158:	2303      	movs	r3, #3
 800a15a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a15c:	e053      	b.n	800a206 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	78db      	ldrb	r3, [r3, #3]
 800a162:	f003 0303 	and.w	r3, r3, #3
 800a166:	2b01      	cmp	r3, #1
 800a168:	d10e      	bne.n	800a188 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	799b      	ldrb	r3, [r3, #6]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d007      	beq.n	800a182 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a176:	2b10      	cmp	r3, #16
 800a178:	d803      	bhi.n	800a182 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a17e:	2b40      	cmp	r3, #64	@ 0x40
 800a180:	d941      	bls.n	800a206 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a182:	2303      	movs	r3, #3
 800a184:	75fb      	strb	r3, [r7, #23]
 800a186:	e03e      	b.n	800a206 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	78db      	ldrb	r3, [r3, #3]
 800a18c:	f003 0303 	and.w	r3, r3, #3
 800a190:	2b03      	cmp	r3, #3
 800a192:	d10b      	bne.n	800a1ac <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	799b      	ldrb	r3, [r3, #6]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d004      	beq.n	800a1a6 <USBH_ParseEPDesc+0x162>
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	889b      	ldrh	r3, [r3, #4]
 800a1a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a1a4:	d32f      	bcc.n	800a206 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	75fb      	strb	r3, [r7, #23]
 800a1aa:	e02c      	b.n	800a206 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	75fb      	strb	r3, [r7, #23]
 800a1b0:	e029      	b.n	800a206 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d120      	bne.n	800a1fe <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	78db      	ldrb	r3, [r3, #3]
 800a1c0:	f003 0303 	and.w	r3, r3, #3
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d106      	bne.n	800a1d6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	889b      	ldrh	r3, [r3, #4]
 800a1cc:	2b08      	cmp	r3, #8
 800a1ce:	d01a      	beq.n	800a206 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	75fb      	strb	r3, [r7, #23]
 800a1d4:	e017      	b.n	800a206 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	78db      	ldrb	r3, [r3, #3]
 800a1da:	f003 0303 	and.w	r3, r3, #3
 800a1de:	2b03      	cmp	r3, #3
 800a1e0:	d10a      	bne.n	800a1f8 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	799b      	ldrb	r3, [r3, #6]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d003      	beq.n	800a1f2 <USBH_ParseEPDesc+0x1ae>
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	889b      	ldrh	r3, [r3, #4]
 800a1ee:	2b08      	cmp	r3, #8
 800a1f0:	d909      	bls.n	800a206 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	75fb      	strb	r3, [r7, #23]
 800a1f6:	e006      	b.n	800a206 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	75fb      	strb	r3, [r7, #23]
 800a1fc:	e003      	b.n	800a206 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a1fe:	2303      	movs	r3, #3
 800a200:	75fb      	strb	r3, [r7, #23]
 800a202:	e000      	b.n	800a206 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a204:	bf00      	nop
  }

  return status;
 800a206:	7dfb      	ldrb	r3, [r7, #23]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	371c      	adds	r7, #28
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr

0800a214 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a214:	b480      	push	{r7}
 800a216:	b087      	sub	sp, #28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	60f8      	str	r0, [r7, #12]
 800a21c:	60b9      	str	r1, [r7, #8]
 800a21e:	4613      	mov	r3, r2
 800a220:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	3301      	adds	r3, #1
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	2b03      	cmp	r3, #3
 800a22a:	d120      	bne.n	800a26e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	1e9a      	subs	r2, r3, #2
 800a232:	88fb      	ldrh	r3, [r7, #6]
 800a234:	4293      	cmp	r3, r2
 800a236:	bf28      	it	cs
 800a238:	4613      	movcs	r3, r2
 800a23a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	3302      	adds	r3, #2
 800a240:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a242:	2300      	movs	r3, #0
 800a244:	82fb      	strh	r3, [r7, #22]
 800a246:	e00b      	b.n	800a260 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a248:	8afb      	ldrh	r3, [r7, #22]
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	4413      	add	r3, r2
 800a24e:	781a      	ldrb	r2, [r3, #0]
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	3301      	adds	r3, #1
 800a258:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a25a:	8afb      	ldrh	r3, [r7, #22]
 800a25c:	3302      	adds	r3, #2
 800a25e:	82fb      	strh	r3, [r7, #22]
 800a260:	8afa      	ldrh	r2, [r7, #22]
 800a262:	8abb      	ldrh	r3, [r7, #20]
 800a264:	429a      	cmp	r2, r3
 800a266:	d3ef      	bcc.n	800a248 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	2200      	movs	r2, #0
 800a26c:	701a      	strb	r2, [r3, #0]
  }
}
 800a26e:	bf00      	nop
 800a270:	371c      	adds	r7, #28
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr

0800a27a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a27a:	b480      	push	{r7}
 800a27c:	b085      	sub	sp, #20
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
 800a282:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	687a      	ldr	r2, [r7, #4]
 800a28a:	7812      	ldrb	r2, [r2, #0]
 800a28c:	4413      	add	r3, r2
 800a28e:	b29a      	uxth	r2, r3
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	781b      	ldrb	r3, [r3, #0]
 800a298:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4413      	add	r3, r2
 800a29e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3714      	adds	r7, #20
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr

0800a2ae <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b086      	sub	sp, #24
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	60f8      	str	r0, [r7, #12]
 800a2b6:	60b9      	str	r1, [r7, #8]
 800a2b8:	4613      	mov	r3, r2
 800a2ba:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	789b      	ldrb	r3, [r3, #2]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d002      	beq.n	800a2ce <USBH_CtlReq+0x20>
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	d00f      	beq.n	800a2ec <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a2cc:	e027      	b.n	800a31e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	88fa      	ldrh	r2, [r7, #6]
 800a2d8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2202      	movs	r2, #2
 800a2e4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a2ea:	e018      	b.n	800a31e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a2ec:	68f8      	ldr	r0, [r7, #12]
 800a2ee:	f000 f81b 	bl	800a328 <USBH_HandleControl>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a2f6:	7dfb      	ldrb	r3, [r7, #23]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d002      	beq.n	800a302 <USBH_CtlReq+0x54>
 800a2fc:	7dfb      	ldrb	r3, [r7, #23]
 800a2fe:	2b03      	cmp	r3, #3
 800a300:	d106      	bne.n	800a310 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2201      	movs	r2, #1
 800a306:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2200      	movs	r2, #0
 800a30c:	761a      	strb	r2, [r3, #24]
      break;
 800a30e:	e005      	b.n	800a31c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a310:	7dfb      	ldrb	r3, [r7, #23]
 800a312:	2b02      	cmp	r3, #2
 800a314:	d102      	bne.n	800a31c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2201      	movs	r2, #1
 800a31a:	709a      	strb	r2, [r3, #2]
      break;
 800a31c:	bf00      	nop
  }
  return status;
 800a31e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3718      	adds	r7, #24
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af02      	add	r7, sp, #8
 800a32e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a330:	2301      	movs	r3, #1
 800a332:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a334:	2300      	movs	r3, #0
 800a336:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	7e1b      	ldrb	r3, [r3, #24]
 800a33c:	3b01      	subs	r3, #1
 800a33e:	2b0a      	cmp	r3, #10
 800a340:	f200 8156 	bhi.w	800a5f0 <USBH_HandleControl+0x2c8>
 800a344:	a201      	add	r2, pc, #4	@ (adr r2, 800a34c <USBH_HandleControl+0x24>)
 800a346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a34a:	bf00      	nop
 800a34c:	0800a379 	.word	0x0800a379
 800a350:	0800a393 	.word	0x0800a393
 800a354:	0800a3fd 	.word	0x0800a3fd
 800a358:	0800a423 	.word	0x0800a423
 800a35c:	0800a45b 	.word	0x0800a45b
 800a360:	0800a485 	.word	0x0800a485
 800a364:	0800a4d7 	.word	0x0800a4d7
 800a368:	0800a4f9 	.word	0x0800a4f9
 800a36c:	0800a535 	.word	0x0800a535
 800a370:	0800a55b 	.word	0x0800a55b
 800a374:	0800a599 	.word	0x0800a599
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f103 0110 	add.w	r1, r3, #16
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	795b      	ldrb	r3, [r3, #5]
 800a382:	461a      	mov	r2, r3
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 f943 	bl	800a610 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2202      	movs	r2, #2
 800a38e:	761a      	strb	r2, [r3, #24]
      break;
 800a390:	e139      	b.n	800a606 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	795b      	ldrb	r3, [r3, #5]
 800a396:	4619      	mov	r1, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 fcc5 	bl	800ad28 <USBH_LL_GetURBState>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a3a2:	7bbb      	ldrb	r3, [r7, #14]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d11e      	bne.n	800a3e6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	7c1b      	ldrb	r3, [r3, #16]
 800a3ac:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a3b0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	8adb      	ldrh	r3, [r3, #22]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d00a      	beq.n	800a3d0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a3ba:	7b7b      	ldrb	r3, [r7, #13]
 800a3bc:	2b80      	cmp	r3, #128	@ 0x80
 800a3be:	d103      	bne.n	800a3c8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2203      	movs	r2, #3
 800a3c4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a3c6:	e115      	b.n	800a5f4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2205      	movs	r2, #5
 800a3cc:	761a      	strb	r2, [r3, #24]
      break;
 800a3ce:	e111      	b.n	800a5f4 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a3d0:	7b7b      	ldrb	r3, [r7, #13]
 800a3d2:	2b80      	cmp	r3, #128	@ 0x80
 800a3d4:	d103      	bne.n	800a3de <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2209      	movs	r2, #9
 800a3da:	761a      	strb	r2, [r3, #24]
      break;
 800a3dc:	e10a      	b.n	800a5f4 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2207      	movs	r2, #7
 800a3e2:	761a      	strb	r2, [r3, #24]
      break;
 800a3e4:	e106      	b.n	800a5f4 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a3e6:	7bbb      	ldrb	r3, [r7, #14]
 800a3e8:	2b04      	cmp	r3, #4
 800a3ea:	d003      	beq.n	800a3f4 <USBH_HandleControl+0xcc>
 800a3ec:	7bbb      	ldrb	r3, [r7, #14]
 800a3ee:	2b02      	cmp	r3, #2
 800a3f0:	f040 8100 	bne.w	800a5f4 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	220b      	movs	r2, #11
 800a3f8:	761a      	strb	r2, [r3, #24]
      break;
 800a3fa:	e0fb      	b.n	800a5f4 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a402:	b29a      	uxth	r2, r3
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6899      	ldr	r1, [r3, #8]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	899a      	ldrh	r2, [r3, #12]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	791b      	ldrb	r3, [r3, #4]
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f000 f93a 	bl	800a68e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2204      	movs	r2, #4
 800a41e:	761a      	strb	r2, [r3, #24]
      break;
 800a420:	e0f1      	b.n	800a606 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	791b      	ldrb	r3, [r3, #4]
 800a426:	4619      	mov	r1, r3
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f000 fc7d 	bl	800ad28 <USBH_LL_GetURBState>
 800a42e:	4603      	mov	r3, r0
 800a430:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a432:	7bbb      	ldrb	r3, [r7, #14]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d102      	bne.n	800a43e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2209      	movs	r2, #9
 800a43c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a43e:	7bbb      	ldrb	r3, [r7, #14]
 800a440:	2b05      	cmp	r3, #5
 800a442:	d102      	bne.n	800a44a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a444:	2303      	movs	r3, #3
 800a446:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a448:	e0d6      	b.n	800a5f8 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a44a:	7bbb      	ldrb	r3, [r7, #14]
 800a44c:	2b04      	cmp	r3, #4
 800a44e:	f040 80d3 	bne.w	800a5f8 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	220b      	movs	r2, #11
 800a456:	761a      	strb	r2, [r3, #24]
      break;
 800a458:	e0ce      	b.n	800a5f8 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6899      	ldr	r1, [r3, #8]
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	899a      	ldrh	r2, [r3, #12]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	795b      	ldrb	r3, [r3, #5]
 800a466:	2001      	movs	r0, #1
 800a468:	9000      	str	r0, [sp, #0]
 800a46a:	6878      	ldr	r0, [r7, #4]
 800a46c:	f000 f8ea 	bl	800a644 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a476:	b29a      	uxth	r2, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2206      	movs	r2, #6
 800a480:	761a      	strb	r2, [r3, #24]
      break;
 800a482:	e0c0      	b.n	800a606 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	795b      	ldrb	r3, [r3, #5]
 800a488:	4619      	mov	r1, r3
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fc4c 	bl	800ad28 <USBH_LL_GetURBState>
 800a490:	4603      	mov	r3, r0
 800a492:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a494:	7bbb      	ldrb	r3, [r7, #14]
 800a496:	2b01      	cmp	r3, #1
 800a498:	d103      	bne.n	800a4a2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2207      	movs	r2, #7
 800a49e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a4a0:	e0ac      	b.n	800a5fc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a4a2:	7bbb      	ldrb	r3, [r7, #14]
 800a4a4:	2b05      	cmp	r3, #5
 800a4a6:	d105      	bne.n	800a4b4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	220c      	movs	r2, #12
 800a4ac:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a4ae:	2303      	movs	r3, #3
 800a4b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a4b2:	e0a3      	b.n	800a5fc <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a4b4:	7bbb      	ldrb	r3, [r7, #14]
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d103      	bne.n	800a4c2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2205      	movs	r2, #5
 800a4be:	761a      	strb	r2, [r3, #24]
      break;
 800a4c0:	e09c      	b.n	800a5fc <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a4c2:	7bbb      	ldrb	r3, [r7, #14]
 800a4c4:	2b04      	cmp	r3, #4
 800a4c6:	f040 8099 	bne.w	800a5fc <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	220b      	movs	r2, #11
 800a4ce:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a4d4:	e092      	b.n	800a5fc <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	791b      	ldrb	r3, [r3, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	2100      	movs	r1, #0
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 f8d5 	bl	800a68e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2208      	movs	r2, #8
 800a4f4:	761a      	strb	r2, [r3, #24]

      break;
 800a4f6:	e086      	b.n	800a606 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	791b      	ldrb	r3, [r3, #4]
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 fc12 	bl	800ad28 <USBH_LL_GetURBState>
 800a504:	4603      	mov	r3, r0
 800a506:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a508:	7bbb      	ldrb	r3, [r7, #14]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d105      	bne.n	800a51a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	220d      	movs	r2, #13
 800a512:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a514:	2300      	movs	r3, #0
 800a516:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a518:	e072      	b.n	800a600 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a51a:	7bbb      	ldrb	r3, [r7, #14]
 800a51c:	2b04      	cmp	r3, #4
 800a51e:	d103      	bne.n	800a528 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	220b      	movs	r2, #11
 800a524:	761a      	strb	r2, [r3, #24]
      break;
 800a526:	e06b      	b.n	800a600 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a528:	7bbb      	ldrb	r3, [r7, #14]
 800a52a:	2b05      	cmp	r3, #5
 800a52c:	d168      	bne.n	800a600 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a52e:	2303      	movs	r3, #3
 800a530:	73fb      	strb	r3, [r7, #15]
      break;
 800a532:	e065      	b.n	800a600 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	795b      	ldrb	r3, [r3, #5]
 800a538:	2201      	movs	r2, #1
 800a53a:	9200      	str	r2, [sp, #0]
 800a53c:	2200      	movs	r2, #0
 800a53e:	2100      	movs	r1, #0
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f87f 	bl	800a644 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	220a      	movs	r2, #10
 800a556:	761a      	strb	r2, [r3, #24]
      break;
 800a558:	e055      	b.n	800a606 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	795b      	ldrb	r3, [r3, #5]
 800a55e:	4619      	mov	r1, r3
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 fbe1 	bl	800ad28 <USBH_LL_GetURBState>
 800a566:	4603      	mov	r3, r0
 800a568:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a56a:	7bbb      	ldrb	r3, [r7, #14]
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d105      	bne.n	800a57c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	220d      	movs	r2, #13
 800a578:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a57a:	e043      	b.n	800a604 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a57c:	7bbb      	ldrb	r3, [r7, #14]
 800a57e:	2b02      	cmp	r3, #2
 800a580:	d103      	bne.n	800a58a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2209      	movs	r2, #9
 800a586:	761a      	strb	r2, [r3, #24]
      break;
 800a588:	e03c      	b.n	800a604 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a58a:	7bbb      	ldrb	r3, [r7, #14]
 800a58c:	2b04      	cmp	r3, #4
 800a58e:	d139      	bne.n	800a604 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	220b      	movs	r2, #11
 800a594:	761a      	strb	r2, [r3, #24]
      break;
 800a596:	e035      	b.n	800a604 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	7e5b      	ldrb	r3, [r3, #25]
 800a59c:	3301      	adds	r3, #1
 800a59e:	b2da      	uxtb	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	765a      	strb	r2, [r3, #25]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	7e5b      	ldrb	r3, [r3, #25]
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d806      	bhi.n	800a5ba <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a5b8:	e025      	b.n	800a606 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a5c0:	2106      	movs	r1, #6
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	795b      	ldrb	r3, [r3, #5]
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 f90c 	bl	800a7f0 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	791b      	ldrb	r3, [r3, #4]
 800a5dc:	4619      	mov	r1, r3
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f906 	bl	800a7f0 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a5ea:	2302      	movs	r3, #2
 800a5ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a5ee:	e00a      	b.n	800a606 <USBH_HandleControl+0x2de>

    default:
      break;
 800a5f0:	bf00      	nop
 800a5f2:	e008      	b.n	800a606 <USBH_HandleControl+0x2de>
      break;
 800a5f4:	bf00      	nop
 800a5f6:	e006      	b.n	800a606 <USBH_HandleControl+0x2de>
      break;
 800a5f8:	bf00      	nop
 800a5fa:	e004      	b.n	800a606 <USBH_HandleControl+0x2de>
      break;
 800a5fc:	bf00      	nop
 800a5fe:	e002      	b.n	800a606 <USBH_HandleControl+0x2de>
      break;
 800a600:	bf00      	nop
 800a602:	e000      	b.n	800a606 <USBH_HandleControl+0x2de>
      break;
 800a604:	bf00      	nop
  }

  return status;
 800a606:	7bfb      	ldrb	r3, [r7, #15]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3710      	adds	r7, #16
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b088      	sub	sp, #32
 800a614:	af04      	add	r7, sp, #16
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	4613      	mov	r3, r2
 800a61c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a61e:	79f9      	ldrb	r1, [r7, #7]
 800a620:	2300      	movs	r3, #0
 800a622:	9303      	str	r3, [sp, #12]
 800a624:	2308      	movs	r3, #8
 800a626:	9302      	str	r3, [sp, #8]
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	9301      	str	r3, [sp, #4]
 800a62c:	2300      	movs	r3, #0
 800a62e:	9300      	str	r3, [sp, #0]
 800a630:	2300      	movs	r3, #0
 800a632:	2200      	movs	r2, #0
 800a634:	68f8      	ldr	r0, [r7, #12]
 800a636:	f000 fb46 	bl	800acc6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b088      	sub	sp, #32
 800a648:	af04      	add	r7, sp, #16
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	4611      	mov	r1, r2
 800a650:	461a      	mov	r2, r3
 800a652:	460b      	mov	r3, r1
 800a654:	80fb      	strh	r3, [r7, #6]
 800a656:	4613      	mov	r3, r2
 800a658:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a660:	2b00      	cmp	r3, #0
 800a662:	d001      	beq.n	800a668 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a664:	2300      	movs	r3, #0
 800a666:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a668:	7979      	ldrb	r1, [r7, #5]
 800a66a:	7e3b      	ldrb	r3, [r7, #24]
 800a66c:	9303      	str	r3, [sp, #12]
 800a66e:	88fb      	ldrh	r3, [r7, #6]
 800a670:	9302      	str	r3, [sp, #8]
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	9301      	str	r3, [sp, #4]
 800a676:	2301      	movs	r3, #1
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	2300      	movs	r3, #0
 800a67c:	2200      	movs	r2, #0
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f000 fb21 	bl	800acc6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3710      	adds	r7, #16
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b088      	sub	sp, #32
 800a692:	af04      	add	r7, sp, #16
 800a694:	60f8      	str	r0, [r7, #12]
 800a696:	60b9      	str	r1, [r7, #8]
 800a698:	4611      	mov	r1, r2
 800a69a:	461a      	mov	r2, r3
 800a69c:	460b      	mov	r3, r1
 800a69e:	80fb      	strh	r3, [r7, #6]
 800a6a0:	4613      	mov	r3, r2
 800a6a2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a6a4:	7979      	ldrb	r1, [r7, #5]
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	9303      	str	r3, [sp, #12]
 800a6aa:	88fb      	ldrh	r3, [r7, #6]
 800a6ac:	9302      	str	r3, [sp, #8]
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	9301      	str	r3, [sp, #4]
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	9300      	str	r3, [sp, #0]
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f000 fb03 	bl	800acc6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a6c0:	2300      	movs	r3, #0

}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b088      	sub	sp, #32
 800a6ce:	af04      	add	r7, sp, #16
 800a6d0:	60f8      	str	r0, [r7, #12]
 800a6d2:	60b9      	str	r1, [r7, #8]
 800a6d4:	4611      	mov	r1, r2
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	460b      	mov	r3, r1
 800a6da:	80fb      	strh	r3, [r7, #6]
 800a6dc:	4613      	mov	r3, r2
 800a6de:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d001      	beq.n	800a6ee <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a6ee:	7979      	ldrb	r1, [r7, #5]
 800a6f0:	7e3b      	ldrb	r3, [r7, #24]
 800a6f2:	9303      	str	r3, [sp, #12]
 800a6f4:	88fb      	ldrh	r3, [r7, #6]
 800a6f6:	9302      	str	r3, [sp, #8]
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	9301      	str	r3, [sp, #4]
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	2302      	movs	r3, #2
 800a702:	2200      	movs	r2, #0
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f000 fade 	bl	800acc6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3710      	adds	r7, #16
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b088      	sub	sp, #32
 800a718:	af04      	add	r7, sp, #16
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	4611      	mov	r1, r2
 800a720:	461a      	mov	r2, r3
 800a722:	460b      	mov	r3, r1
 800a724:	80fb      	strh	r3, [r7, #6]
 800a726:	4613      	mov	r3, r2
 800a728:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a72a:	7979      	ldrb	r1, [r7, #5]
 800a72c:	2300      	movs	r3, #0
 800a72e:	9303      	str	r3, [sp, #12]
 800a730:	88fb      	ldrh	r3, [r7, #6]
 800a732:	9302      	str	r3, [sp, #8]
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	9301      	str	r3, [sp, #4]
 800a738:	2301      	movs	r3, #1
 800a73a:	9300      	str	r3, [sp, #0]
 800a73c:	2302      	movs	r3, #2
 800a73e:	2201      	movs	r2, #1
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	f000 fac0 	bl	800acc6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3710      	adds	r7, #16
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af04      	add	r7, sp, #16
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	4608      	mov	r0, r1
 800a75a:	4611      	mov	r1, r2
 800a75c:	461a      	mov	r2, r3
 800a75e:	4603      	mov	r3, r0
 800a760:	70fb      	strb	r3, [r7, #3]
 800a762:	460b      	mov	r3, r1
 800a764:	70bb      	strb	r3, [r7, #2]
 800a766:	4613      	mov	r3, r2
 800a768:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a76a:	7878      	ldrb	r0, [r7, #1]
 800a76c:	78ba      	ldrb	r2, [r7, #2]
 800a76e:	78f9      	ldrb	r1, [r7, #3]
 800a770:	8b3b      	ldrh	r3, [r7, #24]
 800a772:	9302      	str	r3, [sp, #8]
 800a774:	7d3b      	ldrb	r3, [r7, #20]
 800a776:	9301      	str	r3, [sp, #4]
 800a778:	7c3b      	ldrb	r3, [r7, #16]
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	4603      	mov	r3, r0
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f000 fa53 	bl	800ac2a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a784:	2300      	movs	r3, #0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3708      	adds	r7, #8
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b082      	sub	sp, #8
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	460b      	mov	r3, r1
 800a798:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a79a:	78fb      	ldrb	r3, [r7, #3]
 800a79c:	4619      	mov	r1, r3
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fa72 	bl	800ac88 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b084      	sub	sp, #16
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f836 	bl	800a82c <USBH_GetFreePipe>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a7c4:	89fb      	ldrh	r3, [r7, #14]
 800a7c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d00a      	beq.n	800a7e4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a7ce:	78fa      	ldrb	r2, [r7, #3]
 800a7d0:	89fb      	ldrh	r3, [r7, #14]
 800a7d2:	f003 030f 	and.w	r3, r3, #15
 800a7d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a7da:	6879      	ldr	r1, [r7, #4]
 800a7dc:	33e0      	adds	r3, #224	@ 0xe0
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	440b      	add	r3, r1
 800a7e2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a7e4:	89fb      	ldrh	r3, [r7, #14]
 800a7e6:	b2db      	uxtb	r3, r3
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3710      	adds	r7, #16
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a7fc:	78fb      	ldrb	r3, [r7, #3]
 800a7fe:	2b0f      	cmp	r3, #15
 800a800:	d80d      	bhi.n	800a81e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a802:	78fb      	ldrb	r3, [r7, #3]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	33e0      	adds	r3, #224	@ 0xe0
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	4413      	add	r3, r2
 800a80c:	685a      	ldr	r2, [r3, #4]
 800a80e:	78fb      	ldrb	r3, [r7, #3]
 800a810:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a814:	6879      	ldr	r1, [r7, #4]
 800a816:	33e0      	adds	r3, #224	@ 0xe0
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	440b      	add	r3, r1
 800a81c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a81e:	2300      	movs	r3, #0
}
 800a820:	4618      	mov	r0, r3
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a834:	2300      	movs	r3, #0
 800a836:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a838:	2300      	movs	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]
 800a83c:	e00f      	b.n	800a85e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a83e:	7bfb      	ldrb	r3, [r7, #15]
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	33e0      	adds	r3, #224	@ 0xe0
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	4413      	add	r3, r2
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d102      	bne.n	800a858 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a852:	7bfb      	ldrb	r3, [r7, #15]
 800a854:	b29b      	uxth	r3, r3
 800a856:	e007      	b.n	800a868 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a858:	7bfb      	ldrb	r3, [r7, #15]
 800a85a:	3301      	adds	r3, #1
 800a85c:	73fb      	strb	r3, [r7, #15]
 800a85e:	7bfb      	ldrb	r3, [r7, #15]
 800a860:	2b0f      	cmp	r3, #15
 800a862:	d9ec      	bls.n	800a83e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a864:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3714      	adds	r7, #20
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a878:	2201      	movs	r2, #1
 800a87a:	490e      	ldr	r1, [pc, #56]	@ (800a8b4 <MX_USB_HOST_Init+0x40>)
 800a87c:	480e      	ldr	r0, [pc, #56]	@ (800a8b8 <MX_USB_HOST_Init+0x44>)
 800a87e:	f7fe fb15 	bl	8008eac <USBH_Init>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d001      	beq.n	800a88c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a888:	f7f6 fc42 	bl	8001110 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a88c:	490b      	ldr	r1, [pc, #44]	@ (800a8bc <MX_USB_HOST_Init+0x48>)
 800a88e:	480a      	ldr	r0, [pc, #40]	@ (800a8b8 <MX_USB_HOST_Init+0x44>)
 800a890:	f7fe fbb9 	bl	8009006 <USBH_RegisterClass>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d001      	beq.n	800a89e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a89a:	f7f6 fc39 	bl	8001110 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a89e:	4806      	ldr	r0, [pc, #24]	@ (800a8b8 <MX_USB_HOST_Init+0x44>)
 800a8a0:	f7fe fc3d 	bl	800911e <USBH_Start>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d001      	beq.n	800a8ae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a8aa:	f7f6 fc31 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a8ae:	bf00      	nop
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	0800a8d5 	.word	0x0800a8d5
 800a8b8:	20000204 	.word	0x20000204
 800a8bc:	2000000c 	.word	0x2000000c

0800a8c0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a8c4:	4802      	ldr	r0, [pc, #8]	@ (800a8d0 <MX_USB_HOST_Process+0x10>)
 800a8c6:	f7fe fc3b 	bl	8009140 <USBH_Process>
}
 800a8ca:	bf00      	nop
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	20000204 	.word	0x20000204

0800a8d4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	460b      	mov	r3, r1
 800a8de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a8e0:	78fb      	ldrb	r3, [r7, #3]
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	2b04      	cmp	r3, #4
 800a8e6:	d819      	bhi.n	800a91c <USBH_UserProcess+0x48>
 800a8e8:	a201      	add	r2, pc, #4	@ (adr r2, 800a8f0 <USBH_UserProcess+0x1c>)
 800a8ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ee:	bf00      	nop
 800a8f0:	0800a91d 	.word	0x0800a91d
 800a8f4:	0800a90d 	.word	0x0800a90d
 800a8f8:	0800a91d 	.word	0x0800a91d
 800a8fc:	0800a915 	.word	0x0800a915
 800a900:	0800a905 	.word	0x0800a905
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a904:	4b09      	ldr	r3, [pc, #36]	@ (800a92c <USBH_UserProcess+0x58>)
 800a906:	2203      	movs	r2, #3
 800a908:	701a      	strb	r2, [r3, #0]
  break;
 800a90a:	e008      	b.n	800a91e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a90c:	4b07      	ldr	r3, [pc, #28]	@ (800a92c <USBH_UserProcess+0x58>)
 800a90e:	2202      	movs	r2, #2
 800a910:	701a      	strb	r2, [r3, #0]
  break;
 800a912:	e004      	b.n	800a91e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a914:	4b05      	ldr	r3, [pc, #20]	@ (800a92c <USBH_UserProcess+0x58>)
 800a916:	2201      	movs	r2, #1
 800a918:	701a      	strb	r2, [r3, #0]
  break;
 800a91a:	e000      	b.n	800a91e <USBH_UserProcess+0x4a>

  default:
  break;
 800a91c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a91e:	bf00      	nop
 800a920:	370c      	adds	r7, #12
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	200005dc 	.word	0x200005dc

0800a930 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b08a      	sub	sp, #40	@ 0x28
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a938:	f107 0314 	add.w	r3, r7, #20
 800a93c:	2200      	movs	r2, #0
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	605a      	str	r2, [r3, #4]
 800a942:	609a      	str	r2, [r3, #8]
 800a944:	60da      	str	r2, [r3, #12]
 800a946:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a950:	d147      	bne.n	800a9e2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a952:	2300      	movs	r3, #0
 800a954:	613b      	str	r3, [r7, #16]
 800a956:	4b25      	ldr	r3, [pc, #148]	@ (800a9ec <HAL_HCD_MspInit+0xbc>)
 800a958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a95a:	4a24      	ldr	r2, [pc, #144]	@ (800a9ec <HAL_HCD_MspInit+0xbc>)
 800a95c:	f043 0301 	orr.w	r3, r3, #1
 800a960:	6313      	str	r3, [r2, #48]	@ 0x30
 800a962:	4b22      	ldr	r3, [pc, #136]	@ (800a9ec <HAL_HCD_MspInit+0xbc>)
 800a964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a966:	f003 0301 	and.w	r3, r3, #1
 800a96a:	613b      	str	r3, [r7, #16]
 800a96c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a96e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a974:	2300      	movs	r3, #0
 800a976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a978:	2300      	movs	r3, #0
 800a97a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a97c:	f107 0314 	add.w	r3, r7, #20
 800a980:	4619      	mov	r1, r3
 800a982:	481b      	ldr	r0, [pc, #108]	@ (800a9f0 <HAL_HCD_MspInit+0xc0>)
 800a984:	f7f7 fd8a 	bl	800249c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a988:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a98c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a98e:	2302      	movs	r3, #2
 800a990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a992:	2300      	movs	r3, #0
 800a994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a996:	2300      	movs	r3, #0
 800a998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a99a:	230a      	movs	r3, #10
 800a99c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a99e:	f107 0314 	add.w	r3, r7, #20
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	4812      	ldr	r0, [pc, #72]	@ (800a9f0 <HAL_HCD_MspInit+0xc0>)
 800a9a6:	f7f7 fd79 	bl	800249c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a9aa:	4b10      	ldr	r3, [pc, #64]	@ (800a9ec <HAL_HCD_MspInit+0xbc>)
 800a9ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ae:	4a0f      	ldr	r2, [pc, #60]	@ (800a9ec <HAL_HCD_MspInit+0xbc>)
 800a9b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9b4:	6353      	str	r3, [r2, #52]	@ 0x34
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	60fb      	str	r3, [r7, #12]
 800a9ba:	4b0c      	ldr	r3, [pc, #48]	@ (800a9ec <HAL_HCD_MspInit+0xbc>)
 800a9bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9be:	4a0b      	ldr	r2, [pc, #44]	@ (800a9ec <HAL_HCD_MspInit+0xbc>)
 800a9c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a9c4:	6453      	str	r3, [r2, #68]	@ 0x44
 800a9c6:	4b09      	ldr	r3, [pc, #36]	@ (800a9ec <HAL_HCD_MspInit+0xbc>)
 800a9c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9ce:	60fb      	str	r3, [r7, #12]
 800a9d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	2043      	movs	r0, #67	@ 0x43
 800a9d8:	f7f7 fd1d 	bl	8002416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a9dc:	2043      	movs	r0, #67	@ 0x43
 800a9de:	f7f7 fd36 	bl	800244e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a9e2:	bf00      	nop
 800a9e4:	3728      	adds	r7, #40	@ 0x28
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}
 800a9ea:	bf00      	nop
 800a9ec:	40023800 	.word	0x40023800
 800a9f0:	40020000 	.word	0x40020000

0800a9f4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7fe ff73 	bl	80098ee <USBH_LL_IncTimer>
}
 800aa08:	bf00      	nop
 800aa0a:	3708      	adds	r7, #8
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7fe ffab 	bl	800997a <USBH_LL_Connect>
}
 800aa24:	bf00      	nop
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fe ffb4 	bl	80099a8 <USBH_LL_Disconnect>
}
 800aa40:	bf00      	nop
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	460b      	mov	r3, r1
 800aa52:	70fb      	strb	r3, [r7, #3]
 800aa54:	4613      	mov	r3, r2
 800aa56:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fe ff65 	bl	8009942 <USBH_LL_PortEnabled>
}
 800aa78:	bf00      	nop
 800aa7a:	3708      	adds	r7, #8
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f7fe ff65 	bl	800995e <USBH_LL_PortDisabled>
}
 800aa94:	bf00      	nop
 800aa96:	3708      	adds	r7, #8
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d12a      	bne.n	800ab04 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800aaae:	4a18      	ldr	r2, [pc, #96]	@ (800ab10 <USBH_LL_Init+0x74>)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	4a15      	ldr	r2, [pc, #84]	@ (800ab10 <USBH_LL_Init+0x74>)
 800aaba:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aabe:	4b14      	ldr	r3, [pc, #80]	@ (800ab10 <USBH_LL_Init+0x74>)
 800aac0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800aac4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800aac6:	4b12      	ldr	r3, [pc, #72]	@ (800ab10 <USBH_LL_Init+0x74>)
 800aac8:	2208      	movs	r2, #8
 800aaca:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800aacc:	4b10      	ldr	r3, [pc, #64]	@ (800ab10 <USBH_LL_Init+0x74>)
 800aace:	2201      	movs	r2, #1
 800aad0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aad2:	4b0f      	ldr	r3, [pc, #60]	@ (800ab10 <USBH_LL_Init+0x74>)
 800aad4:	2200      	movs	r2, #0
 800aad6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800aad8:	4b0d      	ldr	r3, [pc, #52]	@ (800ab10 <USBH_LL_Init+0x74>)
 800aada:	2202      	movs	r2, #2
 800aadc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aade:	4b0c      	ldr	r3, [pc, #48]	@ (800ab10 <USBH_LL_Init+0x74>)
 800aae0:	2200      	movs	r2, #0
 800aae2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800aae4:	480a      	ldr	r0, [pc, #40]	@ (800ab10 <USBH_LL_Init+0x74>)
 800aae6:	f7f7 feb2 	bl	800284e <HAL_HCD_Init>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d001      	beq.n	800aaf4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800aaf0:	f7f6 fb0e 	bl	8001110 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800aaf4:	4806      	ldr	r0, [pc, #24]	@ (800ab10 <USBH_LL_Init+0x74>)
 800aaf6:	f7f8 fb13 	bl	8003120 <HAL_HCD_GetCurrentFrame>
 800aafa:	4603      	mov	r3, r0
 800aafc:	4619      	mov	r1, r3
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f7fe fee6 	bl	80098d0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ab04:	2300      	movs	r3, #0
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3708      	adds	r7, #8
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	200005e0 	.word	0x200005e0

0800ab14 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab20:	2300      	movs	r3, #0
 800ab22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7f8 fa80 	bl	8003030 <HAL_HCD_Start>
 800ab30:	4603      	mov	r3, r0
 800ab32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab34:	7bfb      	ldrb	r3, [r7, #15]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 f95e 	bl	800adf8 <USBH_Get_USB_Status>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b084      	sub	sp, #16
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ab56:	2300      	movs	r3, #0
 800ab58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7f8 fa88 	bl	8003076 <HAL_HCD_Stop>
 800ab66:	4603      	mov	r3, r0
 800ab68:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ab6a:	7bfb      	ldrb	r3, [r7, #15]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f000 f943 	bl	800adf8 <USBH_Get_USB_Status>
 800ab72:	4603      	mov	r3, r0
 800ab74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab76:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3710      	adds	r7, #16
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ab92:	4618      	mov	r0, r3
 800ab94:	f7f8 fad2 	bl	800313c <HAL_HCD_GetCurrentSpeed>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d00c      	beq.n	800abb8 <USBH_LL_GetSpeed+0x38>
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d80d      	bhi.n	800abbe <USBH_LL_GetSpeed+0x3e>
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d002      	beq.n	800abac <USBH_LL_GetSpeed+0x2c>
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d003      	beq.n	800abb2 <USBH_LL_GetSpeed+0x32>
 800abaa:	e008      	b.n	800abbe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800abac:	2300      	movs	r3, #0
 800abae:	73fb      	strb	r3, [r7, #15]
    break;
 800abb0:	e008      	b.n	800abc4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800abb2:	2301      	movs	r3, #1
 800abb4:	73fb      	strb	r3, [r7, #15]
    break;
 800abb6:	e005      	b.n	800abc4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800abb8:	2302      	movs	r3, #2
 800abba:	73fb      	strb	r3, [r7, #15]
    break;
 800abbc:	e002      	b.n	800abc4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800abbe:	2301      	movs	r3, #1
 800abc0:	73fb      	strb	r3, [r7, #15]
    break;
 800abc2:	bf00      	nop
  }
  return  speed;
 800abc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b084      	sub	sp, #16
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7f8 fa63 	bl	80030b0 <HAL_HCD_ResetPort>
 800abea:	4603      	mov	r3, r0
 800abec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800abee:	7bfb      	ldrb	r3, [r7, #15]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 f901 	bl	800adf8 <USBH_Get_USB_Status>
 800abf6:	4603      	mov	r3, r0
 800abf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abfa:	7bbb      	ldrb	r3, [r7, #14]
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3710      	adds	r7, #16
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ac16:	78fa      	ldrb	r2, [r7, #3]
 800ac18:	4611      	mov	r1, r2
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7f8 fa6b 	bl	80030f6 <HAL_HCD_HC_GetXferCount>
 800ac20:	4603      	mov	r3, r0
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	3708      	adds	r7, #8
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}

0800ac2a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ac2a:	b590      	push	{r4, r7, lr}
 800ac2c:	b089      	sub	sp, #36	@ 0x24
 800ac2e:	af04      	add	r7, sp, #16
 800ac30:	6078      	str	r0, [r7, #4]
 800ac32:	4608      	mov	r0, r1
 800ac34:	4611      	mov	r1, r2
 800ac36:	461a      	mov	r2, r3
 800ac38:	4603      	mov	r3, r0
 800ac3a:	70fb      	strb	r3, [r7, #3]
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	70bb      	strb	r3, [r7, #2]
 800ac40:	4613      	mov	r3, r2
 800ac42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac44:	2300      	movs	r3, #0
 800ac46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ac52:	787c      	ldrb	r4, [r7, #1]
 800ac54:	78ba      	ldrb	r2, [r7, #2]
 800ac56:	78f9      	ldrb	r1, [r7, #3]
 800ac58:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ac5a:	9302      	str	r3, [sp, #8]
 800ac5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ac60:	9301      	str	r3, [sp, #4]
 800ac62:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ac66:	9300      	str	r3, [sp, #0]
 800ac68:	4623      	mov	r3, r4
 800ac6a:	f7f7 fe57 	bl	800291c <HAL_HCD_HC_Init>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f000 f8bf 	bl	800adf8 <USBH_Get_USB_Status>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3714      	adds	r7, #20
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd90      	pop	{r4, r7, pc}

0800ac88 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	460b      	mov	r3, r1
 800ac92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac94:	2300      	movs	r3, #0
 800ac96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800aca2:	78fa      	ldrb	r2, [r7, #3]
 800aca4:	4611      	mov	r1, r2
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7f7 fef0 	bl	8002a8c <HAL_HCD_HC_Halt>
 800acac:	4603      	mov	r3, r0
 800acae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800acb0:	7bfb      	ldrb	r3, [r7, #15]
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 f8a0 	bl	800adf8 <USBH_Get_USB_Status>
 800acb8:	4603      	mov	r3, r0
 800acba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800acc6:	b590      	push	{r4, r7, lr}
 800acc8:	b089      	sub	sp, #36	@ 0x24
 800acca:	af04      	add	r7, sp, #16
 800accc:	6078      	str	r0, [r7, #4]
 800acce:	4608      	mov	r0, r1
 800acd0:	4611      	mov	r1, r2
 800acd2:	461a      	mov	r2, r3
 800acd4:	4603      	mov	r3, r0
 800acd6:	70fb      	strb	r3, [r7, #3]
 800acd8:	460b      	mov	r3, r1
 800acda:	70bb      	strb	r3, [r7, #2]
 800acdc:	4613      	mov	r3, r2
 800acde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ace0:	2300      	movs	r3, #0
 800ace2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ace4:	2300      	movs	r3, #0
 800ace6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800acee:	787c      	ldrb	r4, [r7, #1]
 800acf0:	78ba      	ldrb	r2, [r7, #2]
 800acf2:	78f9      	ldrb	r1, [r7, #3]
 800acf4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800acf8:	9303      	str	r3, [sp, #12]
 800acfa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800acfc:	9302      	str	r3, [sp, #8]
 800acfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad00:	9301      	str	r3, [sp, #4]
 800ad02:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad06:	9300      	str	r3, [sp, #0]
 800ad08:	4623      	mov	r3, r4
 800ad0a:	f7f7 fee3 	bl	8002ad4 <HAL_HCD_HC_SubmitRequest>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ad12:	7bfb      	ldrb	r3, [r7, #15]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 f86f 	bl	800adf8 <USBH_Get_USB_Status>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3714      	adds	r7, #20
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd90      	pop	{r4, r7, pc}

0800ad28 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ad3a:	78fa      	ldrb	r2, [r7, #3]
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7f8 f9c4 	bl	80030cc <HAL_HCD_HC_GetURBState>
 800ad44:	4603      	mov	r3, r0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3708      	adds	r7, #8
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b082      	sub	sp, #8
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	460b      	mov	r3, r1
 800ad58:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d103      	bne.n	800ad6c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ad64:	78fb      	ldrb	r3, [r7, #3]
 800ad66:	4618      	mov	r0, r3
 800ad68:	f000 f872 	bl	800ae50 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ad6c:	20c8      	movs	r0, #200	@ 0xc8
 800ad6e:	f7f6 fce3 	bl	8001738 <HAL_Delay>
  return USBH_OK;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3708      	adds	r7, #8
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b085      	sub	sp, #20
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	460b      	mov	r3, r1
 800ad86:	70fb      	strb	r3, [r7, #3]
 800ad88:	4613      	mov	r3, r2
 800ad8a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ad92:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ad94:	78fa      	ldrb	r2, [r7, #3]
 800ad96:	68f9      	ldr	r1, [r7, #12]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	011b      	lsls	r3, r3, #4
 800ad9c:	1a9b      	subs	r3, r3, r2
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	440b      	add	r3, r1
 800ada2:	3317      	adds	r3, #23
 800ada4:	781b      	ldrb	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d00a      	beq.n	800adc0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800adaa:	78fa      	ldrb	r2, [r7, #3]
 800adac:	68f9      	ldr	r1, [r7, #12]
 800adae:	4613      	mov	r3, r2
 800adb0:	011b      	lsls	r3, r3, #4
 800adb2:	1a9b      	subs	r3, r3, r2
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	440b      	add	r3, r1
 800adb8:	333c      	adds	r3, #60	@ 0x3c
 800adba:	78ba      	ldrb	r2, [r7, #2]
 800adbc:	701a      	strb	r2, [r3, #0]
 800adbe:	e009      	b.n	800add4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800adc0:	78fa      	ldrb	r2, [r7, #3]
 800adc2:	68f9      	ldr	r1, [r7, #12]
 800adc4:	4613      	mov	r3, r2
 800adc6:	011b      	lsls	r3, r3, #4
 800adc8:	1a9b      	subs	r3, r3, r2
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	440b      	add	r3, r1
 800adce:	333d      	adds	r3, #61	@ 0x3d
 800add0:	78ba      	ldrb	r2, [r7, #2]
 800add2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3714      	adds	r7, #20
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr

0800ade2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b082      	sub	sp, #8
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7f6 fca4 	bl	8001738 <HAL_Delay>
}
 800adf0:	bf00      	nop
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	4603      	mov	r3, r0
 800ae00:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae02:	2300      	movs	r3, #0
 800ae04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae06:	79fb      	ldrb	r3, [r7, #7]
 800ae08:	2b03      	cmp	r3, #3
 800ae0a:	d817      	bhi.n	800ae3c <USBH_Get_USB_Status+0x44>
 800ae0c:	a201      	add	r2, pc, #4	@ (adr r2, 800ae14 <USBH_Get_USB_Status+0x1c>)
 800ae0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae12:	bf00      	nop
 800ae14:	0800ae25 	.word	0x0800ae25
 800ae18:	0800ae2b 	.word	0x0800ae2b
 800ae1c:	0800ae31 	.word	0x0800ae31
 800ae20:	0800ae37 	.word	0x0800ae37
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ae24:	2300      	movs	r3, #0
 800ae26:	73fb      	strb	r3, [r7, #15]
    break;
 800ae28:	e00b      	b.n	800ae42 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ae2a:	2302      	movs	r3, #2
 800ae2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae2e:	e008      	b.n	800ae42 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ae30:	2301      	movs	r3, #1
 800ae32:	73fb      	strb	r3, [r7, #15]
    break;
 800ae34:	e005      	b.n	800ae42 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ae36:	2302      	movs	r3, #2
 800ae38:	73fb      	strb	r3, [r7, #15]
    break;
 800ae3a:	e002      	b.n	800ae42 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ae3c:	2302      	movs	r3, #2
 800ae3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae40:	bf00      	nop
  }
  return usb_status;
 800ae42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3714      	adds	r7, #20
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	4603      	mov	r3, r0
 800ae58:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ae5a:	79fb      	ldrb	r3, [r7, #7]
 800ae5c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800ae5e:	79fb      	ldrb	r3, [r7, #7]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d102      	bne.n	800ae6a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800ae64:	2300      	movs	r3, #0
 800ae66:	73fb      	strb	r3, [r7, #15]
 800ae68:	e001      	b.n	800ae6e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800ae6e:	7bfb      	ldrb	r3, [r7, #15]
 800ae70:	461a      	mov	r2, r3
 800ae72:	2101      	movs	r1, #1
 800ae74:	4803      	ldr	r0, [pc, #12]	@ (800ae84 <MX_DriverVbusFS+0x34>)
 800ae76:	f7f7 fcad 	bl	80027d4 <HAL_GPIO_WritePin>
}
 800ae7a:	bf00      	nop
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	40020800 	.word	0x40020800

0800ae88 <malloc>:
 800ae88:	4b02      	ldr	r3, [pc, #8]	@ (800ae94 <malloc+0xc>)
 800ae8a:	4601      	mov	r1, r0
 800ae8c:	6818      	ldr	r0, [r3, #0]
 800ae8e:	f000 b82d 	b.w	800aeec <_malloc_r>
 800ae92:	bf00      	nop
 800ae94:	2000002c 	.word	0x2000002c

0800ae98 <free>:
 800ae98:	4b02      	ldr	r3, [pc, #8]	@ (800aea4 <free+0xc>)
 800ae9a:	4601      	mov	r1, r0
 800ae9c:	6818      	ldr	r0, [r3, #0]
 800ae9e:	f000 b915 	b.w	800b0cc <_free_r>
 800aea2:	bf00      	nop
 800aea4:	2000002c 	.word	0x2000002c

0800aea8 <sbrk_aligned>:
 800aea8:	b570      	push	{r4, r5, r6, lr}
 800aeaa:	4e0f      	ldr	r6, [pc, #60]	@ (800aee8 <sbrk_aligned+0x40>)
 800aeac:	460c      	mov	r4, r1
 800aeae:	6831      	ldr	r1, [r6, #0]
 800aeb0:	4605      	mov	r5, r0
 800aeb2:	b911      	cbnz	r1, 800aeba <sbrk_aligned+0x12>
 800aeb4:	f000 f8ce 	bl	800b054 <_sbrk_r>
 800aeb8:	6030      	str	r0, [r6, #0]
 800aeba:	4621      	mov	r1, r4
 800aebc:	4628      	mov	r0, r5
 800aebe:	f000 f8c9 	bl	800b054 <_sbrk_r>
 800aec2:	1c43      	adds	r3, r0, #1
 800aec4:	d103      	bne.n	800aece <sbrk_aligned+0x26>
 800aec6:	f04f 34ff 	mov.w	r4, #4294967295
 800aeca:	4620      	mov	r0, r4
 800aecc:	bd70      	pop	{r4, r5, r6, pc}
 800aece:	1cc4      	adds	r4, r0, #3
 800aed0:	f024 0403 	bic.w	r4, r4, #3
 800aed4:	42a0      	cmp	r0, r4
 800aed6:	d0f8      	beq.n	800aeca <sbrk_aligned+0x22>
 800aed8:	1a21      	subs	r1, r4, r0
 800aeda:	4628      	mov	r0, r5
 800aedc:	f000 f8ba 	bl	800b054 <_sbrk_r>
 800aee0:	3001      	adds	r0, #1
 800aee2:	d1f2      	bne.n	800aeca <sbrk_aligned+0x22>
 800aee4:	e7ef      	b.n	800aec6 <sbrk_aligned+0x1e>
 800aee6:	bf00      	nop
 800aee8:	200009c0 	.word	0x200009c0

0800aeec <_malloc_r>:
 800aeec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aef0:	1ccd      	adds	r5, r1, #3
 800aef2:	f025 0503 	bic.w	r5, r5, #3
 800aef6:	3508      	adds	r5, #8
 800aef8:	2d0c      	cmp	r5, #12
 800aefa:	bf38      	it	cc
 800aefc:	250c      	movcc	r5, #12
 800aefe:	2d00      	cmp	r5, #0
 800af00:	4606      	mov	r6, r0
 800af02:	db01      	blt.n	800af08 <_malloc_r+0x1c>
 800af04:	42a9      	cmp	r1, r5
 800af06:	d904      	bls.n	800af12 <_malloc_r+0x26>
 800af08:	230c      	movs	r3, #12
 800af0a:	6033      	str	r3, [r6, #0]
 800af0c:	2000      	movs	r0, #0
 800af0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800afe8 <_malloc_r+0xfc>
 800af16:	f000 f869 	bl	800afec <__malloc_lock>
 800af1a:	f8d8 3000 	ldr.w	r3, [r8]
 800af1e:	461c      	mov	r4, r3
 800af20:	bb44      	cbnz	r4, 800af74 <_malloc_r+0x88>
 800af22:	4629      	mov	r1, r5
 800af24:	4630      	mov	r0, r6
 800af26:	f7ff ffbf 	bl	800aea8 <sbrk_aligned>
 800af2a:	1c43      	adds	r3, r0, #1
 800af2c:	4604      	mov	r4, r0
 800af2e:	d158      	bne.n	800afe2 <_malloc_r+0xf6>
 800af30:	f8d8 4000 	ldr.w	r4, [r8]
 800af34:	4627      	mov	r7, r4
 800af36:	2f00      	cmp	r7, #0
 800af38:	d143      	bne.n	800afc2 <_malloc_r+0xd6>
 800af3a:	2c00      	cmp	r4, #0
 800af3c:	d04b      	beq.n	800afd6 <_malloc_r+0xea>
 800af3e:	6823      	ldr	r3, [r4, #0]
 800af40:	4639      	mov	r1, r7
 800af42:	4630      	mov	r0, r6
 800af44:	eb04 0903 	add.w	r9, r4, r3
 800af48:	f000 f884 	bl	800b054 <_sbrk_r>
 800af4c:	4581      	cmp	r9, r0
 800af4e:	d142      	bne.n	800afd6 <_malloc_r+0xea>
 800af50:	6821      	ldr	r1, [r4, #0]
 800af52:	1a6d      	subs	r5, r5, r1
 800af54:	4629      	mov	r1, r5
 800af56:	4630      	mov	r0, r6
 800af58:	f7ff ffa6 	bl	800aea8 <sbrk_aligned>
 800af5c:	3001      	adds	r0, #1
 800af5e:	d03a      	beq.n	800afd6 <_malloc_r+0xea>
 800af60:	6823      	ldr	r3, [r4, #0]
 800af62:	442b      	add	r3, r5
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	f8d8 3000 	ldr.w	r3, [r8]
 800af6a:	685a      	ldr	r2, [r3, #4]
 800af6c:	bb62      	cbnz	r2, 800afc8 <_malloc_r+0xdc>
 800af6e:	f8c8 7000 	str.w	r7, [r8]
 800af72:	e00f      	b.n	800af94 <_malloc_r+0xa8>
 800af74:	6822      	ldr	r2, [r4, #0]
 800af76:	1b52      	subs	r2, r2, r5
 800af78:	d420      	bmi.n	800afbc <_malloc_r+0xd0>
 800af7a:	2a0b      	cmp	r2, #11
 800af7c:	d917      	bls.n	800afae <_malloc_r+0xc2>
 800af7e:	1961      	adds	r1, r4, r5
 800af80:	42a3      	cmp	r3, r4
 800af82:	6025      	str	r5, [r4, #0]
 800af84:	bf18      	it	ne
 800af86:	6059      	strne	r1, [r3, #4]
 800af88:	6863      	ldr	r3, [r4, #4]
 800af8a:	bf08      	it	eq
 800af8c:	f8c8 1000 	streq.w	r1, [r8]
 800af90:	5162      	str	r2, [r4, r5]
 800af92:	604b      	str	r3, [r1, #4]
 800af94:	4630      	mov	r0, r6
 800af96:	f000 f82f 	bl	800aff8 <__malloc_unlock>
 800af9a:	f104 000b 	add.w	r0, r4, #11
 800af9e:	1d23      	adds	r3, r4, #4
 800afa0:	f020 0007 	bic.w	r0, r0, #7
 800afa4:	1ac2      	subs	r2, r0, r3
 800afa6:	bf1c      	itt	ne
 800afa8:	1a1b      	subne	r3, r3, r0
 800afaa:	50a3      	strne	r3, [r4, r2]
 800afac:	e7af      	b.n	800af0e <_malloc_r+0x22>
 800afae:	6862      	ldr	r2, [r4, #4]
 800afb0:	42a3      	cmp	r3, r4
 800afb2:	bf0c      	ite	eq
 800afb4:	f8c8 2000 	streq.w	r2, [r8]
 800afb8:	605a      	strne	r2, [r3, #4]
 800afba:	e7eb      	b.n	800af94 <_malloc_r+0xa8>
 800afbc:	4623      	mov	r3, r4
 800afbe:	6864      	ldr	r4, [r4, #4]
 800afc0:	e7ae      	b.n	800af20 <_malloc_r+0x34>
 800afc2:	463c      	mov	r4, r7
 800afc4:	687f      	ldr	r7, [r7, #4]
 800afc6:	e7b6      	b.n	800af36 <_malloc_r+0x4a>
 800afc8:	461a      	mov	r2, r3
 800afca:	685b      	ldr	r3, [r3, #4]
 800afcc:	42a3      	cmp	r3, r4
 800afce:	d1fb      	bne.n	800afc8 <_malloc_r+0xdc>
 800afd0:	2300      	movs	r3, #0
 800afd2:	6053      	str	r3, [r2, #4]
 800afd4:	e7de      	b.n	800af94 <_malloc_r+0xa8>
 800afd6:	230c      	movs	r3, #12
 800afd8:	6033      	str	r3, [r6, #0]
 800afda:	4630      	mov	r0, r6
 800afdc:	f000 f80c 	bl	800aff8 <__malloc_unlock>
 800afe0:	e794      	b.n	800af0c <_malloc_r+0x20>
 800afe2:	6005      	str	r5, [r0, #0]
 800afe4:	e7d6      	b.n	800af94 <_malloc_r+0xa8>
 800afe6:	bf00      	nop
 800afe8:	200009c4 	.word	0x200009c4

0800afec <__malloc_lock>:
 800afec:	4801      	ldr	r0, [pc, #4]	@ (800aff4 <__malloc_lock+0x8>)
 800afee:	f000 b86b 	b.w	800b0c8 <__retarget_lock_acquire_recursive>
 800aff2:	bf00      	nop
 800aff4:	20000b04 	.word	0x20000b04

0800aff8 <__malloc_unlock>:
 800aff8:	4801      	ldr	r0, [pc, #4]	@ (800b000 <__malloc_unlock+0x8>)
 800affa:	f000 b866 	b.w	800b0ca <__retarget_lock_release_recursive>
 800affe:	bf00      	nop
 800b000:	20000b04 	.word	0x20000b04

0800b004 <siprintf>:
 800b004:	b40e      	push	{r1, r2, r3}
 800b006:	b500      	push	{lr}
 800b008:	b09c      	sub	sp, #112	@ 0x70
 800b00a:	ab1d      	add	r3, sp, #116	@ 0x74
 800b00c:	9002      	str	r0, [sp, #8]
 800b00e:	9006      	str	r0, [sp, #24]
 800b010:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b014:	4809      	ldr	r0, [pc, #36]	@ (800b03c <siprintf+0x38>)
 800b016:	9107      	str	r1, [sp, #28]
 800b018:	9104      	str	r1, [sp, #16]
 800b01a:	4909      	ldr	r1, [pc, #36]	@ (800b040 <siprintf+0x3c>)
 800b01c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b020:	9105      	str	r1, [sp, #20]
 800b022:	6800      	ldr	r0, [r0, #0]
 800b024:	9301      	str	r3, [sp, #4]
 800b026:	a902      	add	r1, sp, #8
 800b028:	f000 f8f6 	bl	800b218 <_svfiprintf_r>
 800b02c:	9b02      	ldr	r3, [sp, #8]
 800b02e:	2200      	movs	r2, #0
 800b030:	701a      	strb	r2, [r3, #0]
 800b032:	b01c      	add	sp, #112	@ 0x70
 800b034:	f85d eb04 	ldr.w	lr, [sp], #4
 800b038:	b003      	add	sp, #12
 800b03a:	4770      	bx	lr
 800b03c:	2000002c 	.word	0x2000002c
 800b040:	ffff0208 	.word	0xffff0208

0800b044 <memset>:
 800b044:	4402      	add	r2, r0
 800b046:	4603      	mov	r3, r0
 800b048:	4293      	cmp	r3, r2
 800b04a:	d100      	bne.n	800b04e <memset+0xa>
 800b04c:	4770      	bx	lr
 800b04e:	f803 1b01 	strb.w	r1, [r3], #1
 800b052:	e7f9      	b.n	800b048 <memset+0x4>

0800b054 <_sbrk_r>:
 800b054:	b538      	push	{r3, r4, r5, lr}
 800b056:	4d06      	ldr	r5, [pc, #24]	@ (800b070 <_sbrk_r+0x1c>)
 800b058:	2300      	movs	r3, #0
 800b05a:	4604      	mov	r4, r0
 800b05c:	4608      	mov	r0, r1
 800b05e:	602b      	str	r3, [r5, #0]
 800b060:	f7f6 fa86 	bl	8001570 <_sbrk>
 800b064:	1c43      	adds	r3, r0, #1
 800b066:	d102      	bne.n	800b06e <_sbrk_r+0x1a>
 800b068:	682b      	ldr	r3, [r5, #0]
 800b06a:	b103      	cbz	r3, 800b06e <_sbrk_r+0x1a>
 800b06c:	6023      	str	r3, [r4, #0]
 800b06e:	bd38      	pop	{r3, r4, r5, pc}
 800b070:	20000b00 	.word	0x20000b00

0800b074 <__errno>:
 800b074:	4b01      	ldr	r3, [pc, #4]	@ (800b07c <__errno+0x8>)
 800b076:	6818      	ldr	r0, [r3, #0]
 800b078:	4770      	bx	lr
 800b07a:	bf00      	nop
 800b07c:	2000002c 	.word	0x2000002c

0800b080 <__libc_init_array>:
 800b080:	b570      	push	{r4, r5, r6, lr}
 800b082:	4d0d      	ldr	r5, [pc, #52]	@ (800b0b8 <__libc_init_array+0x38>)
 800b084:	4c0d      	ldr	r4, [pc, #52]	@ (800b0bc <__libc_init_array+0x3c>)
 800b086:	1b64      	subs	r4, r4, r5
 800b088:	10a4      	asrs	r4, r4, #2
 800b08a:	2600      	movs	r6, #0
 800b08c:	42a6      	cmp	r6, r4
 800b08e:	d109      	bne.n	800b0a4 <__libc_init_array+0x24>
 800b090:	4d0b      	ldr	r5, [pc, #44]	@ (800b0c0 <__libc_init_array+0x40>)
 800b092:	4c0c      	ldr	r4, [pc, #48]	@ (800b0c4 <__libc_init_array+0x44>)
 800b094:	f000 fba8 	bl	800b7e8 <_init>
 800b098:	1b64      	subs	r4, r4, r5
 800b09a:	10a4      	asrs	r4, r4, #2
 800b09c:	2600      	movs	r6, #0
 800b09e:	42a6      	cmp	r6, r4
 800b0a0:	d105      	bne.n	800b0ae <__libc_init_array+0x2e>
 800b0a2:	bd70      	pop	{r4, r5, r6, pc}
 800b0a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0a8:	4798      	blx	r3
 800b0aa:	3601      	adds	r6, #1
 800b0ac:	e7ee      	b.n	800b08c <__libc_init_array+0xc>
 800b0ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b0b2:	4798      	blx	r3
 800b0b4:	3601      	adds	r6, #1
 800b0b6:	e7f2      	b.n	800b09e <__libc_init_array+0x1e>
 800b0b8:	0800b930 	.word	0x0800b930
 800b0bc:	0800b930 	.word	0x0800b930
 800b0c0:	0800b930 	.word	0x0800b930
 800b0c4:	0800b934 	.word	0x0800b934

0800b0c8 <__retarget_lock_acquire_recursive>:
 800b0c8:	4770      	bx	lr

0800b0ca <__retarget_lock_release_recursive>:
 800b0ca:	4770      	bx	lr

0800b0cc <_free_r>:
 800b0cc:	b538      	push	{r3, r4, r5, lr}
 800b0ce:	4605      	mov	r5, r0
 800b0d0:	2900      	cmp	r1, #0
 800b0d2:	d041      	beq.n	800b158 <_free_r+0x8c>
 800b0d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0d8:	1f0c      	subs	r4, r1, #4
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	bfb8      	it	lt
 800b0de:	18e4      	addlt	r4, r4, r3
 800b0e0:	f7ff ff84 	bl	800afec <__malloc_lock>
 800b0e4:	4a1d      	ldr	r2, [pc, #116]	@ (800b15c <_free_r+0x90>)
 800b0e6:	6813      	ldr	r3, [r2, #0]
 800b0e8:	b933      	cbnz	r3, 800b0f8 <_free_r+0x2c>
 800b0ea:	6063      	str	r3, [r4, #4]
 800b0ec:	6014      	str	r4, [r2, #0]
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0f4:	f7ff bf80 	b.w	800aff8 <__malloc_unlock>
 800b0f8:	42a3      	cmp	r3, r4
 800b0fa:	d908      	bls.n	800b10e <_free_r+0x42>
 800b0fc:	6820      	ldr	r0, [r4, #0]
 800b0fe:	1821      	adds	r1, r4, r0
 800b100:	428b      	cmp	r3, r1
 800b102:	bf01      	itttt	eq
 800b104:	6819      	ldreq	r1, [r3, #0]
 800b106:	685b      	ldreq	r3, [r3, #4]
 800b108:	1809      	addeq	r1, r1, r0
 800b10a:	6021      	streq	r1, [r4, #0]
 800b10c:	e7ed      	b.n	800b0ea <_free_r+0x1e>
 800b10e:	461a      	mov	r2, r3
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	b10b      	cbz	r3, 800b118 <_free_r+0x4c>
 800b114:	42a3      	cmp	r3, r4
 800b116:	d9fa      	bls.n	800b10e <_free_r+0x42>
 800b118:	6811      	ldr	r1, [r2, #0]
 800b11a:	1850      	adds	r0, r2, r1
 800b11c:	42a0      	cmp	r0, r4
 800b11e:	d10b      	bne.n	800b138 <_free_r+0x6c>
 800b120:	6820      	ldr	r0, [r4, #0]
 800b122:	4401      	add	r1, r0
 800b124:	1850      	adds	r0, r2, r1
 800b126:	4283      	cmp	r3, r0
 800b128:	6011      	str	r1, [r2, #0]
 800b12a:	d1e0      	bne.n	800b0ee <_free_r+0x22>
 800b12c:	6818      	ldr	r0, [r3, #0]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	6053      	str	r3, [r2, #4]
 800b132:	4408      	add	r0, r1
 800b134:	6010      	str	r0, [r2, #0]
 800b136:	e7da      	b.n	800b0ee <_free_r+0x22>
 800b138:	d902      	bls.n	800b140 <_free_r+0x74>
 800b13a:	230c      	movs	r3, #12
 800b13c:	602b      	str	r3, [r5, #0]
 800b13e:	e7d6      	b.n	800b0ee <_free_r+0x22>
 800b140:	6820      	ldr	r0, [r4, #0]
 800b142:	1821      	adds	r1, r4, r0
 800b144:	428b      	cmp	r3, r1
 800b146:	bf04      	itt	eq
 800b148:	6819      	ldreq	r1, [r3, #0]
 800b14a:	685b      	ldreq	r3, [r3, #4]
 800b14c:	6063      	str	r3, [r4, #4]
 800b14e:	bf04      	itt	eq
 800b150:	1809      	addeq	r1, r1, r0
 800b152:	6021      	streq	r1, [r4, #0]
 800b154:	6054      	str	r4, [r2, #4]
 800b156:	e7ca      	b.n	800b0ee <_free_r+0x22>
 800b158:	bd38      	pop	{r3, r4, r5, pc}
 800b15a:	bf00      	nop
 800b15c:	200009c4 	.word	0x200009c4

0800b160 <__ssputs_r>:
 800b160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b164:	688e      	ldr	r6, [r1, #8]
 800b166:	461f      	mov	r7, r3
 800b168:	42be      	cmp	r6, r7
 800b16a:	680b      	ldr	r3, [r1, #0]
 800b16c:	4682      	mov	sl, r0
 800b16e:	460c      	mov	r4, r1
 800b170:	4690      	mov	r8, r2
 800b172:	d82d      	bhi.n	800b1d0 <__ssputs_r+0x70>
 800b174:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b178:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b17c:	d026      	beq.n	800b1cc <__ssputs_r+0x6c>
 800b17e:	6965      	ldr	r5, [r4, #20]
 800b180:	6909      	ldr	r1, [r1, #16]
 800b182:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b186:	eba3 0901 	sub.w	r9, r3, r1
 800b18a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b18e:	1c7b      	adds	r3, r7, #1
 800b190:	444b      	add	r3, r9
 800b192:	106d      	asrs	r5, r5, #1
 800b194:	429d      	cmp	r5, r3
 800b196:	bf38      	it	cc
 800b198:	461d      	movcc	r5, r3
 800b19a:	0553      	lsls	r3, r2, #21
 800b19c:	d527      	bpl.n	800b1ee <__ssputs_r+0x8e>
 800b19e:	4629      	mov	r1, r5
 800b1a0:	f7ff fea4 	bl	800aeec <_malloc_r>
 800b1a4:	4606      	mov	r6, r0
 800b1a6:	b360      	cbz	r0, 800b202 <__ssputs_r+0xa2>
 800b1a8:	6921      	ldr	r1, [r4, #16]
 800b1aa:	464a      	mov	r2, r9
 800b1ac:	f000 fad8 	bl	800b760 <memcpy>
 800b1b0:	89a3      	ldrh	r3, [r4, #12]
 800b1b2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b1b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1ba:	81a3      	strh	r3, [r4, #12]
 800b1bc:	6126      	str	r6, [r4, #16]
 800b1be:	6165      	str	r5, [r4, #20]
 800b1c0:	444e      	add	r6, r9
 800b1c2:	eba5 0509 	sub.w	r5, r5, r9
 800b1c6:	6026      	str	r6, [r4, #0]
 800b1c8:	60a5      	str	r5, [r4, #8]
 800b1ca:	463e      	mov	r6, r7
 800b1cc:	42be      	cmp	r6, r7
 800b1ce:	d900      	bls.n	800b1d2 <__ssputs_r+0x72>
 800b1d0:	463e      	mov	r6, r7
 800b1d2:	6820      	ldr	r0, [r4, #0]
 800b1d4:	4632      	mov	r2, r6
 800b1d6:	4641      	mov	r1, r8
 800b1d8:	f000 faa8 	bl	800b72c <memmove>
 800b1dc:	68a3      	ldr	r3, [r4, #8]
 800b1de:	1b9b      	subs	r3, r3, r6
 800b1e0:	60a3      	str	r3, [r4, #8]
 800b1e2:	6823      	ldr	r3, [r4, #0]
 800b1e4:	4433      	add	r3, r6
 800b1e6:	6023      	str	r3, [r4, #0]
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ee:	462a      	mov	r2, r5
 800b1f0:	f000 fac4 	bl	800b77c <_realloc_r>
 800b1f4:	4606      	mov	r6, r0
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	d1e0      	bne.n	800b1bc <__ssputs_r+0x5c>
 800b1fa:	6921      	ldr	r1, [r4, #16]
 800b1fc:	4650      	mov	r0, sl
 800b1fe:	f7ff ff65 	bl	800b0cc <_free_r>
 800b202:	230c      	movs	r3, #12
 800b204:	f8ca 3000 	str.w	r3, [sl]
 800b208:	89a3      	ldrh	r3, [r4, #12]
 800b20a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b20e:	81a3      	strh	r3, [r4, #12]
 800b210:	f04f 30ff 	mov.w	r0, #4294967295
 800b214:	e7e9      	b.n	800b1ea <__ssputs_r+0x8a>
	...

0800b218 <_svfiprintf_r>:
 800b218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b21c:	4698      	mov	r8, r3
 800b21e:	898b      	ldrh	r3, [r1, #12]
 800b220:	061b      	lsls	r3, r3, #24
 800b222:	b09d      	sub	sp, #116	@ 0x74
 800b224:	4607      	mov	r7, r0
 800b226:	460d      	mov	r5, r1
 800b228:	4614      	mov	r4, r2
 800b22a:	d510      	bpl.n	800b24e <_svfiprintf_r+0x36>
 800b22c:	690b      	ldr	r3, [r1, #16]
 800b22e:	b973      	cbnz	r3, 800b24e <_svfiprintf_r+0x36>
 800b230:	2140      	movs	r1, #64	@ 0x40
 800b232:	f7ff fe5b 	bl	800aeec <_malloc_r>
 800b236:	6028      	str	r0, [r5, #0]
 800b238:	6128      	str	r0, [r5, #16]
 800b23a:	b930      	cbnz	r0, 800b24a <_svfiprintf_r+0x32>
 800b23c:	230c      	movs	r3, #12
 800b23e:	603b      	str	r3, [r7, #0]
 800b240:	f04f 30ff 	mov.w	r0, #4294967295
 800b244:	b01d      	add	sp, #116	@ 0x74
 800b246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b24a:	2340      	movs	r3, #64	@ 0x40
 800b24c:	616b      	str	r3, [r5, #20]
 800b24e:	2300      	movs	r3, #0
 800b250:	9309      	str	r3, [sp, #36]	@ 0x24
 800b252:	2320      	movs	r3, #32
 800b254:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b258:	f8cd 800c 	str.w	r8, [sp, #12]
 800b25c:	2330      	movs	r3, #48	@ 0x30
 800b25e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b3fc <_svfiprintf_r+0x1e4>
 800b262:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b266:	f04f 0901 	mov.w	r9, #1
 800b26a:	4623      	mov	r3, r4
 800b26c:	469a      	mov	sl, r3
 800b26e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b272:	b10a      	cbz	r2, 800b278 <_svfiprintf_r+0x60>
 800b274:	2a25      	cmp	r2, #37	@ 0x25
 800b276:	d1f9      	bne.n	800b26c <_svfiprintf_r+0x54>
 800b278:	ebba 0b04 	subs.w	fp, sl, r4
 800b27c:	d00b      	beq.n	800b296 <_svfiprintf_r+0x7e>
 800b27e:	465b      	mov	r3, fp
 800b280:	4622      	mov	r2, r4
 800b282:	4629      	mov	r1, r5
 800b284:	4638      	mov	r0, r7
 800b286:	f7ff ff6b 	bl	800b160 <__ssputs_r>
 800b28a:	3001      	adds	r0, #1
 800b28c:	f000 80a7 	beq.w	800b3de <_svfiprintf_r+0x1c6>
 800b290:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b292:	445a      	add	r2, fp
 800b294:	9209      	str	r2, [sp, #36]	@ 0x24
 800b296:	f89a 3000 	ldrb.w	r3, [sl]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f000 809f 	beq.w	800b3de <_svfiprintf_r+0x1c6>
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b2a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2aa:	f10a 0a01 	add.w	sl, sl, #1
 800b2ae:	9304      	str	r3, [sp, #16]
 800b2b0:	9307      	str	r3, [sp, #28]
 800b2b2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b2b6:	931a      	str	r3, [sp, #104]	@ 0x68
 800b2b8:	4654      	mov	r4, sl
 800b2ba:	2205      	movs	r2, #5
 800b2bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2c0:	484e      	ldr	r0, [pc, #312]	@ (800b3fc <_svfiprintf_r+0x1e4>)
 800b2c2:	f7f4 ff8d 	bl	80001e0 <memchr>
 800b2c6:	9a04      	ldr	r2, [sp, #16]
 800b2c8:	b9d8      	cbnz	r0, 800b302 <_svfiprintf_r+0xea>
 800b2ca:	06d0      	lsls	r0, r2, #27
 800b2cc:	bf44      	itt	mi
 800b2ce:	2320      	movmi	r3, #32
 800b2d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2d4:	0711      	lsls	r1, r2, #28
 800b2d6:	bf44      	itt	mi
 800b2d8:	232b      	movmi	r3, #43	@ 0x2b
 800b2da:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b2de:	f89a 3000 	ldrb.w	r3, [sl]
 800b2e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800b2e4:	d015      	beq.n	800b312 <_svfiprintf_r+0xfa>
 800b2e6:	9a07      	ldr	r2, [sp, #28]
 800b2e8:	4654      	mov	r4, sl
 800b2ea:	2000      	movs	r0, #0
 800b2ec:	f04f 0c0a 	mov.w	ip, #10
 800b2f0:	4621      	mov	r1, r4
 800b2f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2f6:	3b30      	subs	r3, #48	@ 0x30
 800b2f8:	2b09      	cmp	r3, #9
 800b2fa:	d94b      	bls.n	800b394 <_svfiprintf_r+0x17c>
 800b2fc:	b1b0      	cbz	r0, 800b32c <_svfiprintf_r+0x114>
 800b2fe:	9207      	str	r2, [sp, #28]
 800b300:	e014      	b.n	800b32c <_svfiprintf_r+0x114>
 800b302:	eba0 0308 	sub.w	r3, r0, r8
 800b306:	fa09 f303 	lsl.w	r3, r9, r3
 800b30a:	4313      	orrs	r3, r2
 800b30c:	9304      	str	r3, [sp, #16]
 800b30e:	46a2      	mov	sl, r4
 800b310:	e7d2      	b.n	800b2b8 <_svfiprintf_r+0xa0>
 800b312:	9b03      	ldr	r3, [sp, #12]
 800b314:	1d19      	adds	r1, r3, #4
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	9103      	str	r1, [sp, #12]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	bfbb      	ittet	lt
 800b31e:	425b      	neglt	r3, r3
 800b320:	f042 0202 	orrlt.w	r2, r2, #2
 800b324:	9307      	strge	r3, [sp, #28]
 800b326:	9307      	strlt	r3, [sp, #28]
 800b328:	bfb8      	it	lt
 800b32a:	9204      	strlt	r2, [sp, #16]
 800b32c:	7823      	ldrb	r3, [r4, #0]
 800b32e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b330:	d10a      	bne.n	800b348 <_svfiprintf_r+0x130>
 800b332:	7863      	ldrb	r3, [r4, #1]
 800b334:	2b2a      	cmp	r3, #42	@ 0x2a
 800b336:	d132      	bne.n	800b39e <_svfiprintf_r+0x186>
 800b338:	9b03      	ldr	r3, [sp, #12]
 800b33a:	1d1a      	adds	r2, r3, #4
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	9203      	str	r2, [sp, #12]
 800b340:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b344:	3402      	adds	r4, #2
 800b346:	9305      	str	r3, [sp, #20]
 800b348:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b40c <_svfiprintf_r+0x1f4>
 800b34c:	7821      	ldrb	r1, [r4, #0]
 800b34e:	2203      	movs	r2, #3
 800b350:	4650      	mov	r0, sl
 800b352:	f7f4 ff45 	bl	80001e0 <memchr>
 800b356:	b138      	cbz	r0, 800b368 <_svfiprintf_r+0x150>
 800b358:	9b04      	ldr	r3, [sp, #16]
 800b35a:	eba0 000a 	sub.w	r0, r0, sl
 800b35e:	2240      	movs	r2, #64	@ 0x40
 800b360:	4082      	lsls	r2, r0
 800b362:	4313      	orrs	r3, r2
 800b364:	3401      	adds	r4, #1
 800b366:	9304      	str	r3, [sp, #16]
 800b368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b36c:	4824      	ldr	r0, [pc, #144]	@ (800b400 <_svfiprintf_r+0x1e8>)
 800b36e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b372:	2206      	movs	r2, #6
 800b374:	f7f4 ff34 	bl	80001e0 <memchr>
 800b378:	2800      	cmp	r0, #0
 800b37a:	d036      	beq.n	800b3ea <_svfiprintf_r+0x1d2>
 800b37c:	4b21      	ldr	r3, [pc, #132]	@ (800b404 <_svfiprintf_r+0x1ec>)
 800b37e:	bb1b      	cbnz	r3, 800b3c8 <_svfiprintf_r+0x1b0>
 800b380:	9b03      	ldr	r3, [sp, #12]
 800b382:	3307      	adds	r3, #7
 800b384:	f023 0307 	bic.w	r3, r3, #7
 800b388:	3308      	adds	r3, #8
 800b38a:	9303      	str	r3, [sp, #12]
 800b38c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b38e:	4433      	add	r3, r6
 800b390:	9309      	str	r3, [sp, #36]	@ 0x24
 800b392:	e76a      	b.n	800b26a <_svfiprintf_r+0x52>
 800b394:	fb0c 3202 	mla	r2, ip, r2, r3
 800b398:	460c      	mov	r4, r1
 800b39a:	2001      	movs	r0, #1
 800b39c:	e7a8      	b.n	800b2f0 <_svfiprintf_r+0xd8>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	3401      	adds	r4, #1
 800b3a2:	9305      	str	r3, [sp, #20]
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	f04f 0c0a 	mov.w	ip, #10
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3b0:	3a30      	subs	r2, #48	@ 0x30
 800b3b2:	2a09      	cmp	r2, #9
 800b3b4:	d903      	bls.n	800b3be <_svfiprintf_r+0x1a6>
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d0c6      	beq.n	800b348 <_svfiprintf_r+0x130>
 800b3ba:	9105      	str	r1, [sp, #20]
 800b3bc:	e7c4      	b.n	800b348 <_svfiprintf_r+0x130>
 800b3be:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3c2:	4604      	mov	r4, r0
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e7f0      	b.n	800b3aa <_svfiprintf_r+0x192>
 800b3c8:	ab03      	add	r3, sp, #12
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	462a      	mov	r2, r5
 800b3ce:	4b0e      	ldr	r3, [pc, #56]	@ (800b408 <_svfiprintf_r+0x1f0>)
 800b3d0:	a904      	add	r1, sp, #16
 800b3d2:	4638      	mov	r0, r7
 800b3d4:	f3af 8000 	nop.w
 800b3d8:	1c42      	adds	r2, r0, #1
 800b3da:	4606      	mov	r6, r0
 800b3dc:	d1d6      	bne.n	800b38c <_svfiprintf_r+0x174>
 800b3de:	89ab      	ldrh	r3, [r5, #12]
 800b3e0:	065b      	lsls	r3, r3, #25
 800b3e2:	f53f af2d 	bmi.w	800b240 <_svfiprintf_r+0x28>
 800b3e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b3e8:	e72c      	b.n	800b244 <_svfiprintf_r+0x2c>
 800b3ea:	ab03      	add	r3, sp, #12
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	462a      	mov	r2, r5
 800b3f0:	4b05      	ldr	r3, [pc, #20]	@ (800b408 <_svfiprintf_r+0x1f0>)
 800b3f2:	a904      	add	r1, sp, #16
 800b3f4:	4638      	mov	r0, r7
 800b3f6:	f000 f879 	bl	800b4ec <_printf_i>
 800b3fa:	e7ed      	b.n	800b3d8 <_svfiprintf_r+0x1c0>
 800b3fc:	0800b8f4 	.word	0x0800b8f4
 800b400:	0800b8fe 	.word	0x0800b8fe
 800b404:	00000000 	.word	0x00000000
 800b408:	0800b161 	.word	0x0800b161
 800b40c:	0800b8fa 	.word	0x0800b8fa

0800b410 <_printf_common>:
 800b410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b414:	4616      	mov	r6, r2
 800b416:	4698      	mov	r8, r3
 800b418:	688a      	ldr	r2, [r1, #8]
 800b41a:	690b      	ldr	r3, [r1, #16]
 800b41c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b420:	4293      	cmp	r3, r2
 800b422:	bfb8      	it	lt
 800b424:	4613      	movlt	r3, r2
 800b426:	6033      	str	r3, [r6, #0]
 800b428:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b42c:	4607      	mov	r7, r0
 800b42e:	460c      	mov	r4, r1
 800b430:	b10a      	cbz	r2, 800b436 <_printf_common+0x26>
 800b432:	3301      	adds	r3, #1
 800b434:	6033      	str	r3, [r6, #0]
 800b436:	6823      	ldr	r3, [r4, #0]
 800b438:	0699      	lsls	r1, r3, #26
 800b43a:	bf42      	ittt	mi
 800b43c:	6833      	ldrmi	r3, [r6, #0]
 800b43e:	3302      	addmi	r3, #2
 800b440:	6033      	strmi	r3, [r6, #0]
 800b442:	6825      	ldr	r5, [r4, #0]
 800b444:	f015 0506 	ands.w	r5, r5, #6
 800b448:	d106      	bne.n	800b458 <_printf_common+0x48>
 800b44a:	f104 0a19 	add.w	sl, r4, #25
 800b44e:	68e3      	ldr	r3, [r4, #12]
 800b450:	6832      	ldr	r2, [r6, #0]
 800b452:	1a9b      	subs	r3, r3, r2
 800b454:	42ab      	cmp	r3, r5
 800b456:	dc26      	bgt.n	800b4a6 <_printf_common+0x96>
 800b458:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b45c:	6822      	ldr	r2, [r4, #0]
 800b45e:	3b00      	subs	r3, #0
 800b460:	bf18      	it	ne
 800b462:	2301      	movne	r3, #1
 800b464:	0692      	lsls	r2, r2, #26
 800b466:	d42b      	bmi.n	800b4c0 <_printf_common+0xb0>
 800b468:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b46c:	4641      	mov	r1, r8
 800b46e:	4638      	mov	r0, r7
 800b470:	47c8      	blx	r9
 800b472:	3001      	adds	r0, #1
 800b474:	d01e      	beq.n	800b4b4 <_printf_common+0xa4>
 800b476:	6823      	ldr	r3, [r4, #0]
 800b478:	6922      	ldr	r2, [r4, #16]
 800b47a:	f003 0306 	and.w	r3, r3, #6
 800b47e:	2b04      	cmp	r3, #4
 800b480:	bf02      	ittt	eq
 800b482:	68e5      	ldreq	r5, [r4, #12]
 800b484:	6833      	ldreq	r3, [r6, #0]
 800b486:	1aed      	subeq	r5, r5, r3
 800b488:	68a3      	ldr	r3, [r4, #8]
 800b48a:	bf0c      	ite	eq
 800b48c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b490:	2500      	movne	r5, #0
 800b492:	4293      	cmp	r3, r2
 800b494:	bfc4      	itt	gt
 800b496:	1a9b      	subgt	r3, r3, r2
 800b498:	18ed      	addgt	r5, r5, r3
 800b49a:	2600      	movs	r6, #0
 800b49c:	341a      	adds	r4, #26
 800b49e:	42b5      	cmp	r5, r6
 800b4a0:	d11a      	bne.n	800b4d8 <_printf_common+0xc8>
 800b4a2:	2000      	movs	r0, #0
 800b4a4:	e008      	b.n	800b4b8 <_printf_common+0xa8>
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	4652      	mov	r2, sl
 800b4aa:	4641      	mov	r1, r8
 800b4ac:	4638      	mov	r0, r7
 800b4ae:	47c8      	blx	r9
 800b4b0:	3001      	adds	r0, #1
 800b4b2:	d103      	bne.n	800b4bc <_printf_common+0xac>
 800b4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4bc:	3501      	adds	r5, #1
 800b4be:	e7c6      	b.n	800b44e <_printf_common+0x3e>
 800b4c0:	18e1      	adds	r1, r4, r3
 800b4c2:	1c5a      	adds	r2, r3, #1
 800b4c4:	2030      	movs	r0, #48	@ 0x30
 800b4c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b4ca:	4422      	add	r2, r4
 800b4cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b4d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b4d4:	3302      	adds	r3, #2
 800b4d6:	e7c7      	b.n	800b468 <_printf_common+0x58>
 800b4d8:	2301      	movs	r3, #1
 800b4da:	4622      	mov	r2, r4
 800b4dc:	4641      	mov	r1, r8
 800b4de:	4638      	mov	r0, r7
 800b4e0:	47c8      	blx	r9
 800b4e2:	3001      	adds	r0, #1
 800b4e4:	d0e6      	beq.n	800b4b4 <_printf_common+0xa4>
 800b4e6:	3601      	adds	r6, #1
 800b4e8:	e7d9      	b.n	800b49e <_printf_common+0x8e>
	...

0800b4ec <_printf_i>:
 800b4ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f0:	7e0f      	ldrb	r7, [r1, #24]
 800b4f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b4f4:	2f78      	cmp	r7, #120	@ 0x78
 800b4f6:	4691      	mov	r9, r2
 800b4f8:	4680      	mov	r8, r0
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	469a      	mov	sl, r3
 800b4fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b502:	d807      	bhi.n	800b514 <_printf_i+0x28>
 800b504:	2f62      	cmp	r7, #98	@ 0x62
 800b506:	d80a      	bhi.n	800b51e <_printf_i+0x32>
 800b508:	2f00      	cmp	r7, #0
 800b50a:	f000 80d2 	beq.w	800b6b2 <_printf_i+0x1c6>
 800b50e:	2f58      	cmp	r7, #88	@ 0x58
 800b510:	f000 80b9 	beq.w	800b686 <_printf_i+0x19a>
 800b514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b518:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b51c:	e03a      	b.n	800b594 <_printf_i+0xa8>
 800b51e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b522:	2b15      	cmp	r3, #21
 800b524:	d8f6      	bhi.n	800b514 <_printf_i+0x28>
 800b526:	a101      	add	r1, pc, #4	@ (adr r1, 800b52c <_printf_i+0x40>)
 800b528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b52c:	0800b585 	.word	0x0800b585
 800b530:	0800b599 	.word	0x0800b599
 800b534:	0800b515 	.word	0x0800b515
 800b538:	0800b515 	.word	0x0800b515
 800b53c:	0800b515 	.word	0x0800b515
 800b540:	0800b515 	.word	0x0800b515
 800b544:	0800b599 	.word	0x0800b599
 800b548:	0800b515 	.word	0x0800b515
 800b54c:	0800b515 	.word	0x0800b515
 800b550:	0800b515 	.word	0x0800b515
 800b554:	0800b515 	.word	0x0800b515
 800b558:	0800b699 	.word	0x0800b699
 800b55c:	0800b5c3 	.word	0x0800b5c3
 800b560:	0800b653 	.word	0x0800b653
 800b564:	0800b515 	.word	0x0800b515
 800b568:	0800b515 	.word	0x0800b515
 800b56c:	0800b6bb 	.word	0x0800b6bb
 800b570:	0800b515 	.word	0x0800b515
 800b574:	0800b5c3 	.word	0x0800b5c3
 800b578:	0800b515 	.word	0x0800b515
 800b57c:	0800b515 	.word	0x0800b515
 800b580:	0800b65b 	.word	0x0800b65b
 800b584:	6833      	ldr	r3, [r6, #0]
 800b586:	1d1a      	adds	r2, r3, #4
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	6032      	str	r2, [r6, #0]
 800b58c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b590:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b594:	2301      	movs	r3, #1
 800b596:	e09d      	b.n	800b6d4 <_printf_i+0x1e8>
 800b598:	6833      	ldr	r3, [r6, #0]
 800b59a:	6820      	ldr	r0, [r4, #0]
 800b59c:	1d19      	adds	r1, r3, #4
 800b59e:	6031      	str	r1, [r6, #0]
 800b5a0:	0606      	lsls	r6, r0, #24
 800b5a2:	d501      	bpl.n	800b5a8 <_printf_i+0xbc>
 800b5a4:	681d      	ldr	r5, [r3, #0]
 800b5a6:	e003      	b.n	800b5b0 <_printf_i+0xc4>
 800b5a8:	0645      	lsls	r5, r0, #25
 800b5aa:	d5fb      	bpl.n	800b5a4 <_printf_i+0xb8>
 800b5ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b5b0:	2d00      	cmp	r5, #0
 800b5b2:	da03      	bge.n	800b5bc <_printf_i+0xd0>
 800b5b4:	232d      	movs	r3, #45	@ 0x2d
 800b5b6:	426d      	negs	r5, r5
 800b5b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5bc:	4859      	ldr	r0, [pc, #356]	@ (800b724 <_printf_i+0x238>)
 800b5be:	230a      	movs	r3, #10
 800b5c0:	e011      	b.n	800b5e6 <_printf_i+0xfa>
 800b5c2:	6821      	ldr	r1, [r4, #0]
 800b5c4:	6833      	ldr	r3, [r6, #0]
 800b5c6:	0608      	lsls	r0, r1, #24
 800b5c8:	f853 5b04 	ldr.w	r5, [r3], #4
 800b5cc:	d402      	bmi.n	800b5d4 <_printf_i+0xe8>
 800b5ce:	0649      	lsls	r1, r1, #25
 800b5d0:	bf48      	it	mi
 800b5d2:	b2ad      	uxthmi	r5, r5
 800b5d4:	2f6f      	cmp	r7, #111	@ 0x6f
 800b5d6:	4853      	ldr	r0, [pc, #332]	@ (800b724 <_printf_i+0x238>)
 800b5d8:	6033      	str	r3, [r6, #0]
 800b5da:	bf14      	ite	ne
 800b5dc:	230a      	movne	r3, #10
 800b5de:	2308      	moveq	r3, #8
 800b5e0:	2100      	movs	r1, #0
 800b5e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b5e6:	6866      	ldr	r6, [r4, #4]
 800b5e8:	60a6      	str	r6, [r4, #8]
 800b5ea:	2e00      	cmp	r6, #0
 800b5ec:	bfa2      	ittt	ge
 800b5ee:	6821      	ldrge	r1, [r4, #0]
 800b5f0:	f021 0104 	bicge.w	r1, r1, #4
 800b5f4:	6021      	strge	r1, [r4, #0]
 800b5f6:	b90d      	cbnz	r5, 800b5fc <_printf_i+0x110>
 800b5f8:	2e00      	cmp	r6, #0
 800b5fa:	d04b      	beq.n	800b694 <_printf_i+0x1a8>
 800b5fc:	4616      	mov	r6, r2
 800b5fe:	fbb5 f1f3 	udiv	r1, r5, r3
 800b602:	fb03 5711 	mls	r7, r3, r1, r5
 800b606:	5dc7      	ldrb	r7, [r0, r7]
 800b608:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b60c:	462f      	mov	r7, r5
 800b60e:	42bb      	cmp	r3, r7
 800b610:	460d      	mov	r5, r1
 800b612:	d9f4      	bls.n	800b5fe <_printf_i+0x112>
 800b614:	2b08      	cmp	r3, #8
 800b616:	d10b      	bne.n	800b630 <_printf_i+0x144>
 800b618:	6823      	ldr	r3, [r4, #0]
 800b61a:	07df      	lsls	r7, r3, #31
 800b61c:	d508      	bpl.n	800b630 <_printf_i+0x144>
 800b61e:	6923      	ldr	r3, [r4, #16]
 800b620:	6861      	ldr	r1, [r4, #4]
 800b622:	4299      	cmp	r1, r3
 800b624:	bfde      	ittt	le
 800b626:	2330      	movle	r3, #48	@ 0x30
 800b628:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b62c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b630:	1b92      	subs	r2, r2, r6
 800b632:	6122      	str	r2, [r4, #16]
 800b634:	f8cd a000 	str.w	sl, [sp]
 800b638:	464b      	mov	r3, r9
 800b63a:	aa03      	add	r2, sp, #12
 800b63c:	4621      	mov	r1, r4
 800b63e:	4640      	mov	r0, r8
 800b640:	f7ff fee6 	bl	800b410 <_printf_common>
 800b644:	3001      	adds	r0, #1
 800b646:	d14a      	bne.n	800b6de <_printf_i+0x1f2>
 800b648:	f04f 30ff 	mov.w	r0, #4294967295
 800b64c:	b004      	add	sp, #16
 800b64e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	f043 0320 	orr.w	r3, r3, #32
 800b658:	6023      	str	r3, [r4, #0]
 800b65a:	4833      	ldr	r0, [pc, #204]	@ (800b728 <_printf_i+0x23c>)
 800b65c:	2778      	movs	r7, #120	@ 0x78
 800b65e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	6831      	ldr	r1, [r6, #0]
 800b666:	061f      	lsls	r7, r3, #24
 800b668:	f851 5b04 	ldr.w	r5, [r1], #4
 800b66c:	d402      	bmi.n	800b674 <_printf_i+0x188>
 800b66e:	065f      	lsls	r7, r3, #25
 800b670:	bf48      	it	mi
 800b672:	b2ad      	uxthmi	r5, r5
 800b674:	6031      	str	r1, [r6, #0]
 800b676:	07d9      	lsls	r1, r3, #31
 800b678:	bf44      	itt	mi
 800b67a:	f043 0320 	orrmi.w	r3, r3, #32
 800b67e:	6023      	strmi	r3, [r4, #0]
 800b680:	b11d      	cbz	r5, 800b68a <_printf_i+0x19e>
 800b682:	2310      	movs	r3, #16
 800b684:	e7ac      	b.n	800b5e0 <_printf_i+0xf4>
 800b686:	4827      	ldr	r0, [pc, #156]	@ (800b724 <_printf_i+0x238>)
 800b688:	e7e9      	b.n	800b65e <_printf_i+0x172>
 800b68a:	6823      	ldr	r3, [r4, #0]
 800b68c:	f023 0320 	bic.w	r3, r3, #32
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	e7f6      	b.n	800b682 <_printf_i+0x196>
 800b694:	4616      	mov	r6, r2
 800b696:	e7bd      	b.n	800b614 <_printf_i+0x128>
 800b698:	6833      	ldr	r3, [r6, #0]
 800b69a:	6825      	ldr	r5, [r4, #0]
 800b69c:	6961      	ldr	r1, [r4, #20]
 800b69e:	1d18      	adds	r0, r3, #4
 800b6a0:	6030      	str	r0, [r6, #0]
 800b6a2:	062e      	lsls	r6, r5, #24
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	d501      	bpl.n	800b6ac <_printf_i+0x1c0>
 800b6a8:	6019      	str	r1, [r3, #0]
 800b6aa:	e002      	b.n	800b6b2 <_printf_i+0x1c6>
 800b6ac:	0668      	lsls	r0, r5, #25
 800b6ae:	d5fb      	bpl.n	800b6a8 <_printf_i+0x1bc>
 800b6b0:	8019      	strh	r1, [r3, #0]
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	6123      	str	r3, [r4, #16]
 800b6b6:	4616      	mov	r6, r2
 800b6b8:	e7bc      	b.n	800b634 <_printf_i+0x148>
 800b6ba:	6833      	ldr	r3, [r6, #0]
 800b6bc:	1d1a      	adds	r2, r3, #4
 800b6be:	6032      	str	r2, [r6, #0]
 800b6c0:	681e      	ldr	r6, [r3, #0]
 800b6c2:	6862      	ldr	r2, [r4, #4]
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	4630      	mov	r0, r6
 800b6c8:	f7f4 fd8a 	bl	80001e0 <memchr>
 800b6cc:	b108      	cbz	r0, 800b6d2 <_printf_i+0x1e6>
 800b6ce:	1b80      	subs	r0, r0, r6
 800b6d0:	6060      	str	r0, [r4, #4]
 800b6d2:	6863      	ldr	r3, [r4, #4]
 800b6d4:	6123      	str	r3, [r4, #16]
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b6dc:	e7aa      	b.n	800b634 <_printf_i+0x148>
 800b6de:	6923      	ldr	r3, [r4, #16]
 800b6e0:	4632      	mov	r2, r6
 800b6e2:	4649      	mov	r1, r9
 800b6e4:	4640      	mov	r0, r8
 800b6e6:	47d0      	blx	sl
 800b6e8:	3001      	adds	r0, #1
 800b6ea:	d0ad      	beq.n	800b648 <_printf_i+0x15c>
 800b6ec:	6823      	ldr	r3, [r4, #0]
 800b6ee:	079b      	lsls	r3, r3, #30
 800b6f0:	d413      	bmi.n	800b71a <_printf_i+0x22e>
 800b6f2:	68e0      	ldr	r0, [r4, #12]
 800b6f4:	9b03      	ldr	r3, [sp, #12]
 800b6f6:	4298      	cmp	r0, r3
 800b6f8:	bfb8      	it	lt
 800b6fa:	4618      	movlt	r0, r3
 800b6fc:	e7a6      	b.n	800b64c <_printf_i+0x160>
 800b6fe:	2301      	movs	r3, #1
 800b700:	4632      	mov	r2, r6
 800b702:	4649      	mov	r1, r9
 800b704:	4640      	mov	r0, r8
 800b706:	47d0      	blx	sl
 800b708:	3001      	adds	r0, #1
 800b70a:	d09d      	beq.n	800b648 <_printf_i+0x15c>
 800b70c:	3501      	adds	r5, #1
 800b70e:	68e3      	ldr	r3, [r4, #12]
 800b710:	9903      	ldr	r1, [sp, #12]
 800b712:	1a5b      	subs	r3, r3, r1
 800b714:	42ab      	cmp	r3, r5
 800b716:	dcf2      	bgt.n	800b6fe <_printf_i+0x212>
 800b718:	e7eb      	b.n	800b6f2 <_printf_i+0x206>
 800b71a:	2500      	movs	r5, #0
 800b71c:	f104 0619 	add.w	r6, r4, #25
 800b720:	e7f5      	b.n	800b70e <_printf_i+0x222>
 800b722:	bf00      	nop
 800b724:	0800b905 	.word	0x0800b905
 800b728:	0800b916 	.word	0x0800b916

0800b72c <memmove>:
 800b72c:	4288      	cmp	r0, r1
 800b72e:	b510      	push	{r4, lr}
 800b730:	eb01 0402 	add.w	r4, r1, r2
 800b734:	d902      	bls.n	800b73c <memmove+0x10>
 800b736:	4284      	cmp	r4, r0
 800b738:	4623      	mov	r3, r4
 800b73a:	d807      	bhi.n	800b74c <memmove+0x20>
 800b73c:	1e43      	subs	r3, r0, #1
 800b73e:	42a1      	cmp	r1, r4
 800b740:	d008      	beq.n	800b754 <memmove+0x28>
 800b742:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b746:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b74a:	e7f8      	b.n	800b73e <memmove+0x12>
 800b74c:	4402      	add	r2, r0
 800b74e:	4601      	mov	r1, r0
 800b750:	428a      	cmp	r2, r1
 800b752:	d100      	bne.n	800b756 <memmove+0x2a>
 800b754:	bd10      	pop	{r4, pc}
 800b756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b75a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b75e:	e7f7      	b.n	800b750 <memmove+0x24>

0800b760 <memcpy>:
 800b760:	440a      	add	r2, r1
 800b762:	4291      	cmp	r1, r2
 800b764:	f100 33ff 	add.w	r3, r0, #4294967295
 800b768:	d100      	bne.n	800b76c <memcpy+0xc>
 800b76a:	4770      	bx	lr
 800b76c:	b510      	push	{r4, lr}
 800b76e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b772:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b776:	4291      	cmp	r1, r2
 800b778:	d1f9      	bne.n	800b76e <memcpy+0xe>
 800b77a:	bd10      	pop	{r4, pc}

0800b77c <_realloc_r>:
 800b77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b780:	4680      	mov	r8, r0
 800b782:	4615      	mov	r5, r2
 800b784:	460c      	mov	r4, r1
 800b786:	b921      	cbnz	r1, 800b792 <_realloc_r+0x16>
 800b788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b78c:	4611      	mov	r1, r2
 800b78e:	f7ff bbad 	b.w	800aeec <_malloc_r>
 800b792:	b92a      	cbnz	r2, 800b7a0 <_realloc_r+0x24>
 800b794:	f7ff fc9a 	bl	800b0cc <_free_r>
 800b798:	2400      	movs	r4, #0
 800b79a:	4620      	mov	r0, r4
 800b79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7a0:	f000 f81a 	bl	800b7d8 <_malloc_usable_size_r>
 800b7a4:	4285      	cmp	r5, r0
 800b7a6:	4606      	mov	r6, r0
 800b7a8:	d802      	bhi.n	800b7b0 <_realloc_r+0x34>
 800b7aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b7ae:	d8f4      	bhi.n	800b79a <_realloc_r+0x1e>
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	4640      	mov	r0, r8
 800b7b4:	f7ff fb9a 	bl	800aeec <_malloc_r>
 800b7b8:	4607      	mov	r7, r0
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	d0ec      	beq.n	800b798 <_realloc_r+0x1c>
 800b7be:	42b5      	cmp	r5, r6
 800b7c0:	462a      	mov	r2, r5
 800b7c2:	4621      	mov	r1, r4
 800b7c4:	bf28      	it	cs
 800b7c6:	4632      	movcs	r2, r6
 800b7c8:	f7ff ffca 	bl	800b760 <memcpy>
 800b7cc:	4621      	mov	r1, r4
 800b7ce:	4640      	mov	r0, r8
 800b7d0:	f7ff fc7c 	bl	800b0cc <_free_r>
 800b7d4:	463c      	mov	r4, r7
 800b7d6:	e7e0      	b.n	800b79a <_realloc_r+0x1e>

0800b7d8 <_malloc_usable_size_r>:
 800b7d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7dc:	1f18      	subs	r0, r3, #4
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	bfbc      	itt	lt
 800b7e2:	580b      	ldrlt	r3, [r1, r0]
 800b7e4:	18c0      	addlt	r0, r0, r3
 800b7e6:	4770      	bx	lr

0800b7e8 <_init>:
 800b7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ea:	bf00      	nop
 800b7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ee:	bc08      	pop	{r3}
 800b7f0:	469e      	mov	lr, r3
 800b7f2:	4770      	bx	lr

0800b7f4 <_fini>:
 800b7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7f6:	bf00      	nop
 800b7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7fa:	bc08      	pop	{r3}
 800b7fc:	469e      	mov	lr, r3
 800b7fe:	4770      	bx	lr
